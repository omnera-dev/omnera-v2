{
  "$id": "https://omnera.dev/schemas/0.0.1/app.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$defs": {
    "Int": { "type": "integer", "description": "an integer", "title": "int" },
    "BlockChildren": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Component type identifier",
            "title": "Component Type",
            "examples": ["icon", "text", "div", "button"]
          },
          "props": {
            "type": "object",
            "required": [],
            "properties": {},
            "patternProperties": {
              "": {
                "anyOf": [
                  { "type": "string" },
                  { "type": "number" },
                  { "type": "boolean" },
                  {
                    "type": "object",
                    "required": [],
                    "properties": {},
                    "additionalProperties": {
                      "$id": "/schemas/unknown",
                      "title": "unknown"
                    }
                  },
                  {
                    "type": "array",
                    "items": { "$id": "/schemas/unknown", "title": "unknown" }
                  }
                ]
              }
            },
            "propertyNames": {
              "type": "string",
              "description": "Valid JavaScript property name (camelCase) or HTML data-*/aria-* attribute (kebab-case)",
              "title": "Block Prop Key",
              "examples": [
                "className",
                "size",
                "enabled",
                "maxWidth",
                "data-testid",
                "aria-label"
              ],
              "pattern": "^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$"
            },
            "description": "Properties for block templates, supporting variable references",
            "title": "Block Props"
          },
          "children": { "$ref": "#/$defs/BlockChildren" },
          "content": {
            "type": "string",
            "description": "Text content (may contain $variable)",
            "title": "Text Content",
            "examples": ["$label", "$title", "Static text"]
          }
        },
        "additionalProperties": false,
        "description": "Component element in a block template",
        "title": "Block Child Element"
      },
      "description": "Child elements array for block templates",
      "title": "Block Children"
    },
    "Pages": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["path", "sections"],
        "properties": {
          "id": {
            "$ref": "#/$defs/Int",
            "description": "Unique positive integer identifier for entities",
            "title": "ID",
            "minimum": 1,
            "examples": [1, 2, 3, 100, 1000],
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string",
            "description": "Internal identifier name for database tables, columns, and programmatic references",
            "title": "Name",
            "minLength": 1,
            "maxLength": 63,
            "examples": [
              "user",
              "product",
              "order_item",
              "customer_email",
              "shipping_address",
              "created_at"
            ],
            "pattern": "^[a-z][a-z0-9_]*$"
          },
          "path": {
            "type": "string",
            "description": "URL path for routing and navigation",
            "title": "Path",
            "minLength": 1,
            "examples": [
              "/home",
              "/customers",
              "/products/inventory",
              "/admin/settings",
              "/reports/sales"
            ],
            "pattern": "^\\/[a-z0-9-/]*$"
          },
          "meta": {
            "type": "object",
            "required": ["lang", "title", "description"],
            "properties": {
              "lang": {
                "type": "string",
                "description": "Page language code (ISO 639-1 with optional country)",
                "examples": ["en-US", "fr-FR", "es-ES", "de-DE"],
                "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
              },
              "title": {
                "type": "string",
                "description": "Page title for browser tab and SEO (max 60 characters for optimal display)",
                "title": "maxLength(60)",
                "maxLength": 60
              },
              "description": {
                "type": "string",
                "description": "Page description for SEO and social sharing (max 160 characters)",
                "title": "maxLength(160)",
                "maxLength": 160
              },
              "keywords": {
                "type": "string",
                "description": "Comma-separated keywords for SEO"
              },
              "author": {
                "type": "string",
                "description": "Page author or organization name"
              },
              "canonical": {
                "type": "string",
                "description": "Canonical URL to prevent duplicate content issues"
              },
              "favicon": {
                "type": "string",
                "description": "Default favicon path",
                "title": "Favicon",
                "pattern": "^\\.\\/.+\\.(ico|png|svg)$"
              },
              "favicons": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["rel", "href"],
                  "properties": {
                    "rel": {
                      "type": "string",
                      "enum": [
                        "icon",
                        "apple-touch-icon",
                        "manifest",
                        "mask-icon"
                      ],
                      "description": "Favicon relationship type"
                    },
                    "type": {
                      "type": "string",
                      "description": "MIME type",
                      "examples": [
                        "image/png",
                        "image/x-icon",
                        "image/svg+xml"
                      ],
                      "pattern": "^image\\/"
                    },
                    "sizes": {
                      "type": "string",
                      "description": "Icon dimensions",
                      "examples": ["16x16", "32x32", "180x180", "192x192"],
                      "pattern": "^[0-9]+x[0-9]+$"
                    },
                    "href": {
                      "type": "string",
                      "description": "Path to the favicon file",
                      "pattern": "^\\.\\/"
                    },
                    "color": {
                      "type": "string",
                      "description": "Color for mask-icon (Safari pinned tab)",
                      "pattern": "^#[0-9A-Fa-f]{6}$"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Favicon item"
                },
                "description": "Multiple favicon sizes and types for different devices",
                "title": "Favicon Set"
              },
              "stylesheet": {
                "type": "string",
                "description": "Path to the main stylesheet"
              },
              "googleFonts": {
                "type": "string",
                "description": "Google Fonts URL"
              },
              "socialImage": {
                "type": "string",
                "description": "Default image for social media sharing"
              },
              "openGraph": {
                "type": "object",
                "required": ["title", "description", "type", "url"],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Open Graph title (may differ from page title)",
                    "title": "maxLength(90)",
                    "maxLength": 90
                  },
                  "description": {
                    "type": "string",
                    "description": "Open Graph description",
                    "title": "maxLength(200)",
                    "maxLength": 200
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "website",
                      "article",
                      "book",
                      "profile",
                      "video",
                      "music"
                    ],
                    "description": "Open Graph object type"
                  },
                  "url": {
                    "type": "string",
                    "description": "Canonical URL for this page"
                  },
                  "image": {
                    "type": "string",
                    "description": "Image URL for social sharing (recommended: 1200x630px)"
                  },
                  "imageAlt": {
                    "type": "string",
                    "description": "Alternative text for the Open Graph image"
                  },
                  "siteName": {
                    "type": "string",
                    "description": "Name of the overall website"
                  },
                  "locale": {
                    "type": "string",
                    "description": "Locale in format language_TERRITORY",
                    "examples": ["en_US", "fr_FR", "es_ES"],
                    "pattern": "^[a-z]{2}_[A-Z]{2}$"
                  },
                  "determiner": {
                    "type": "string",
                    "enum": ["a", "an", "the", "auto", ""],
                    "description": "Word that appears before the title"
                  },
                  "video": {
                    "type": "string",
                    "description": "Video URL if sharing video content"
                  },
                  "audio": {
                    "type": "string",
                    "description": "Audio URL if sharing audio content"
                  }
                },
                "additionalProperties": false,
                "description": "Open Graph protocol metadata for rich social media sharing",
                "title": "Open Graph Metadata"
              },
              "twitter": {
                "type": "object",
                "required": ["card"],
                "properties": {
                  "card": {
                    "type": "string",
                    "enum": ["summary", "summary_large_image", "app", "player"],
                    "description": "Type of Twitter Card"
                  },
                  "title": {
                    "type": "string",
                    "description": "Twitter Card title",
                    "title": "maxLength(70)",
                    "maxLength": 70
                  },
                  "description": {
                    "type": "string",
                    "description": "Twitter Card description",
                    "title": "maxLength(200)",
                    "maxLength": 200
                  },
                  "image": {
                    "type": "string",
                    "description": "Image URL (min 144x144px for summary, 300x157px for large)"
                  },
                  "imageAlt": {
                    "type": "string",
                    "description": "Alternative text for the image",
                    "title": "maxLength(420)",
                    "maxLength": 420
                  },
                  "site": {
                    "type": "string",
                    "description": "Twitter @username of website",
                    "examples": ["@mysite", "@johndoe"],
                    "pattern": "^@[A-Za-z0-9_]+$"
                  },
                  "creator": {
                    "type": "string",
                    "description": "Twitter @username of content creator",
                    "examples": ["@mysite", "@johndoe"],
                    "pattern": "^@[A-Za-z0-9_]+$"
                  },
                  "player": {
                    "type": "string",
                    "description": "HTTPS URL to video player (for player cards)"
                  },
                  "playerWidth": {
                    "$ref": "#/$defs/Int",
                    "description": "Width of video player in pixels",
                    "title": "greaterThanOrEqualTo(1)",
                    "minimum": 1
                  },
                  "playerHeight": {
                    "$ref": "#/$defs/Int",
                    "description": "Height of video player in pixels",
                    "title": "greaterThanOrEqualTo(1)",
                    "minimum": 1
                  },
                  "appName": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "iPhone": {
                        "type": "string",
                        "description": "App name for iPhone"
                      },
                      "iPad": {
                        "type": "string",
                        "description": "App name for iPad"
                      },
                      "googlePlay": {
                        "type": "string",
                        "description": "App name for Google Play"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Name of app (for app cards)"
                  },
                  "appId": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "iPhone": {
                        "type": "string",
                        "description": "App Store ID for iPhone"
                      },
                      "iPad": {
                        "type": "string",
                        "description": "App Store ID for iPad"
                      },
                      "googlePlay": {
                        "type": "string",
                        "description": "Google Play package name (e.g., com.example.myapp)"
                      }
                    },
                    "additionalProperties": false,
                    "description": "App ID in respective stores"
                  }
                },
                "additionalProperties": false,
                "description": "Twitter Card metadata for rich Twitter/X sharing",
                "title": "Twitter Card Metadata"
              },
              "schema": {
                "type": "object",
                "required": [],
                "properties": {
                  "organization": {
                    "type": "object",
                    "required": ["@context", "@type", "name"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["Organization"],
                        "description": "Schema.org type"
                      },
                      "name": {
                        "type": "string",
                        "description": "Organization name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Organization description"
                      },
                      "url": {
                        "type": "string",
                        "description": "Organization website URL"
                      },
                      "logo": {
                        "type": "string",
                        "description": "Organization logo URL"
                      },
                      "image": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Organization image URL"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Organization image URL"
                            }
                          }
                        ],
                        "description": "Organization image(s)"
                      },
                      "email": {
                        "type": "string",
                        "description": "Contact email"
                      },
                      "telephone": {
                        "type": "string",
                        "description": "Contact phone number"
                      },
                      "address": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["PostalAddress"],
                            "description": "Schema.org type"
                          },
                          "streetAddress": {
                            "type": "string",
                            "description": "Street address"
                          },
                          "addressLocality": {
                            "type": "string",
                            "description": "City or locality"
                          },
                          "addressRegion": {
                            "type": "string",
                            "description": "State or region"
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Postal or ZIP code"
                          },
                          "addressCountry": {
                            "type": "string",
                            "description": "ISO 3166-1 alpha-2 country code",
                            "examples": ["US", "FR", "GB", "DE"],
                            "pattern": "^[A-Z]{2}$"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Schema.org PostalAddress structured data",
                        "title": "Postal Address"
                      },
                      "sameAs": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Social media profile URL"
                        },
                        "description": "Social media profile URLs",
                        "examples": [
                          [
                            "https://facebook.com/myorg",
                            "https://twitter.com/myorg"
                          ]
                        ]
                      },
                      "founder": {
                        "type": "string",
                        "description": "Organization founder name"
                      },
                      "foundingDate": {
                        "type": "string",
                        "description": "Date organization was founded"
                      },
                      "employees": {
                        "$ref": "#/$defs/Int",
                        "description": "Number of employees",
                        "title": "greaterThanOrEqualTo(1)",
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org Organization structured data",
                    "title": "Organization Schema"
                  },
                  "person": {
                    "type": "object",
                    "required": ["@context", "@type", "name"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["Person"],
                        "description": "Schema.org type"
                      },
                      "name": {
                        "type": "string",
                        "description": "Person's full name"
                      },
                      "givenName": {
                        "type": "string",
                        "description": "First name"
                      },
                      "familyName": {
                        "type": "string",
                        "description": "Last name"
                      },
                      "email": {
                        "type": "string",
                        "description": "Email address"
                      },
                      "telephone": {
                        "type": "string",
                        "description": "Phone number"
                      },
                      "url": {
                        "type": "string",
                        "description": "Person's website or profile"
                      },
                      "image": {
                        "type": "string",
                        "description": "Person's photo URL"
                      },
                      "jobTitle": {
                        "type": "string",
                        "description": "Professional role"
                      },
                      "worksFor": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Organization"],
                            "description": "Schema.org type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Organization name"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Person's employer organization"
                      },
                      "sameAs": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Social media profile URL"
                        },
                        "description": "Array of social media profile URLs"
                      },
                      "address": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["PostalAddress"],
                            "description": "Schema.org type"
                          },
                          "streetAddress": {
                            "type": "string",
                            "description": "Street address"
                          },
                          "addressLocality": {
                            "type": "string",
                            "description": "City or locality"
                          },
                          "addressRegion": {
                            "type": "string",
                            "description": "State or region"
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Postal or ZIP code"
                          },
                          "addressCountry": {
                            "type": "string",
                            "description": "ISO 3166-1 alpha-2 country code",
                            "examples": ["US", "FR", "GB", "DE"],
                            "pattern": "^[A-Z]{2}$"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Schema.org PostalAddress structured data",
                        "title": "Postal Address"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org Person structured data",
                    "title": "Person Schema"
                  },
                  "localBusiness": {
                    "type": "object",
                    "required": ["@context", "@type", "name"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["LocalBusiness"],
                        "description": "Schema.org type"
                      },
                      "name": {
                        "type": "string",
                        "description": "Business name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Business description"
                      },
                      "url": {
                        "type": "string",
                        "description": "Business website URL"
                      },
                      "logo": {
                        "type": "string",
                        "description": "Business logo URL"
                      },
                      "image": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Business image URL"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Business image URL"
                            }
                          }
                        ],
                        "description": "Business image(s)"
                      },
                      "email": {
                        "type": "string",
                        "description": "Contact email"
                      },
                      "telephone": {
                        "type": "string",
                        "description": "Contact phone number"
                      },
                      "priceRange": {
                        "type": "string",
                        "description": "Price range (e.g., '$-$$$$')"
                      },
                      "address": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["PostalAddress"],
                            "description": "Schema.org type"
                          },
                          "streetAddress": {
                            "type": "string",
                            "description": "Street address"
                          },
                          "addressLocality": {
                            "type": "string",
                            "description": "City or locality"
                          },
                          "addressRegion": {
                            "type": "string",
                            "description": "State or region"
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Postal or ZIP code"
                          },
                          "addressCountry": {
                            "type": "string",
                            "description": "ISO 3166-1 alpha-2 country code",
                            "examples": ["US", "FR", "GB", "DE"],
                            "pattern": "^[A-Z]{2}$"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Schema.org PostalAddress structured data",
                        "title": "Postal Address"
                      },
                      "geo": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["GeoCoordinates"],
                            "description": "Schema.org type"
                          },
                          "latitude": {
                            "type": "string",
                            "description": "Latitude"
                          },
                          "longitude": {
                            "type": "string",
                            "description": "Longitude"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Geographic coordinates"
                      },
                      "sameAs": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "description": "Social media profile URL"
                        },
                        "description": "Social media profile URLs"
                      },
                      "openingHoursSpecification": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["@type"],
                          "properties": {
                            "@type": {
                              "type": "string",
                              "enum": ["OpeningHoursSpecification"],
                              "description": "Schema.org type"
                            },
                            "dayOfWeek": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "Monday",
                                  "Tuesday",
                                  "Wednesday",
                                  "Thursday",
                                  "Friday",
                                  "Saturday",
                                  "Sunday"
                                ],
                                "description": "Day of the week"
                              },
                              "description": "Days these hours apply to"
                            },
                            "opens": {
                              "type": "string",
                              "description": "Opening time",
                              "examples": ["09:00", "18:00"],
                              "pattern": "^[0-9]{2}:[0-9]{2}$"
                            },
                            "closes": {
                              "type": "string",
                              "description": "Closing time",
                              "examples": ["09:00", "18:00"],
                              "pattern": "^[0-9]{2}:[0-9]{2}$"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Opening hours specification"
                        },
                        "description": "Opening hours specifications"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org LocalBusiness structured data",
                    "title": "Local Business Schema"
                  },
                  "product": {
                    "type": "object",
                    "required": ["@context", "@type", "name"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["Product"],
                        "description": "Schema.org type"
                      },
                      "name": {
                        "type": "string",
                        "description": "Product name"
                      },
                      "description": {
                        "type": "string",
                        "description": "Product description"
                      },
                      "image": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Product image URL"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Product image URL"
                            }
                          }
                        ],
                        "description": "Product image(s)"
                      },
                      "brand": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Brand"],
                            "description": "Schema.org type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Brand name"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Product brand"
                      },
                      "sku": {
                        "type": "string",
                        "description": "Stock Keeping Unit"
                      },
                      "gtin": {
                        "type": "string",
                        "description": "Global Trade Item Number (UPC, EAN, ISBN)"
                      },
                      "offers": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Offer"],
                            "description": "Schema.org type"
                          },
                          "price": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" }
                            ],
                            "description": "Product price"
                          },
                          "priceCurrency": {
                            "type": "string",
                            "description": "ISO 4217 currency code",
                            "examples": ["USD", "EUR", "GBP"],
                            "pattern": "^[A-Z]{3}$"
                          },
                          "availability": {
                            "type": "string",
                            "description": "Stock availability status"
                          },
                          "url": {
                            "type": "string",
                            "description": "URL to purchase page"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Product offer"
                      },
                      "aggregateRating": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["AggregateRating"],
                            "description": "Schema.org type"
                          },
                          "ratingValue": {
                            "type": "number",
                            "description": "Average rating value"
                          },
                          "reviewCount": {
                            "type": "integer",
                            "description": "Total number of reviews",
                            "title": "int"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Aggregate rating"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org Product structured data",
                    "title": "Product Schema"
                  },
                  "article": {
                    "type": "object",
                    "required": ["@context", "@type", "headline"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["Article", "NewsArticle", "BlogPosting"],
                        "description": "Article type"
                      },
                      "headline": {
                        "type": "string",
                        "description": "Article title"
                      },
                      "description": {
                        "type": "string",
                        "description": "Article summary"
                      },
                      "image": {
                        "anyOf": [
                          {
                            "type": "string",
                            "description": "Article image URL"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Article image URL"
                            }
                          }
                        ],
                        "description": "Article image(s)"
                      },
                      "author": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "required": ["@type"],
                            "properties": {
                              "@type": {
                                "type": "string",
                                "enum": ["Person", "Organization"],
                                "description": "Author type"
                              },
                              "name": {
                                "type": "string",
                                "description": "Author name"
                              },
                              "url": {
                                "type": "string",
                                "description": "Author profile URL"
                              }
                            },
                            "additionalProperties": false
                          }
                        ],
                        "description": "Article author"
                      },
                      "datePublished": {
                        "type": "string",
                        "description": "Publication date"
                      },
                      "dateModified": {
                        "type": "string",
                        "description": "Last modification date"
                      },
                      "publisher": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Organization"],
                            "description": "Schema.org type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Publisher name"
                          },
                          "logo": {
                            "type": "object",
                            "required": ["@type"],
                            "properties": {
                              "@type": {
                                "type": "string",
                                "enum": ["ImageObject"],
                                "description": "Schema.org type"
                              },
                              "url": {
                                "type": "string",
                                "description": "Logo URL"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Publisher logo"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Article publisher"
                      },
                      "mainEntityOfPage": {
                        "type": "string",
                        "description": "Article's canonical URL"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org Article structured data",
                    "title": "Article Schema"
                  },
                  "breadcrumb": {
                    "type": "object",
                    "required": ["@context", "@type", "itemListElement"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["BreadcrumbList"],
                        "description": "Schema.org type"
                      },
                      "itemListElement": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["@type", "position", "name"],
                          "properties": {
                            "@type": {
                              "type": "string",
                              "enum": ["ListItem"],
                              "description": "Schema.org type"
                            },
                            "position": {
                              "$ref": "#/$defs/Int",
                              "description": "Item position in breadcrumb trail",
                              "title": "greaterThanOrEqualTo(1)",
                              "minimum": 1
                            },
                            "name": {
                              "type": "string",
                              "description": "Breadcrumb label"
                            },
                            "item": {
                              "type": "string",
                              "description": "URL to the breadcrumb page"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Breadcrumb list item"
                        },
                        "description": "Array of breadcrumb items"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org BreadcrumbList structured data",
                    "title": "Breadcrumb Schema"
                  },
                  "faqPage": {
                    "type": "object",
                    "required": ["@context", "@type", "mainEntity"],
                    "properties": {
                      "@context": {
                        "type": "string",
                        "enum": ["https://schema.org"],
                        "description": "Schema.org context"
                      },
                      "@type": {
                        "type": "string",
                        "enum": ["FAQPage"],
                        "description": "Schema.org type"
                      },
                      "mainEntity": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["@type", "name", "acceptedAnswer"],
                          "properties": {
                            "@type": {
                              "type": "string",
                              "enum": ["Question"],
                              "description": "Schema.org Question type"
                            },
                            "name": {
                              "type": "string",
                              "description": "The question text"
                            },
                            "acceptedAnswer": {
                              "type": "object",
                              "required": ["@type", "text"],
                              "properties": {
                                "@type": {
                                  "type": "string",
                                  "enum": ["Answer"],
                                  "description": "Schema.org Answer type"
                                },
                                "text": {
                                  "type": "string",
                                  "description": "The answer text"
                                }
                              },
                              "additionalProperties": false,
                              "description": "FAQ answer"
                            }
                          },
                          "additionalProperties": false,
                          "description": "FAQ question"
                        },
                        "description": "Array of questions and answers"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org FAQPage structured data",
                    "title": "FAQ Page Schema"
                  },
                  "educationEvent": {
                    "type": "object",
                    "required": ["@type", "name", "startDate"],
                    "properties": {
                      "@type": {
                        "type": "string",
                        "enum": ["EducationEvent"],
                        "description": "Schema.org type"
                      },
                      "name": { "type": "string", "description": "Event name" },
                      "description": {
                        "type": "string",
                        "description": "Event description"
                      },
                      "startDate": {
                        "type": "string",
                        "description": "Event start date/time (ISO 8601)"
                      },
                      "endDate": {
                        "type": "string",
                        "description": "Event end date/time (ISO 8601)"
                      },
                      "eventAttendanceMode": {
                        "type": "string",
                        "enum": [
                          "https://schema.org/OfflineEventAttendanceMode",
                          "https://schema.org/OnlineEventAttendanceMode",
                          "https://schema.org/MixedEventAttendanceMode"
                        ],
                        "description": "Event attendance mode"
                      },
                      "eventStatus": {
                        "type": "string",
                        "enum": [
                          "https://schema.org/EventScheduled",
                          "https://schema.org/EventCancelled",
                          "https://schema.org/EventPostponed",
                          "https://schema.org/EventRescheduled"
                        ],
                        "description": "Event status"
                      },
                      "location": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Place"],
                            "description": "Schema.org type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Venue name"
                          },
                          "address": {
                            "type": "object",
                            "required": ["@type"],
                            "properties": {
                              "@type": {
                                "type": "string",
                                "enum": ["PostalAddress"],
                                "description": "Schema.org type"
                              },
                              "streetAddress": {
                                "type": "string",
                                "description": "Street address"
                              },
                              "addressLocality": {
                                "type": "string",
                                "description": "City or locality"
                              },
                              "addressRegion": {
                                "type": "string",
                                "description": "State or region"
                              },
                              "postalCode": {
                                "type": "string",
                                "description": "Postal or ZIP code"
                              },
                              "addressCountry": {
                                "type": "string",
                                "description": "ISO 3166-1 alpha-2 country code",
                                "examples": ["US", "FR", "GB", "DE"],
                                "pattern": "^[A-Z]{2}$"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Schema.org PostalAddress structured data",
                            "title": "Postal Address"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Event location"
                      },
                      "organizer": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Organization", "Person"],
                            "description": "Organizer type"
                          },
                          "name": {
                            "type": "string",
                            "description": "Organizer name"
                          },
                          "url": {
                            "type": "string",
                            "description": "Organizer URL"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Event organizer"
                      },
                      "offers": {
                        "type": "object",
                        "required": ["@type"],
                        "properties": {
                          "@type": {
                            "type": "string",
                            "enum": ["Offer"],
                            "description": "Schema.org type"
                          },
                          "price": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" }
                            ],
                            "description": "Ticket price"
                          },
                          "priceCurrency": {
                            "type": "string",
                            "description": "ISO 4217 currency code",
                            "examples": ["USD", "EUR", "GBP"],
                            "pattern": "^[A-Z]{3}$"
                          },
                          "availability": {
                            "type": "string",
                            "enum": [
                              "https://schema.org/InStock",
                              "https://schema.org/OutOfStock",
                              "https://schema.org/PreOrder",
                              "https://schema.org/SoldOut"
                            ],
                            "description": "Ticket availability status"
                          },
                          "url": {
                            "type": "string",
                            "description": "Ticket purchase URL"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Event ticket offer"
                      },
                      "maximumAttendeeCapacity": {
                        "$ref": "#/$defs/Int",
                        "description": "Maximum number of attendees",
                        "title": "greaterThanOrEqualTo(1)",
                        "minimum": 1
                      },
                      "minimumAttendeeCapacity": {
                        "$ref": "#/$defs/Int",
                        "description": "Minimum number of attendees",
                        "title": "greaterThanOrEqualTo(1)",
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false,
                    "description": "Schema.org EducationEvent structured data",
                    "title": "Education Event Schema"
                  }
                },
                "additionalProperties": false,
                "description": "Schema.org structured data for search engine understanding",
                "title": "Structured Data"
              },
              "preload": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["href", "as"],
                  "properties": {
                    "href": {
                      "type": "string",
                      "description": "Resource URL to preload"
                    },
                    "as": {
                      "type": "string",
                      "enum": [
                        "style",
                        "script",
                        "font",
                        "image",
                        "video",
                        "audio",
                        "document",
                        "fetch"
                      ],
                      "description": "Resource type hint"
                    },
                    "type": {
                      "type": "string",
                      "description": "MIME type for the resource"
                    },
                    "crossorigin": {
                      "anyOf": [
                        { "type": "boolean" },
                        {
                          "type": "string",
                          "enum": ["anonymous", "use-credentials"]
                        }
                      ],
                      "description": "CORS setting for the resource"
                    },
                    "media": {
                      "type": "string",
                      "description": "Media query for conditional loading"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Preload resource"
                },
                "description": "Preload critical resources for performance optimization",
                "title": "Resource Preloading"
              },
              "dnsPrefetch": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Domain to prefetch DNS for",
                  "pattern": "^https?:\\/\\/"
                },
                "description": "DNS prefetch hints for external domains",
                "title": "DNS Prefetch"
              },
              "analytics": {
                "type": "object",
                "required": ["providers"],
                "properties": {
                  "providers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["name"],
                      "properties": {
                        "name": {
                          "type": "string",
                          "enum": [
                            "google",
                            "plausible",
                            "matomo",
                            "fathom",
                            "posthog",
                            "mixpanel"
                          ],
                          "description": "Analytics provider name"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Whether this provider is enabled",
                          "default": true
                        },
                        "scripts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": ["src"],
                            "properties": {
                              "src": {
                                "type": "string",
                                "description": "Script source URL"
                              },
                              "async": {
                                "type": "boolean",
                                "description": "Load script asynchronously",
                                "default": true
                              },
                              "defer": {
                                "type": "boolean",
                                "description": "Defer script execution"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Analytics script"
                          }
                        },
                        "initScript": {
                          "type": "string",
                          "description": "Inline JavaScript to initialize the analytics"
                        },
                        "dnsPrefetch": {
                          "type": "string",
                          "description": "Domain to DNS prefetch for this provider"
                        },
                        "config": {
                          "type": "object",
                          "required": [],
                          "properties": {},
                          "additionalProperties": {
                            "$id": "/schemas/unknown",
                            "title": "unknown"
                          },
                          "description": "Provider-specific configuration"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Analytics provider"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Configuration for analytics providers",
                "title": "Analytics Configuration"
              },
              "customElements": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["type"],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["meta", "link", "script", "style", "base"],
                      "description": "HTML element type"
                    },
                    "attrs": {
                      "type": "object",
                      "required": [],
                      "properties": {},
                      "patternProperties": { "": { "type": "string" } },
                      "propertyNames": {
                        "type": "string",
                        "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9-]*$",
                        "pattern": "^[a-zA-Z][a-zA-Z0-9-]*$"
                      },
                      "description": "Element attributes"
                    },
                    "content": {
                      "type": "string",
                      "description": "Inner content for script or style elements"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Custom head element"
                },
                "description": "Additional custom elements to add to the page head",
                "title": "Custom Head Elements"
              }
            },
            "additionalProperties": false,
            "description": "Comprehensive page metadata including SEO, social media, structured data, performance, and analytics",
            "title": "Page Metadata"
          },
          "layout": {
            "type": "object",
            "required": [],
            "properties": {
              "banner": {
                "type": "object",
                "required": ["enabled"],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to show the banner",
                    "default": false
                  },
                  "text": {
                    "type": "string",
                    "description": "Banner text content"
                  },
                  "link": {
                    "type": "object",
                    "required": ["href", "label"],
                    "properties": {
                      "href": { "type": "string", "description": "Link URL" },
                      "label": { "type": "string", "description": "Link text" }
                    },
                    "additionalProperties": false,
                    "description": "Banner link"
                  },
                  "gradient": {
                    "type": "string",
                    "description": "CSS gradient background"
                  },
                  "backgroundColor": {
                    "type": "string",
                    "description": "Hex color code (#RRGGBB)",
                    "pattern": "^#[0-9A-Fa-f]{6}$"
                  },
                  "textColor": {
                    "type": "string",
                    "description": "Hex color code (#RRGGBB)",
                    "pattern": "^#[0-9A-Fa-f]{6}$"
                  },
                  "dismissible": {
                    "type": "boolean",
                    "description": "Whether users can dismiss the banner",
                    "default": false
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether the banner sticks to the top on scroll",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "description": "Top banner/announcement bar configuration",
                "title": "Banner Configuration"
              },
              "navigation": {
                "type": "object",
                "required": ["logo"],
                "properties": {
                  "logo": {
                    "type": "string",
                    "description": "Path to logo image"
                  },
                  "logoMobile": {
                    "type": "string",
                    "description": "Alternative logo for mobile devices"
                  },
                  "logoAlt": {
                    "type": "string",
                    "description": "Logo alt text for accessibility"
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether navigation sticks to top on scroll",
                    "default": false
                  },
                  "transparent": {
                    "type": "boolean",
                    "description": "Whether navigation has transparent background initially",
                    "default": false
                  },
                  "links": {
                    "type": "object",
                    "required": ["desktop"],
                    "properties": {
                      "desktop": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["label", "href"],
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "Link text"
                            },
                            "href": {
                              "type": "string",
                              "description": "Link destination (URL or anchor)"
                            },
                            "target": {
                              "type": "string",
                              "enum": ["_self", "_blank", "_parent", "_top"],
                              "description": "Link target"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Optional icon name"
                            },
                            "badge": {
                              "type": "string",
                              "description": "Optional badge text (e.g., 'New', 'Beta')"
                            },
                            "children": { "$ref": "#/$defs/NavLinks" }
                          },
                          "additionalProperties": false,
                          "description": "Navigation link item"
                        },
                        "description": "Array of navigation link items",
                        "title": "Navigation Links"
                      },
                      "mobile": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["label", "href"],
                          "properties": {
                            "label": {
                              "type": "string",
                              "description": "Link text"
                            },
                            "href": {
                              "type": "string",
                              "description": "Link destination (URL or anchor)"
                            },
                            "target": {
                              "type": "string",
                              "enum": ["_self", "_blank", "_parent", "_top"],
                              "description": "Link target"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Optional icon name"
                            },
                            "badge": {
                              "type": "string",
                              "description": "Optional badge text (e.g., 'New', 'Beta')"
                            },
                            "children": { "$ref": "#/$defs/NavLinks" }
                          },
                          "additionalProperties": false,
                          "description": "Navigation link item"
                        },
                        "description": "Array of navigation link items",
                        "title": "Navigation Links"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Navigation links for desktop and mobile"
                  },
                  "cta": {
                    "type": "object",
                    "required": ["text", "href"],
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "Button text"
                      },
                      "href": {
                        "type": "string",
                        "description": "Button link destination"
                      },
                      "variant": {
                        "type": "string",
                        "enum": [
                          "primary",
                          "secondary",
                          "outline",
                          "ghost",
                          "link"
                        ],
                        "description": "Button style variant"
                      },
                      "size": {
                        "type": "string",
                        "enum": ["sm", "md", "lg", "xl"],
                        "description": "Button size"
                      },
                      "color": {
                        "type": "string",
                        "description": "Button color (references theme colors)"
                      },
                      "icon": {
                        "type": "string",
                        "description": "Optional icon name"
                      },
                      "iconPosition": {
                        "type": "string",
                        "enum": ["left", "right"],
                        "description": "Icon position relative to text"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Call-to-action button configuration",
                    "title": "CTA Button"
                  },
                  "search": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether to show search input",
                        "default": false
                      },
                      "placeholder": {
                        "type": "string",
                        "description": "Search input placeholder",
                        "default": "Search..."
                      }
                    },
                    "additionalProperties": false,
                    "description": "Search configuration"
                  },
                  "user": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Show user account menu",
                        "default": false
                      },
                      "loginUrl": {
                        "type": "string",
                        "description": "Login page URL"
                      },
                      "signupUrl": {
                        "type": "string",
                        "description": "Signup page URL"
                      }
                    },
                    "additionalProperties": false,
                    "description": "User account menu"
                  }
                },
                "additionalProperties": false,
                "description": "Main navigation configuration including logo, links, and CTA",
                "title": "Navigation Configuration"
              },
              "footer": {
                "type": "object",
                "required": ["enabled"],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to show the footer",
                    "default": true
                  },
                  "logo": {
                    "type": "string",
                    "description": "Footer logo path"
                  },
                  "description": {
                    "type": "string",
                    "description": "Company description or tagline"
                  },
                  "columns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["title", "links"],
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "Column heading"
                        },
                        "links": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": ["label", "href"],
                            "properties": {
                              "label": { "type": "string" },
                              "href": { "type": "string" },
                              "target": {
                                "type": "string",
                                "enum": ["_self", "_blank"],
                                "description": "Footer link target"
                              }
                            },
                            "additionalProperties": false,
                            "description": "Footer link"
                          }
                        }
                      },
                      "additionalProperties": false,
                      "description": "Footer column"
                    }
                  },
                  "social": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Social section title",
                        "default": "Follow Us"
                      },
                      "links": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["platform", "url"],
                          "properties": {
                            "platform": {
                              "type": "string",
                              "enum": [
                                "facebook",
                                "twitter",
                                "instagram",
                                "linkedin",
                                "youtube",
                                "github",
                                "tiktok"
                              ],
                              "description": "Social media platform"
                            },
                            "url": {
                              "type": "string",
                              "description": "Social profile URL"
                            },
                            "icon": {
                              "type": "string",
                              "description": "Custom icon name if different from platform"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Social media link"
                        }
                      }
                    },
                    "additionalProperties": false,
                    "description": "Social media section"
                  },
                  "newsletter": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Whether to show newsletter form",
                        "default": false
                      },
                      "title": {
                        "type": "string",
                        "description": "Newsletter title",
                        "default": "Subscribe to our newsletter"
                      },
                      "description": {
                        "type": "string",
                        "description": "Newsletter description"
                      },
                      "placeholder": {
                        "type": "string",
                        "description": "Email input placeholder",
                        "default": "Enter your email"
                      },
                      "buttonText": {
                        "type": "string",
                        "description": "Submit button text",
                        "default": "Subscribe"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Newsletter subscription"
                  },
                  "copyright": {
                    "type": "string",
                    "description": "Copyright text"
                  },
                  "legal": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["label", "href"],
                      "properties": {
                        "label": { "type": "string" },
                        "href": { "type": "string" },
                        "target": {
                          "type": "string",
                          "enum": ["_self", "_blank"],
                          "description": "Footer link target"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Footer link"
                    }
                  }
                },
                "additionalProperties": false,
                "description": "Footer layout and content configuration",
                "title": "Footer Configuration"
              },
              "sidebar": {
                "type": "object",
                "required": ["enabled"],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether to show the sidebar",
                    "default": false
                  },
                  "position": {
                    "type": "string",
                    "enum": ["left", "right"],
                    "description": "Sidebar position"
                  },
                  "width": {
                    "type": "string",
                    "description": "Sidebar width",
                    "default": "256px"
                  },
                  "collapsible": {
                    "type": "boolean",
                    "description": "Whether sidebar can be collapsed",
                    "default": true
                  },
                  "defaultCollapsed": {
                    "type": "boolean",
                    "description": "Whether sidebar starts collapsed",
                    "default": false
                  },
                  "sticky": {
                    "type": "boolean",
                    "description": "Whether sidebar sticks on scroll",
                    "default": true
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["type"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": ["link", "group", "divider"],
                          "description": "Sidebar item type"
                        },
                        "label": {
                          "type": "string",
                          "description": "Item label"
                        },
                        "href": {
                          "type": "string",
                          "description": "Link destination"
                        },
                        "icon": {
                          "type": "string",
                          "description": "Item icon"
                        },
                        "children": { "$ref": "#/$defs/SidebarItems" }
                      },
                      "additionalProperties": false,
                      "description": "Sidebar item"
                    },
                    "description": "Sidebar items array"
                  }
                },
                "additionalProperties": false,
                "description": "Sidebar navigation and content configuration",
                "title": "Sidebar Configuration"
              }
            },
            "additionalProperties": false,
            "description": "Global layout configuration including banner, navigation, footer, and sidebar",
            "title": "Page Layout"
          },
          "sections": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "required": ["type"],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "section",
                        "container",
                        "flex",
                        "grid",
                        "card",
                        "text",
                        "heading",
                        "paragraph",
                        "icon",
                        "image",
                        "button",
                        "link",
                        "timeline",
                        "accordion",
                        "badge",
                        "customHTML",
                        "video",
                        "audio",
                        "iframe",
                        "form",
                        "input"
                      ],
                      "description": "Component type for page building"
                    },
                    "props": {
                      "type": "object",
                      "required": [],
                      "properties": {},
                      "patternProperties": {
                        "": {
                          "anyOf": [
                            {
                              "type": "string",
                              "description": "String value (may contain $variable references)"
                            },
                            {
                              "type": "number",
                              "description": "Numeric value"
                            },
                            {
                              "type": "boolean",
                              "description": "Boolean value"
                            },
                            {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "additionalProperties": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Nested object value"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Array value"
                            }
                          ]
                        }
                      },
                      "propertyNames": {
                        "type": "string",
                        "description": "a string matching the pattern ^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$",
                        "pattern": "^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$"
                      },
                      "description": "Generic properties object for components, supporting both static values and variable references",
                      "title": "Component Props"
                    },
                    "children": { "$ref": "#/$defs/Sections" },
                    "content": {
                      "type": "string",
                      "description": "Text content for text components"
                    },
                    "interactions": {
                      "type": "object",
                      "required": [],
                      "properties": {
                        "hover": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "transform": {
                              "type": "string",
                              "description": "CSS transform (scale, rotate, translate)",
                              "examples": [
                                "scale(1.05)",
                                "translateY(-4px)",
                                "rotate(5deg)"
                              ]
                            },
                            "opacity": {
                              "type": "number",
                              "description": "Opacity value (0-1)",
                              "title": "between(0, 1)",
                              "minimum": 0,
                              "maximum": 1
                            },
                            "backgroundColor": {
                              "type": "string",
                              "description": "Background color on hover"
                            },
                            "color": {
                              "type": "string",
                              "description": "Text color on hover"
                            },
                            "borderColor": {
                              "type": "string",
                              "description": "Border color on hover"
                            },
                            "shadow": {
                              "type": "string",
                              "description": "Box shadow on hover",
                              "examples": ["0 10px 25px rgba(0,0,0,0.1)"]
                            },
                            "duration": {
                              "type": "string",
                              "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            },
                            "easing": {
                              "type": "string",
                              "enum": [
                                "linear",
                                "ease",
                                "ease-in",
                                "ease-out",
                                "ease-in-out"
                              ],
                              "description": "Transition timing function"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Visual changes when user hovers over component",
                          "title": "Hover Interaction"
                        },
                        "click": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "animation": {
                              "type": "string",
                              "enum": [
                                "pulse",
                                "bounce",
                                "shake",
                                "flash",
                                "ripple",
                                "none"
                              ],
                              "description": "Animation to trigger on click"
                            },
                            "navigate": {
                              "type": "string",
                              "description": "Path to navigate to",
                              "examples": [
                                "/contact",
                                "/pricing",
                                "#section-id"
                              ]
                            },
                            "openUrl": {
                              "type": "string",
                              "description": "External URL to open"
                            },
                            "openInNewTab": { "type": "boolean" },
                            "scrollTo": {
                              "type": "string",
                              "description": "a string matching the pattern ^#[a-zA-Z][a-zA-Z0-9-]*$",
                              "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                            },
                            "toggleElement": {
                              "type": "string",
                              "description": "Element ID to show/hide",
                              "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                            },
                            "submitForm": {
                              "type": "string",
                              "description": "Form ID to submit",
                              "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Actions triggered when component is clicked",
                          "title": "Click Interaction"
                        },
                        "scroll": {
                          "type": "object",
                          "required": ["animation"],
                          "properties": {
                            "animation": {
                              "type": "string",
                              "enum": [
                                "fadeIn",
                                "fadeInUp",
                                "fadeInDown",
                                "fadeInLeft",
                                "fadeInRight",
                                "zoomIn",
                                "slideInUp",
                                "slideInDown"
                              ],
                              "description": "Animation type triggered on scroll"
                            },
                            "threshold": {
                              "type": "number",
                              "description": "Percentage of element visible before triggering (0-1)",
                              "title": "between(0, 1)",
                              "minimum": 0,
                              "maximum": 1
                            },
                            "delay": {
                              "type": "string",
                              "description": "Delay before animation starts",
                              "examples": ["0ms", "100ms", "0.5s"],
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            },
                            "duration": {
                              "type": "string",
                              "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            },
                            "once": {
                              "type": "boolean",
                              "description": "Trigger animation only once"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Animations triggered when component enters viewport",
                          "title": "Scroll Interaction"
                        },
                        "entrance": {
                          "type": "object",
                          "required": ["animation"],
                          "properties": {
                            "animation": {
                              "type": "string",
                              "enum": [
                                "fadeIn",
                                "fadeInUp",
                                "fadeInDown",
                                "zoomIn",
                                "slideInUp",
                                "slideInDown"
                              ],
                              "description": "Animation type for page load"
                            },
                            "delay": {
                              "type": "string",
                              "description": "Delay before animation starts",
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            },
                            "duration": {
                              "type": "string",
                              "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            },
                            "stagger": {
                              "type": "string",
                              "description": "Delay between sibling animations",
                              "examples": ["50ms", "100ms"],
                              "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Animation played when page loads",
                          "title": "Entrance Animation"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Interactive behaviors triggered by user actions or page events",
                      "title": "Component Interactions"
                    },
                    "responsive": {
                      "type": "object",
                      "required": [],
                      "properties": {
                        "mobile": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        },
                        "sm": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        },
                        "md": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        },
                        "lg": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        },
                        "xl": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        },
                        "2xl": {
                          "type": "object",
                          "required": [],
                          "properties": {
                            "props": {
                              "type": "object",
                              "required": [],
                              "properties": {},
                              "patternProperties": {
                                "": {
                                  "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" },
                                    { "type": "boolean" },
                                    {
                                      "type": "object",
                                      "required": [],
                                      "properties": {},
                                      "additionalProperties": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "$id": "/schemas/unknown",
                                        "title": "unknown"
                                      }
                                    }
                                  ]
                                }
                              },
                              "propertyNames": {
                                "type": "string",
                                "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                                "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                              },
                              "description": "Props to override"
                            },
                            "content": {
                              "type": "string",
                              "description": "Content to display at this breakpoint"
                            },
                            "visible": {
                              "type": "boolean",
                              "description": "Show/hide component at this breakpoint"
                            },
                            "children": {
                              "type": "array",
                              "items": {
                                "$id": "/schemas/unknown",
                                "title": "unknown"
                              },
                              "description": "Different children at this breakpoint"
                            }
                          },
                          "additionalProperties": false,
                          "description": "Component properties to override at this breakpoint"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Breakpoint-specific component overrides for responsive design",
                      "title": "Responsive Variants"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Direct component definition"
                },
                {
                  "type": "object",
                  "required": ["block"],
                  "properties": {
                    "block": {
                      "type": "string",
                      "description": "Name of the block to reference (kebab-case)",
                      "title": "Block Reference Name",
                      "examples": [
                        "icon-badge",
                        "section-header",
                        "call-to-action"
                      ],
                      "pattern": "^[a-z][a-z0-9-]*$"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Reference to a block by name without variable substitution",
                  "title": "Simple Block Reference"
                },
                {
                  "anyOf": [
                    {
                      "type": "object",
                      "required": ["$ref", "vars"],
                      "properties": {
                        "$ref": {
                          "type": "string",
                          "description": "Name of the block to reference (kebab-case)",
                          "title": "Block Reference Name",
                          "examples": [
                            "icon-badge",
                            "section-header",
                            "call-to-action"
                          ],
                          "pattern": "^[a-z][a-z0-9-]*$"
                        },
                        "vars": {
                          "type": "object",
                          "required": [],
                          "properties": {},
                          "patternProperties": {
                            "": {
                              "anyOf": [
                                { "type": "string" },
                                { "type": "number" },
                                { "type": "boolean" }
                              ]
                            }
                          },
                          "propertyNames": {
                            "type": "string",
                            "description": "Variable name (alphanumeric)",
                            "title": "Block Variable Key",
                            "examples": ["color", "icon", "text", "titleColor"],
                            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                          },
                          "description": "Variables to substitute in the block template",
                          "title": "Block Variables"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Reference to a reusable block template with variable substitution",
                      "title": "Block Reference (Full Syntax)"
                    },
                    {
                      "type": "object",
                      "required": ["block"],
                      "properties": {
                        "block": {
                          "type": "string",
                          "description": "Name of the block to reference (kebab-case)",
                          "title": "Block Reference Name",
                          "examples": [
                            "icon-badge",
                            "section-header",
                            "call-to-action"
                          ],
                          "pattern": "^[a-z][a-z0-9-]*$"
                        }
                      },
                      "additionalProperties": false,
                      "description": "Shorthand reference to a reusable block without variables",
                      "title": "Block Reference (Shorthand)"
                    }
                  ],
                  "description": "Reference to a reusable block template. Supports full syntax ($ref + vars) or shorthand (block name only).",
                  "title": "Block Reference"
                }
              ],
              "description": "A page section that can be either a component, simple block reference, or block reference with variables"
            },
            "description": "Array of page content sections",
            "title": "Page Sections"
          },
          "scripts": {
            "type": "object",
            "required": [],
            "properties": {
              "features": {
                "type": "object",
                "required": [],
                "properties": {},
                "patternProperties": {
                  "": {
                    "anyOf": [
                      {
                        "type": "boolean",
                        "description": "Simple feature flag"
                      },
                      {
                        "type": "object",
                        "required": [],
                        "properties": {
                          "enabled": {
                            "type": "boolean",
                            "description": "Whether the feature is enabled"
                          },
                          "config": {
                            "type": "object",
                            "required": [],
                            "properties": {},
                            "additionalProperties": {
                              "$id": "/schemas/unknown",
                              "title": "unknown"
                            },
                            "description": "Feature-specific configuration data"
                          }
                        },
                        "additionalProperties": false,
                        "description": "Feature configuration with enabled flag and custom config"
                      }
                    ],
                    "description": "Feature value - either a boolean flag or a configuration object"
                  }
                },
                "propertyNames": {
                  "type": "string",
                  "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                  "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                },
                "description": "Client-side feature toggles",
                "title": "Feature Flags"
              },
              "externalScripts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["src"],
                  "properties": {
                    "src": {
                      "type": "string",
                      "description": "Script source URL"
                    },
                    "async": {
                      "type": "boolean",
                      "description": "Load script asynchronously",
                      "default": false
                    },
                    "defer": {
                      "type": "boolean",
                      "description": "Defer script execution",
                      "default": false
                    },
                    "module": {
                      "type": "boolean",
                      "description": "Load as ES module",
                      "default": false
                    },
                    "integrity": {
                      "type": "string",
                      "description": "Subresource integrity hash"
                    },
                    "crossorigin": {
                      "type": "string",
                      "enum": ["anonymous", "use-credentials"],
                      "description": "CORS setting for cross-origin scripts"
                    },
                    "position": {
                      "type": "string",
                      "enum": ["head", "body-start", "body-end"],
                      "description": "Where to insert the script in the document"
                    }
                  },
                  "additionalProperties": false,
                  "description": "External JavaScript dependency"
                },
                "description": "External JavaScript dependencies",
                "title": "External Scripts"
              },
              "inlineScripts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["code"],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "JavaScript code to execute"
                    },
                    "position": {
                      "type": "string",
                      "enum": ["head", "body-start", "body-end"],
                      "description": "Where to insert the script in the document"
                    },
                    "async": {
                      "type": "boolean",
                      "description": "Wrap in async IIFE",
                      "default": false
                    }
                  },
                  "additionalProperties": false,
                  "description": "Inline JavaScript code snippet"
                },
                "description": "Inline JavaScript code snippets",
                "title": "Inline Scripts"
              },
              "config": {
                "type": "object",
                "required": [],
                "properties": {},
                "additionalProperties": {
                  "$id": "/schemas/unknown",
                  "title": "unknown"
                },
                "description": "Client-side configuration data"
              }
            },
            "additionalProperties": false,
            "description": "Client-side scripts, features, and external dependencies",
            "title": "Client Scripts Configuration"
          }
        },
        "additionalProperties": false
      },
      "description": "Marketing and content pages with server-side rendering support. Pages use a block-based layout system with reusable components for building landing pages, about pages, pricing pages, and other public-facing content. Supports comprehensive metadata, theming, and structured data for SEO optimization.",
      "title": "Pages",
      "minItems": 1
    },
    "NavLinks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["label", "href"],
        "properties": {
          "label": { "type": "string", "description": "Link text" },
          "href": {
            "type": "string",
            "description": "Link destination (URL or anchor)"
          },
          "target": {
            "type": "string",
            "enum": ["_self", "_blank", "_parent", "_top"],
            "description": "Link target"
          },
          "icon": { "type": "string", "description": "Optional icon name" },
          "badge": {
            "type": "string",
            "description": "Optional badge text (e.g., 'New', 'Beta')"
          },
          "children": { "$ref": "#/$defs/NavLinks" }
        },
        "additionalProperties": false,
        "description": "Navigation link item"
      },
      "description": "Array of navigation link items",
      "title": "Navigation Links"
    },
    "SidebarItems": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["link", "group", "divider"],
            "description": "Sidebar item type"
          },
          "label": { "type": "string", "description": "Item label" },
          "href": { "type": "string", "description": "Link destination" },
          "icon": { "type": "string", "description": "Item icon" },
          "children": { "$ref": "#/$defs/SidebarItems" }
        },
        "additionalProperties": false,
        "description": "Sidebar item"
      },
      "description": "Sidebar items array"
    },
    "Sections": {
      "type": "array",
      "items": {
        "anyOf": [
          {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "section",
                  "container",
                  "flex",
                  "grid",
                  "card",
                  "text",
                  "heading",
                  "paragraph",
                  "icon",
                  "image",
                  "button",
                  "link",
                  "timeline",
                  "accordion",
                  "badge",
                  "customHTML",
                  "video",
                  "audio",
                  "iframe",
                  "form",
                  "input"
                ],
                "description": "Component type for page building"
              },
              "props": {
                "type": "object",
                "required": [],
                "properties": {},
                "patternProperties": {
                  "": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "String value (may contain $variable references)"
                      },
                      { "type": "number", "description": "Numeric value" },
                      { "type": "boolean", "description": "Boolean value" },
                      {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "additionalProperties": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Nested object value"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Array value"
                      }
                    ]
                  }
                },
                "propertyNames": {
                  "type": "string",
                  "description": "a string matching the pattern ^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$",
                  "pattern": "^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$"
                },
                "description": "Generic properties object for components, supporting both static values and variable references",
                "title": "Component Props"
              },
              "children": { "$ref": "#/$defs/Sections" },
              "content": {
                "type": "string",
                "description": "Text content for text components"
              },
              "interactions": {
                "type": "object",
                "required": [],
                "properties": {
                  "hover": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "transform": {
                        "type": "string",
                        "description": "CSS transform (scale, rotate, translate)",
                        "examples": [
                          "scale(1.05)",
                          "translateY(-4px)",
                          "rotate(5deg)"
                        ]
                      },
                      "opacity": {
                        "type": "number",
                        "description": "Opacity value (0-1)",
                        "title": "between(0, 1)",
                        "minimum": 0,
                        "maximum": 1
                      },
                      "backgroundColor": {
                        "type": "string",
                        "description": "Background color on hover"
                      },
                      "color": {
                        "type": "string",
                        "description": "Text color on hover"
                      },
                      "borderColor": {
                        "type": "string",
                        "description": "Border color on hover"
                      },
                      "shadow": {
                        "type": "string",
                        "description": "Box shadow on hover",
                        "examples": ["0 10px 25px rgba(0,0,0,0.1)"]
                      },
                      "duration": {
                        "type": "string",
                        "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      },
                      "easing": {
                        "type": "string",
                        "enum": [
                          "linear",
                          "ease",
                          "ease-in",
                          "ease-out",
                          "ease-in-out"
                        ],
                        "description": "Transition timing function"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Visual changes when user hovers over component",
                    "title": "Hover Interaction"
                  },
                  "click": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "animation": {
                        "type": "string",
                        "enum": [
                          "pulse",
                          "bounce",
                          "shake",
                          "flash",
                          "ripple",
                          "none"
                        ],
                        "description": "Animation to trigger on click"
                      },
                      "navigate": {
                        "type": "string",
                        "description": "Path to navigate to",
                        "examples": ["/contact", "/pricing", "#section-id"]
                      },
                      "openUrl": {
                        "type": "string",
                        "description": "External URL to open"
                      },
                      "openInNewTab": { "type": "boolean" },
                      "scrollTo": {
                        "type": "string",
                        "description": "a string matching the pattern ^#[a-zA-Z][a-zA-Z0-9-]*$",
                        "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                      },
                      "toggleElement": {
                        "type": "string",
                        "description": "Element ID to show/hide",
                        "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                      },
                      "submitForm": {
                        "type": "string",
                        "description": "Form ID to submit",
                        "pattern": "^#[a-zA-Z][a-zA-Z0-9-]*$"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Actions triggered when component is clicked",
                    "title": "Click Interaction"
                  },
                  "scroll": {
                    "type": "object",
                    "required": ["animation"],
                    "properties": {
                      "animation": {
                        "type": "string",
                        "enum": [
                          "fadeIn",
                          "fadeInUp",
                          "fadeInDown",
                          "fadeInLeft",
                          "fadeInRight",
                          "zoomIn",
                          "slideInUp",
                          "slideInDown"
                        ],
                        "description": "Animation type triggered on scroll"
                      },
                      "threshold": {
                        "type": "number",
                        "description": "Percentage of element visible before triggering (0-1)",
                        "title": "between(0, 1)",
                        "minimum": 0,
                        "maximum": 1
                      },
                      "delay": {
                        "type": "string",
                        "description": "Delay before animation starts",
                        "examples": ["0ms", "100ms", "0.5s"],
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      },
                      "duration": {
                        "type": "string",
                        "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      },
                      "once": {
                        "type": "boolean",
                        "description": "Trigger animation only once"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Animations triggered when component enters viewport",
                    "title": "Scroll Interaction"
                  },
                  "entrance": {
                    "type": "object",
                    "required": ["animation"],
                    "properties": {
                      "animation": {
                        "type": "string",
                        "enum": [
                          "fadeIn",
                          "fadeInUp",
                          "fadeInDown",
                          "zoomIn",
                          "slideInUp",
                          "slideInDown"
                        ],
                        "description": "Animation type for page load"
                      },
                      "delay": {
                        "type": "string",
                        "description": "Delay before animation starts",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      },
                      "duration": {
                        "type": "string",
                        "description": "a string matching the pattern ^[0-9]+(\\.[0-9]+)?(ms|s)$",
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      },
                      "stagger": {
                        "type": "string",
                        "description": "Delay between sibling animations",
                        "examples": ["50ms", "100ms"],
                        "pattern": "^[0-9]+(\\.[0-9]+)?(ms|s)$"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Animation played when page loads",
                    "title": "Entrance Animation"
                  }
                },
                "additionalProperties": false,
                "description": "Interactive behaviors triggered by user actions or page events",
                "title": "Component Interactions"
              },
              "responsive": {
                "type": "object",
                "required": [],
                "properties": {
                  "mobile": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  },
                  "sm": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  },
                  "md": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  },
                  "lg": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  },
                  "xl": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  },
                  "2xl": {
                    "type": "object",
                    "required": [],
                    "properties": {
                      "props": {
                        "type": "object",
                        "required": [],
                        "properties": {},
                        "patternProperties": {
                          "": {
                            "anyOf": [
                              { "type": "string" },
                              { "type": "number" },
                              { "type": "boolean" },
                              {
                                "type": "object",
                                "required": [],
                                "properties": {},
                                "additionalProperties": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              },
                              {
                                "type": "array",
                                "items": {
                                  "$id": "/schemas/unknown",
                                  "title": "unknown"
                                }
                              }
                            ]
                          }
                        },
                        "propertyNames": {
                          "type": "string",
                          "description": "a string matching the pattern ^[a-zA-Z][a-zA-Z0-9]*$",
                          "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                        },
                        "description": "Props to override"
                      },
                      "content": {
                        "type": "string",
                        "description": "Content to display at this breakpoint"
                      },
                      "visible": {
                        "type": "boolean",
                        "description": "Show/hide component at this breakpoint"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "$id": "/schemas/unknown",
                          "title": "unknown"
                        },
                        "description": "Different children at this breakpoint"
                      }
                    },
                    "additionalProperties": false,
                    "description": "Component properties to override at this breakpoint"
                  }
                },
                "additionalProperties": false,
                "description": "Breakpoint-specific component overrides for responsive design",
                "title": "Responsive Variants"
              }
            },
            "additionalProperties": false,
            "description": "Direct component definition"
          },
          {
            "type": "object",
            "required": ["block"],
            "properties": {
              "block": {
                "type": "string",
                "description": "Name of the block to reference (kebab-case)",
                "title": "Block Reference Name",
                "examples": ["icon-badge", "section-header", "call-to-action"],
                "pattern": "^[a-z][a-z0-9-]*$"
              }
            },
            "additionalProperties": false,
            "description": "Reference to a block by name without variable substitution",
            "title": "Simple Block Reference"
          },
          {
            "anyOf": [
              {
                "type": "object",
                "required": ["$ref", "vars"],
                "properties": {
                  "$ref": {
                    "type": "string",
                    "description": "Name of the block to reference (kebab-case)",
                    "title": "Block Reference Name",
                    "examples": [
                      "icon-badge",
                      "section-header",
                      "call-to-action"
                    ],
                    "pattern": "^[a-z][a-z0-9-]*$"
                  },
                  "vars": {
                    "type": "object",
                    "required": [],
                    "properties": {},
                    "patternProperties": {
                      "": {
                        "anyOf": [
                          { "type": "string" },
                          { "type": "number" },
                          { "type": "boolean" }
                        ]
                      }
                    },
                    "propertyNames": {
                      "type": "string",
                      "description": "Variable name (alphanumeric)",
                      "title": "Block Variable Key",
                      "examples": ["color", "icon", "text", "titleColor"],
                      "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
                    },
                    "description": "Variables to substitute in the block template",
                    "title": "Block Variables"
                  }
                },
                "additionalProperties": false,
                "description": "Reference to a reusable block template with variable substitution",
                "title": "Block Reference (Full Syntax)"
              },
              {
                "type": "object",
                "required": ["block"],
                "properties": {
                  "block": {
                    "type": "string",
                    "description": "Name of the block to reference (kebab-case)",
                    "title": "Block Reference Name",
                    "examples": [
                      "icon-badge",
                      "section-header",
                      "call-to-action"
                    ],
                    "pattern": "^[a-z][a-z0-9-]*$"
                  }
                },
                "additionalProperties": false,
                "description": "Shorthand reference to a reusable block without variables",
                "title": "Block Reference (Shorthand)"
              }
            ],
            "description": "Reference to a reusable block template. Supports full syntax ($ref + vars) or shorthand (block name only).",
            "title": "Block Reference"
          }
        ],
        "description": "A page section that can be either a component, simple block reference, or block reference with variables"
      },
      "description": "Array of page content sections",
      "title": "Page Sections"
    }
  },
  "type": "object",
  "required": ["name"],
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the application (follows npm package naming conventions)",
      "title": "Application Name",
      "minLength": 1,
      "maxLength": 214,
      "examples": [
        "my-app",
        "todo-app",
        "@myorg/my-app",
        "blog-system",
        "dashboard-admin"
      ],
      "pattern": "^(?:@[a-z0-9-~][a-z0-9-._~]*\\/)?[a-z0-9-~][a-z0-9-._~]*$"
    },
    "version": {
      "type": "string",
      "description": "The version of the application following Semantic Versioning (SemVer) 2.0.0 specification",
      "title": "Application Version",
      "minLength": 5,
      "examples": [
        "1.0.0",
        "0.0.1",
        "1.2.3",
        "1.0.0-alpha",
        "1.0.0-beta.1",
        "2.0.0-rc.1",
        "1.0.0+build.123",
        "1.0.0-alpha+001"
      ],
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "description": {
      "type": "string",
      "description": "A single-line description of the application (line breaks not allowed)",
      "title": "Application Description",
      "examples": [
        "A simple application",
        "My app - with special characters!@#$%",
        "Très bien! 你好 🎉",
        "Full-featured e-commerce platform with cart, checkout & payment processing"
      ],
      "pattern": "^[^\\r\\n]*$"
    },
    "tables": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "name", "fields"],
        "properties": {
          "id": {
            "$ref": "#/$defs/Int",
            "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
            "title": "ID",
            "minimum": 1,
            "examples": [1, 2, 3, 100, 1000],
            "maximum": 9007199254740991
          },
          "name": {
            "type": "string",
            "description": "Internal identifier name used for database tables, columns, and programmatic references. Must follow database naming conventions: start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters (PostgreSQL limit). This name is used in SQL queries, API endpoints, and code generation. Choose descriptive names that clearly indicate the purpose (e.g., \"email_address\" not \"ea\").",
            "title": "Name",
            "minLength": 1,
            "maxLength": 63,
            "examples": [
              "user",
              "product",
              "order_item",
              "customer_email",
              "shipping_address",
              "created_at"
            ],
            "pattern": "^[a-z][a-z0-9_]*$"
          },
          "fields": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["single-line-text"],
                      "description": "Constant value 'single-line-text' for type discrimination in discriminated unions"
                    },
                    "default": {
                      "type": "string",
                      "description": "Default value for this field when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Short text input limited to a single line. Ideal for names, titles, labels, and brief identifiers. Text is stored as-is without formatting.",
                  "title": "Single Line Text Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "title",
                      "required": true,
                      "unique": false,
                      "indexed": true,
                      "type": "single-line-text",
                      "default": "Untitled"
                    },
                    {
                      "id": 2,
                      "name": "first_name",
                      "required": true,
                      "type": "single-line-text"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["long-text"],
                      "description": "Constant value 'long-text' for type discrimination in discriminated unions"
                    },
                    "default": {
                      "type": "string",
                      "description": "Default value for this field when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Multi-line text input for paragraphs, descriptions, notes, and comments. Supports line breaks and longer content without rich formatting.",
                  "title": "Long Text Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "description",
                      "required": true,
                      "indexed": false,
                      "type": "long-text",
                      "default": "Enter description here..."
                    },
                    {
                      "id": 2,
                      "name": "notes",
                      "required": false,
                      "type": "long-text"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["phone-number"],
                      "description": "Constant value 'phone-number' for type discrimination in discriminated unions"
                    },
                    "default": {
                      "type": "string",
                      "description": "Default phone number value when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Text field for storing phone numbers with support for international formats. Numbers are stored as plain text without automatic formatting.",
                  "title": "Phone Number Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "mobile_phone",
                      "required": true,
                      "unique": true,
                      "indexed": true,
                      "type": "phone-number"
                    },
                    {
                      "id": 2,
                      "name": "office_phone",
                      "required": false,
                      "type": "phone-number",
                      "default": "+1 (555) 000-0000"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["email"],
                      "description": "Constant value 'email' for type discrimination in discriminated unions"
                    },
                    "default": {
                      "type": "string",
                      "description": "Default email address when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Text field with email format validation (RFC 5322). Validates email addresses and prevents invalid formats from being stored.",
                  "title": "Email Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "email",
                      "required": true,
                      "unique": true,
                      "indexed": true,
                      "type": "email"
                    },
                    {
                      "id": 2,
                      "name": "contact_email",
                      "required": false,
                      "type": "email",
                      "default": "contact@example.com"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["url"],
                      "description": "Constant value 'url' for type discrimination in discriminated unions"
                    },
                    "default": {
                      "type": "string",
                      "description": "Default URL value when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Text field with URL format validation. Validates web addresses and supports multiple protocols (http://, https://, ftp://, etc.).",
                  "title": "URL Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "website",
                      "required": true,
                      "unique": false,
                      "indexed": true,
                      "type": "url"
                    },
                    {
                      "id": 2,
                      "name": "profile_url",
                      "required": false,
                      "type": "url",
                      "default": "https://example.com/profile"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["integer"],
                      "description": "Constant value 'integer' for type discrimination in discriminated unions"
                    },
                    "min": {
                      "type": "number",
                      "description": "Minimum allowed value (inclusive)"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum allowed value (inclusive)"
                    },
                    "default": {
                      "type": "integer",
                      "description": "Default integer value when creating new records",
                      "title": "int"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Numeric field for whole numbers without decimal places. Supports min/max range validation and is optimized for performance.",
                  "title": "Integer Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "quantity",
                      "required": true,
                      "type": "integer",
                      "min": 0,
                      "max": 1000,
                      "default": 1
                    },
                    {
                      "id": 2,
                      "name": "age",
                      "required": false,
                      "type": "integer",
                      "min": 0,
                      "max": 150
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["decimal"],
                      "description": "Constant value 'decimal' for type discrimination in discriminated unions"
                    },
                    "precision": {
                      "$ref": "#/$defs/Int",
                      "description": "Number of decimal places (0-10)",
                      "title": "lessThanOrEqualTo(10)",
                      "minimum": 0,
                      "maximum": 10
                    },
                    "min": {
                      "type": "number",
                      "description": "Minimum allowed value (inclusive)"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum allowed value (inclusive)"
                    },
                    "default": {
                      "type": "number",
                      "description": "Default decimal value when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Numeric field for numbers with decimal places. Supports configurable precision (0-10 decimal places) and min/max range validation. Uses exact DECIMAL storage.",
                  "title": "Decimal Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "weight",
                      "required": true,
                      "type": "decimal",
                      "precision": 2,
                      "min": 0.01,
                      "max": 999.99,
                      "default": 1
                    },
                    {
                      "id": 2,
                      "name": "tax_rate",
                      "required": true,
                      "type": "decimal",
                      "precision": 4,
                      "min": 0,
                      "max": 1,
                      "default": 0.0825
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "currency"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["currency"],
                      "description": "Constant value 'currency' for type discrimination in discriminated unions"
                    },
                    "currency": {
                      "type": "string",
                      "description": "ISO 4217 three-letter currency code (e.g., USD, EUR, GBP)",
                      "title": "length(3)",
                      "minLength": 3,
                      "maxLength": 3,
                      "examples": ["USD", "EUR", "GBP", "JPY", "CAD", "AUD"],
                      "pattern": "^[A-Z]{3}$"
                    },
                    "precision": {
                      "$ref": "#/$defs/Int",
                      "description": "Number of decimal places (0-10, default: 2 for most currencies)",
                      "title": "lessThanOrEqualTo(10)",
                      "minimum": 0,
                      "maximum": 10
                    },
                    "min": {
                      "type": "number",
                      "description": "Minimum allowed value (inclusive)"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum allowed value (inclusive)"
                    },
                    "default": {
                      "type": "number",
                      "description": "Default currency value when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Specialized numeric field for monetary values with currency codes (ISO 4217). Uses exact DECIMAL storage to prevent rounding errors in financial calculations.",
                  "title": "Currency Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "price",
                      "required": true,
                      "type": "currency",
                      "currency": "USD",
                      "precision": 2,
                      "min": 0,
                      "default": 0
                    },
                    {
                      "id": 2,
                      "name": "total_cost",
                      "required": true,
                      "type": "currency",
                      "currency": "EUR",
                      "precision": 2
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["percentage"],
                      "description": "Constant value 'percentage' for type discrimination in discriminated unions"
                    },
                    "precision": {
                      "$ref": "#/$defs/Int",
                      "description": "Number of decimal places (0-10, default: 0 for whole percentages)",
                      "title": "lessThanOrEqualTo(10)",
                      "minimum": 0,
                      "maximum": 10
                    },
                    "min": {
                      "type": "number",
                      "description": "Minimum allowed percentage value (inclusive, typically 0)"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum allowed percentage value (inclusive, typically 100)"
                    },
                    "default": {
                      "type": "number",
                      "description": "Default percentage value when creating new records"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Specialized numeric field for percentage values (0-100). Values automatically display with % symbol in UI. Supports configurable decimal precision.",
                  "title": "Percentage Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "discount_rate",
                      "required": true,
                      "type": "percentage",
                      "precision": 1,
                      "min": 0,
                      "max": 100,
                      "default": 10
                    },
                    {
                      "id": 2,
                      "name": "completion",
                      "required": true,
                      "type": "percentage",
                      "precision": 0,
                      "min": 0,
                      "max": 100,
                      "default": 0
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["date", "datetime", "time"]
                    },
                    "format": {
                      "type": "string",
                      "description": "Date format string",
                      "examples": ["YYYY-MM-DD", "MM/DD/YYYY", "DD-MM-YYYY"]
                    },
                    "includeTime": { "type": "boolean" },
                    "timezone": {
                      "type": "string",
                      "description": "Timezone for datetime fields",
                      "examples": ["UTC", "America/New_York", "Europe/London"]
                    },
                    "default": { "type": "string" }
                  },
                  "additionalProperties": false,
                  "description": "Stores date and optionally time values. Supports custom formats, timezones, and time inclusion.",
                  "title": "Date Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "due_date",
                      "required": true,
                      "type": "date",
                      "format": "YYYY-MM-DD",
                      "includeTime": false
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["checkbox"] },
                    "default": { "type": "boolean" }
                  },
                  "additionalProperties": false,
                  "description": "Boolean field for true/false values. Typically rendered as a checkbox in the UI.",
                  "title": "Checkbox Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "is_active",
                      "required": true,
                      "type": "checkbox",
                      "default": false
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "options"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["single-select"] },
                    "options": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "default": { "type": "string" }
                  },
                  "additionalProperties": false,
                  "description": "Allows selection of one option from predefined list. Used for categories or enumerated values.",
                  "title": "Single Select Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "category",
                      "type": "single-select",
                      "options": ["Electronics", "Clothing", "Food"],
                      "default": "Electronics"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "options"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["multi-select"] },
                    "options": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "maxSelections": {
                      "$ref": "#/$defs/Int",
                      "description": "Maximum number of selections allowed",
                      "title": "greaterThanOrEqualTo(1)",
                      "minimum": 1
                    },
                    "default": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  },
                  "additionalProperties": false,
                  "description": "Allows selection of multiple options from predefined list.",
                  "title": "Multi Select Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "tags",
                      "type": "multi-select",
                      "options": ["Urgent", "Important", "Review"],
                      "maxSelections": 3
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "type",
                    "relatedTable",
                    "relationType"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["relationship"] },
                    "relatedTable": {
                      "type": "string",
                      "description": "Name of the related table",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "relationType": {
                      "type": "string",
                      "description": "Type of relationship"
                    },
                    "displayField": {
                      "type": "string",
                      "description": "Field from related table to display in UI",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "onDelete": {
                      "type": "string",
                      "description": "Action to take when the related record is deleted"
                    },
                    "onUpdate": {
                      "type": "string",
                      "description": "Action to take when the related record's key is updated"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Links records to another table with referential integrity.",
                  "title": "Relationship Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "author",
                      "type": "relationship",
                      "relatedTable": "users",
                      "relationType": "many-to-one"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["single-attachment"] },
                    "storage": {
                      "type": "object",
                      "required": [],
                      "properties": {
                        "provider": {
                          "type": "string",
                          "description": "Storage provider"
                        },
                        "bucket": {
                          "type": "string",
                          "description": "S3 bucket name (required for s3 provider)"
                        },
                        "maxSize": {
                          "$ref": "#/$defs/Int",
                          "description": "Maximum file size in bytes",
                          "title": "greaterThanOrEqualTo(1)",
                          "minimum": 1
                        },
                        "allowedTypes": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores a single file attachment with storage configuration.",
                  "title": "Single Attachment Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "profile_pic",
                      "type": "single-attachment",
                      "storage": { "provider": "local", "maxSize": 5242880 }
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": {
                      "type": "string",
                      "enum": ["multiple-attachments"]
                    },
                    "maxFiles": {
                      "$ref": "#/$defs/Int",
                      "description": "Maximum number of files allowed",
                      "title": "greaterThanOrEqualTo(1)",
                      "minimum": 1
                    },
                    "storage": {
                      "type": "object",
                      "required": [],
                      "properties": {
                        "provider": {
                          "type": "string",
                          "description": "Storage provider"
                        },
                        "bucket": {
                          "type": "string",
                          "description": "S3 bucket name (required for s3 provider)"
                        },
                        "maxSize": {
                          "$ref": "#/$defs/Int",
                          "description": "Maximum file size in bytes per file",
                          "title": "greaterThanOrEqualTo(1)",
                          "minimum": 1
                        },
                        "allowedTypes": {
                          "type": "array",
                          "items": { "type": "string" }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores multiple file attachments with storage configuration.",
                  "title": "Multiple Attachments Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "documents",
                      "type": "multiple-attachments",
                      "maxFiles": 10
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "formula"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["formula"] },
                    "formula": {
                      "type": "string",
                      "description": "Formula expression to compute the value. Supports field references, operators, and functions.",
                      "title": "minLength(1)",
                      "examples": [
                        "price * quantity",
                        "CONCAT(first_name, ' ', last_name)",
                        "IF(status = 'active', 'Yes', 'No')",
                        "ROUND(total * 0.15, 2)"
                      ],
                      "minLength": 1
                    },
                    "resultType": {
                      "type": "string",
                      "description": "Expected data type of the formula result"
                    },
                    "format": {
                      "type": "string",
                      "description": "Display format for the result (e.g., currency, percentage)",
                      "examples": ["currency", "percentage", "decimal", "date"]
                    }
                  },
                  "additionalProperties": false,
                  "description": "Computed field that calculates values based on formula expressions.",
                  "title": "Formula Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "total_price",
                      "type": "formula",
                      "formula": "price * quantity",
                      "resultType": "number"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "type",
                    "relationshipField",
                    "relatedField",
                    "aggregation"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["rollup"] },
                    "relationshipField": {
                      "type": "string",
                      "description": "Name of the relationship field to aggregate from",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "relatedField": {
                      "type": "string",
                      "description": "Name of the field in the related table to aggregate",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "aggregation": {
                      "type": "string",
                      "description": "Aggregation function to apply"
                    },
                    "format": {
                      "type": "string",
                      "description": "Display format for the result",
                      "examples": ["currency", "number", "percentage"]
                    }
                  },
                  "additionalProperties": false,
                  "description": "Aggregates values from related records using functions like SUM, AVG, COUNT.",
                  "title": "Rollup Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "total_sales",
                      "type": "rollup",
                      "relationshipField": "orders",
                      "relatedField": "amount",
                      "aggregation": "SUM"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "type",
                    "relationshipField",
                    "relatedField"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["lookup"] },
                    "relationshipField": {
                      "type": "string",
                      "description": "Name of the relationship field to lookup from",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "relatedField": {
                      "type": "string",
                      "description": "Name of the field in the related table to display",
                      "title": "minLength(1)",
                      "minLength": 1
                    }
                  },
                  "additionalProperties": false,
                  "description": "Displays values from related records without aggregation.",
                  "title": "Lookup Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "customer_email",
                      "type": "lookup",
                      "relationshipField": "customer",
                      "relatedField": "email"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["user"] },
                    "allowMultiple": { "type": "boolean" }
                  },
                  "additionalProperties": false,
                  "description": "Reference field linking to users from authentication system. Supports single or multiple user selection.",
                  "title": "User Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "assigned_to",
                      "required": true,
                      "type": "user",
                      "allowMultiple": false
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["created-at"] }
                  },
                  "additionalProperties": false,
                  "description": "Automatically captures the timestamp when a record is created. System-managed field that cannot be manually edited.",
                  "title": "Created At Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "created_at",
                      "indexed": true,
                      "type": "created-at"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["created-by"] }
                  },
                  "additionalProperties": false,
                  "description": "Automatically captures the user who created a record. System-managed field that stores user ID reference.",
                  "title": "Created By Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "created_by",
                      "indexed": true,
                      "type": "created-by"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["updated-at"] }
                  },
                  "additionalProperties": false,
                  "description": "Automatically updates the timestamp whenever a record is modified. System-managed field that updates on every change.",
                  "title": "Updated At Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "updated_at",
                      "indexed": true,
                      "type": "updated-at"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["updated-by"] }
                  },
                  "additionalProperties": false,
                  "description": "Automatically captures the user who last modified a record. System-managed field that stores user ID reference.",
                  "title": "Updated By Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "updated_by",
                      "indexed": true,
                      "type": "updated-by"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["rating"] },
                    "max": {
                      "$ref": "#/$defs/Int",
                      "description": "Maximum rating value",
                      "title": "lessThanOrEqualTo(10)",
                      "minimum": 1,
                      "maximum": 10
                    },
                    "style": {
                      "type": "string",
                      "description": "Visual style for the rating"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Allows rating values with configurable maximum. Typically rendered as stars or other indicators.",
                  "title": "Rating Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "product_rating",
                      "type": "rating",
                      "max": 5,
                      "style": "stars"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["duration"] },
                    "format": {
                      "type": "string",
                      "description": "Display format for the duration"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores time duration values. Used for tracking elapsed time or work hours with custom formats.",
                  "title": "Duration Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "work_hours",
                      "required": true,
                      "type": "duration",
                      "format": "h:mm"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["rich-text"] },
                    "maxLength": {
                      "$ref": "#/$defs/Int",
                      "description": "Maximum length in characters",
                      "title": "greaterThanOrEqualTo(1)",
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores formatted text with rich formatting support. Rendered with WYSIWYG editor in UI.",
                  "title": "Rich Text Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "article_content",
                      "required": true,
                      "type": "rich-text",
                      "maxLength": 10000
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "options"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["status"] },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["value"],
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "a string at least 1 character(s) long",
                            "title": "minLength(1)",
                            "minLength": 1
                          },
                          "color": {
                            "type": "string",
                            "description": "Hex color code for the status",
                            "pattern": "^#[0-9a-fA-F]{6}$"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "default": { "type": "string" }
                  },
                  "additionalProperties": false,
                  "description": "Status field with colored options for workflow states.",
                  "title": "Status Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "status",
                      "type": "status",
                      "options": [
                        { "value": "todo", "color": "#94A3B8" },
                        { "value": "in_progress", "color": "#3B82F6" }
                      ]
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type", "label", "action"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["button"] },
                    "label": {
                      "type": "string",
                      "description": "Button text label",
                      "title": "minLength(1)",
                      "minLength": 1
                    },
                    "action": {
                      "type": "string",
                      "description": "Type of action to trigger"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL to open (when action is 'url')"
                    },
                    "automation": {
                      "type": "string",
                      "description": "Automation name to trigger (when action is 'automation')"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Interactive button that triggers actions like opening URLs or running automations.",
                  "title": "Button Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "approve",
                      "type": "button",
                      "label": "Approve",
                      "action": "automation",
                      "automation": "approve_request"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["autonumber"] },
                    "prefix": {
                      "type": "string",
                      "description": "Optional prefix for the autonumber",
                      "examples": ["INV-", "ORD-", ""]
                    },
                    "startFrom": {
                      "$ref": "#/$defs/Int",
                      "description": "Starting number",
                      "title": "greaterThanOrEqualTo(1)",
                      "minimum": 1
                    },
                    "digits": {
                      "$ref": "#/$defs/Int",
                      "description": "Number of digits with zero padding",
                      "title": "lessThanOrEqualTo(10)",
                      "minimum": 1,
                      "maximum": 10
                    }
                  },
                  "additionalProperties": false,
                  "description": "Auto-incrementing number field with optional prefix and zero padding.",
                  "title": "Autonumber Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "invoice_number",
                      "type": "autonumber",
                      "prefix": "INV-",
                      "startFrom": 1000,
                      "digits": 5
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["barcode"] },
                    "format": {
                      "type": "string",
                      "description": "Barcode format"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores barcode values with various format support. Used for product identification and inventory.",
                  "title": "Barcode Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "product_barcode",
                      "required": true,
                      "type": "barcode",
                      "format": "EAN-13"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["color"] },
                    "default": {
                      "type": "string",
                      "description": "a string matching the pattern ^#[0-9a-fA-F]{6}$",
                      "pattern": "^#[0-9a-fA-F]{6}$"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores color values in hexadecimal format. Rendered with color picker in UI.",
                  "title": "Color Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "brand_color",
                      "required": true,
                      "type": "color",
                      "default": "#3B82F6"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["progress"] },
                    "color": {
                      "type": "string",
                      "description": "Color of the progress bar",
                      "pattern": "^#[0-9a-fA-F]{6}$"
                    }
                  },
                  "additionalProperties": false,
                  "description": "Displays percentage value as progress bar. Used for tracking completion status or goals.",
                  "title": "Progress Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "task_completion",
                      "required": true,
                      "type": "progress",
                      "color": "#10B981"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["geolocation"] }
                  },
                  "additionalProperties": false,
                  "description": "Stores geographic coordinates (latitude and longitude). Used for location-based features.",
                  "title": "Geolocation Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "office_location",
                      "required": true,
                      "type": "geolocation"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["json"] },
                    "schema": {
                      "$id": "/schemas/%7B%7D",
                      "anyOf": [{ "type": "object" }, { "type": "array" }]
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores structured JSON data with optional schema validation.",
                  "title": "JSON Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "metadata",
                      "required": false,
                      "type": "json"
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": ["id", "name", "type"],
                  "properties": {
                    "id": {
                      "$ref": "#/$defs/Int",
                      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
                      "title": "ID",
                      "minimum": 1,
                      "examples": [1, 2, 3, 100, 1000],
                      "maximum": 9007199254740991
                    },
                    "name": {
                      "type": "string",
                      "description": "Internal identifier name for database columns following PostgreSQL naming conventions. Must start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters.",
                      "title": "Field Name",
                      "minLength": 1,
                      "maxLength": 63,
                      "examples": [
                        "email",
                        "user_status",
                        "order_item",
                        "customer_email",
                        "created_at"
                      ],
                      "pattern": "^[a-z][a-z0-9_]*$"
                    },
                    "required": { "type": "boolean" },
                    "unique": { "type": "boolean" },
                    "indexed": { "type": "boolean" },
                    "type": { "type": "string", "enum": ["array"] },
                    "itemType": {
                      "type": "string",
                      "description": "Type of items in the array"
                    },
                    "maxItems": {
                      "$ref": "#/$defs/Int",
                      "description": "Maximum number of items allowed",
                      "title": "greaterThanOrEqualTo(1)",
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false,
                  "description": "Stores arrays of values with optional type and length constraints.",
                  "title": "Array Field",
                  "examples": [
                    {
                      "id": 1,
                      "name": "tags",
                      "type": "array",
                      "itemType": "string",
                      "maxItems": 10
                    }
                  ]
                }
              ]
            },
            "description": "Collection of all supported field types. Each field defines a column in the database table with specific validation and behavior.",
            "title": "Table Fields",
            "examples": [
              [
                { "id": 1, "name": "email", "required": true, "type": "email" },
                {
                  "id": 2,
                  "name": "age",
                  "type": "integer",
                  "min": 0,
                  "max": 150
                }
              ]
            ],
            "minItems": 1
          },
          "primaryKey": {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "description": "Primary key generation strategy. 'auto-increment' uses sequential integers (1, 2, 3...), 'uuid' generates random unique identifiers, 'composite' uses multiple fields together.",
                "title": "minLength(1)",
                "minLength": 1
              },
              "field": {
                "type": "string",
                "description": "Field name for single-column primary key. Only used with 'auto-increment' or 'uuid' type.",
                "examples": ["id", "user_id", "product_id"],
                "pattern": "^[a-z][a-z0-9_]*$"
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "a string at least 1 character(s) long",
                  "title": "minLength(1)",
                  "minLength": 1
                }
              }
            },
            "additionalProperties": false,
            "description": "Primary key configuration for the table. The primary key uniquely identifies each row and is automatically indexed.",
            "title": "Primary Key",
            "examples": [
              { "type": "auto-increment", "field": "id" },
              { "type": "uuid", "field": "id" },
              { "type": "composite", "fields": ["tenant_id", "user_id"] }
            ]
          },
          "uniqueConstraints": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "fields"],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the unique constraint. Use descriptive names like 'uq_tablename_field1_field2'",
                  "title": "minLength(1)",
                  "minLength": 1,
                  "examples": [
                    "uq_users_email_tenant",
                    "uq_products_sku_variant",
                    "uq_orders_number_year"
                  ],
                  "pattern": "^[a-z][a-z0-9_]*$"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "a string at least 1 character(s) long",
                    "title": "minLength(1)",
                    "minLength": 1
                  },
                  "description": "an array of at least 1 item(s)",
                  "title": "minItems(1)",
                  "minItems": 1
                }
              },
              "additionalProperties": false
            },
            "description": "Composite unique constraints ensure that combinations of multiple field values are unique across all rows. Use this when you need uniqueness across multiple fields (e.g., email + tenant_id must be unique together).",
            "title": "Unique Constraints",
            "examples": [
              [
                {
                  "name": "uq_user_email_tenant",
                  "fields": ["email", "tenant_id"]
                },
                {
                  "name": "uq_product_sku_variant",
                  "fields": ["sku", "variant_id"]
                }
              ]
            ]
          },
          "indexes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "fields"],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the index. Use descriptive names like 'idx_tablename_fieldname'",
                  "title": "minLength(1)",
                  "minLength": 1,
                  "examples": [
                    "idx_users_email",
                    "idx_products_sku",
                    "idx_orders_status"
                  ],
                  "pattern": "^[a-z][a-z0-9_]*$"
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "a string at least 1 character(s) long",
                    "title": "minLength(1)",
                    "minLength": 1
                  },
                  "description": "an array of at least 1 item(s)",
                  "title": "minItems(1)",
                  "minItems": 1
                },
                "unique": { "type": "boolean" }
              },
              "additionalProperties": false
            },
            "description": "Custom database indexes for query optimization. Indexes improve query performance by creating efficient lookup structures for specified fields.",
            "title": "Database Indexes",
            "examples": [
              [
                { "name": "idx_user_email", "fields": ["email"] },
                {
                  "name": "idx_user_created",
                  "fields": ["created_at"],
                  "unique": false
                }
              ]
            ]
          }
        },
        "additionalProperties": false,
        "description": "A database table that defines the structure of an entity in your application. Contains fields, constraints, and indexes to organize and validate data.",
        "title": "Table",
        "examples": [
          {
            "id": 1,
            "name": "users",
            "fields": [
              { "id": 1, "name": "email", "required": true, "type": "email" },
              {
                "id": 2,
                "name": "name",
                "required": true,
                "type": "single-line-text"
              }
            ]
          },
          {
            "id": 2,
            "name": "products",
            "fields": [
              {
                "id": 1,
                "name": "title",
                "required": true,
                "type": "single-line-text"
              },
              {
                "id": 2,
                "name": "price",
                "required": true,
                "type": "currency",
                "currency": "USD"
              },
              {
                "id": 3,
                "name": "description",
                "required": false,
                "type": "long-text"
              }
            ],
            "primaryKey": { "type": "composite", "fields": ["id"] }
          }
        ]
      },
      "description": "Collection of database tables that define the data structure of your application. Each table represents an entity (e.g., users, products, orders) with fields that define the schema. Tables support relationships, indexes, constraints, and various field types. Tables are the foundation of your application data model and determine what information can be stored and how it relates.",
      "title": "Data Tables",
      "examples": [
        [
          {
            "id": 1,
            "name": "users",
            "fields": [
              { "id": 1, "name": "email", "required": true, "type": "email" },
              {
                "id": 2,
                "name": "name",
                "required": true,
                "type": "single-line-text"
              }
            ]
          }
        ]
      ]
    },
    "theme": {
      "type": "object",
      "required": [],
      "properties": {
        "colors": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "string",
              "description": "Color value in hex, rgb, rgba, hsl, or hsla format",
              "title": "Color Value",
              "examples": [
                "#007bff",
                "#007bff80",
                "rgb(0, 123, 255)",
                "hsl(210, 100%, 50%)"
              ],
              "pattern": "^#[0-9A-Fa-f]{6}$|^#[0-9A-Fa-f]{8}$|^rgb\\(|^rgba\\(|^hsl\\(|^hsla\\("
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Color name in kebab-case format",
            "title": "Color Name",
            "examples": ["primary", "primary-hover", "gray-500", "text-muted"],
            "pattern": "^[a-z]+[a-z0-9]*(-[a-z0-9]+)*$"
          },
          "description": "Color design tokens with support for semantic naming and variants",
          "title": "Color Palette"
        },
        "fonts": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "object",
              "required": ["family"],
              "properties": {
                "family": {
                  "type": "string",
                  "description": "Primary font family name",
                  "title": "Font Family"
                },
                "fallback": {
                  "type": "string",
                  "description": "Fallback font stack",
                  "title": "Fallback Font Stack",
                  "examples": [
                    "system-ui, sans-serif",
                    "Georgia, serif",
                    "monospace"
                  ]
                },
                "weights": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "enum": [100, 200, 300, 400, 500, 600, 700, 800, 900],
                    "description": "Font weight value (100-900 in increments of 100)",
                    "title": "Font Weight"
                  },
                  "description": "Available font weights",
                  "title": "Font Weights",
                  "examples": [
                    [400, 700],
                    [300, 400, 500, 600, 700]
                  ]
                },
                "style": {
                  "type": "string",
                  "enum": ["normal", "italic", "oblique"],
                  "description": "Font style",
                  "title": "Font Style",
                  "default": "normal"
                },
                "size": {
                  "type": "string",
                  "description": "Default font size",
                  "title": "Font Size",
                  "examples": ["16px", "1rem", "14px"]
                },
                "lineHeight": {
                  "type": "string",
                  "description": "Default line height",
                  "title": "Line Height",
                  "examples": ["1.5", "1.75", "24px"]
                },
                "letterSpacing": {
                  "type": "string",
                  "description": "Letter spacing",
                  "title": "Letter Spacing",
                  "examples": ["0", "0.05em", "-0.01em"]
                },
                "transform": {
                  "type": "string",
                  "enum": ["none", "uppercase", "lowercase", "capitalize"],
                  "description": "Text transformation",
                  "title": "Text Transform"
                },
                "url": {
                  "type": "string",
                  "description": "Font file URL or Google Fonts URL",
                  "title": "Font URL",
                  "examples": [
                    "https://fonts.googleapis.com/css2?family=Inter",
                    "/fonts/bely-display.woff2"
                  ]
                }
              },
              "additionalProperties": false,
              "description": "Individual font configuration with family and optional properties",
              "title": "Font Configuration Item"
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Semantic font category name (alphabetic characters only)",
            "title": "Font Category Key",
            "examples": ["title", "body", "mono", "heading", "label"],
            "pattern": "^[a-zA-Z]+$"
          },
          "description": "Typography design tokens for font families and styles",
          "title": "Font Configuration"
        },
        "spacing": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "string",
              "description": "Spacing value (Tailwind classes or CSS values)",
              "title": "Spacing Value",
              "examples": [
                "py-16 sm:py-20",
                "max-w-7xl mx-auto px-4",
                "2rem",
                "16px"
              ]
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Semantic spacing name (alphanumeric)",
            "title": "Spacing Key",
            "examples": ["section", "container", "gap", "padding"],
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
          },
          "description": "Spacing design tokens for consistent layout",
          "title": "Spacing Configuration"
        },
        "animations": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "anyOf": [
                { "type": "boolean" },
                { "type": "string" },
                {
                  "type": "object",
                  "required": [],
                  "properties": {
                    "enabled": { "type": "boolean" },
                    "duration": { "type": "string" },
                    "easing": { "type": "string" },
                    "delay": { "type": "string" },
                    "keyframes": {
                      "type": "object",
                      "required": [],
                      "properties": {},
                      "additionalProperties": {
                        "$id": "/schemas/unknown",
                        "title": "unknown"
                      }
                    }
                  },
                  "additionalProperties": false,
                  "description": "Detailed animation configuration",
                  "title": "Animation Configuration Object"
                }
              ],
              "description": "Animation configuration (boolean, string, or object)",
              "title": "Animation Value"
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Animation name (alphanumeric)",
            "title": "Animation Key",
            "examples": ["fadeIn", "slideUp", "modalOpen"],
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$"
          },
          "description": "Animation and transition design tokens",
          "title": "Animation Configuration"
        },
        "breakpoints": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "string",
              "description": "Breakpoint value in pixels",
              "title": "Breakpoint Value",
              "examples": ["640px", "768px", "1024px", "1280px"],
              "pattern": "^[0-9]+px$"
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Breakpoint name (lowercase alphanumeric)",
            "title": "Breakpoint Key",
            "examples": ["sm", "md", "lg", "xl", "2xl"],
            "pattern": "^[a-z0-9]+$"
          },
          "description": "Responsive design breakpoints",
          "title": "Breakpoints"
        },
        "shadows": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "string",
              "description": "CSS box-shadow value",
              "title": "Shadow Value",
              "examples": [
                "0 1px 2px 0 rgb(0 0 0 / 0.05)",
                "0 4px 6px -1px rgb(0 0 0 / 0.1)",
                "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)"
              ]
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Semantic shadow name (kebab-case with numbers)",
            "title": "Shadow Key",
            "examples": ["sm", "md", "lg", "xl", "2xl", "inner", "none"],
            "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
          },
          "description": "Box shadow design tokens",
          "title": "Shadows"
        },
        "borderRadius": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "string",
              "description": "CSS border-radius value",
              "title": "Border Radius Value",
              "examples": ["0", "0.125rem", "0.5rem", "9999px"]
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "Semantic radius name (kebab-case with numbers)",
            "title": "Border Radius Key",
            "examples": ["none", "sm", "md", "lg", "2xl", "3xl", "full"],
            "pattern": "^[a-z0-9]+(-[a-z0-9]+)*$"
          },
          "description": "Border radius design tokens",
          "title": "Border Radius"
        }
      },
      "additionalProperties": false,
      "description": "Design tokens for colors, typography, spacing, and animations",
      "title": "Theme Configuration"
    },
    "languages": {
      "type": "object",
      "required": ["default", "supported"],
      "properties": {
        "default": {
          "type": "string",
          "description": "ISO 639-1 language code with optional region",
          "title": "Language Code",
          "examples": ["en-US", "fr-FR", "es-ES", "ar-SA"],
          "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
        },
        "supported": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["code", "label"],
            "properties": {
              "code": {
                "type": "string",
                "description": "Language code (ISO 639-1 with optional country)",
                "title": "Language Code",
                "examples": ["en-US", "fr-FR", "es-ES", "ar-SA"],
                "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
              },
              "label": {
                "type": "string",
                "description": "Human-readable language name",
                "title": "Language Label",
                "examples": ["English", "Français", "Español", "العربية"]
              },
              "direction": {
                "type": "string",
                "enum": ["ltr", "rtl"],
                "description": "Text direction (left-to-right or right-to-left)",
                "title": "Text Direction"
              },
              "flag": {
                "type": "string",
                "description": "Flag emoji or icon path",
                "title": "Language Flag",
                "examples": ["🇺🇸", "🇫🇷", "🇪🇸", "/flags/us.svg"]
              }
            },
            "additionalProperties": false,
            "description": "Configuration for a single supported language",
            "title": "Language Configuration"
          },
          "description": "List of supported languages",
          "title": "minItems(1)",
          "minItems": 1
        },
        "fallback": {
          "type": "string",
          "description": "ISO 639-1 language code with optional region",
          "title": "Language Code",
          "examples": ["en-US", "fr-FR", "es-ES", "ar-SA"],
          "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
        },
        "detectBrowser": { "type": "boolean" },
        "persistSelection": { "type": "boolean" },
        "translations": {
          "type": "object",
          "required": [],
          "properties": {},
          "patternProperties": {
            "": {
              "type": "object",
              "required": [],
              "properties": {},
              "patternProperties": { "": { "type": "string" } },
              "propertyNames": {
                "type": "string",
                "description": "Key for centralized translations dictionary",
                "title": "Translation Key",
                "examples": [
                  "common.save",
                  "nav.home",
                  "homepage.hero.title",
                  "errors.404"
                ],
                "pattern": "^[a-zA-Z0-9._-]+$"
              },
              "description": "Maps translation keys to localized strings for a single language",
              "title": "Translation Dictionary"
            }
          },
          "propertyNames": {
            "type": "string",
            "description": "ISO 639-1 language code with optional region",
            "title": "Language Code",
            "examples": ["en-US", "fr-FR", "es-ES", "ar-SA"],
            "pattern": "^[a-z]{2}(-[A-Z]{2})?$"
          },
          "description": "Translation dictionaries for all supported languages. Use $t:key syntax to reference translations.",
          "title": "Centralized Translations"
        }
      },
      "additionalProperties": false,
      "description": "Multi-language support configuration for the entire application",
      "title": "Languages Configuration"
    },
    "blocks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique block identifier in kebab-case",
            "title": "Block Name",
            "examples": [
              "icon-badge",
              "section-header",
              "feature-card",
              "cta-button-2"
            ],
            "pattern": "^[a-z][a-z0-9-]*$"
          },
          "type": {
            "type": "string",
            "description": "Component type",
            "examples": ["container", "flex", "grid", "card", "text", "button"]
          },
          "props": {
            "type": "object",
            "required": [],
            "properties": {},
            "patternProperties": {
              "": {
                "anyOf": [
                  { "type": "string" },
                  { "type": "number" },
                  { "type": "boolean" },
                  {
                    "type": "object",
                    "required": [],
                    "properties": {},
                    "additionalProperties": {
                      "$id": "/schemas/unknown",
                      "title": "unknown"
                    }
                  },
                  {
                    "type": "array",
                    "items": { "$id": "/schemas/unknown", "title": "unknown" }
                  }
                ]
              }
            },
            "propertyNames": {
              "type": "string",
              "description": "Valid JavaScript property name (camelCase) or HTML data-*/aria-* attribute (kebab-case)",
              "title": "Block Prop Key",
              "examples": [
                "className",
                "size",
                "enabled",
                "maxWidth",
                "data-testid",
                "aria-label"
              ],
              "pattern": "^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$"
            },
            "description": "Properties for block templates, supporting variable references",
            "title": "Block Props"
          },
          "children": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["type"],
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Component type identifier",
                  "title": "Component Type",
                  "examples": ["icon", "text", "div", "button"]
                },
                "props": {
                  "type": "object",
                  "required": [],
                  "properties": {},
                  "patternProperties": {
                    "": {
                      "anyOf": [
                        { "type": "string" },
                        { "type": "number" },
                        { "type": "boolean" },
                        {
                          "type": "object",
                          "required": [],
                          "properties": {},
                          "additionalProperties": {
                            "$id": "/schemas/unknown",
                            "title": "unknown"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$id": "/schemas/unknown",
                            "title": "unknown"
                          }
                        }
                      ]
                    }
                  },
                  "propertyNames": {
                    "type": "string",
                    "description": "Valid JavaScript property name (camelCase) or HTML data-*/aria-* attribute (kebab-case)",
                    "title": "Block Prop Key",
                    "examples": [
                      "className",
                      "size",
                      "enabled",
                      "maxWidth",
                      "data-testid",
                      "aria-label"
                    ],
                    "pattern": "^([a-zA-Z][a-zA-Z0-9]*|data-[a-z]+(-[a-z]+)*|aria-[a-z]+(-[a-z]+)*)$"
                  },
                  "description": "Properties for block templates, supporting variable references",
                  "title": "Block Props"
                },
                "children": { "$ref": "#/$defs/BlockChildren" },
                "content": {
                  "type": "string",
                  "description": "Text content (may contain $variable)",
                  "title": "Text Content",
                  "examples": ["$label", "$title", "Static text"]
                }
              },
              "additionalProperties": false,
              "description": "Component element in a block template",
              "title": "Block Child Element"
            },
            "description": "Child elements array for block templates",
            "title": "Block Children"
          },
          "content": {
            "type": "string",
            "description": "Text content (may contain $variable references)"
          }
        },
        "additionalProperties": false,
        "description": "A reusable UI component template with variable placeholders",
        "title": "Block Template"
      },
      "description": "Array of reusable UI component templates with variable substitution for use across pages",
      "title": "Reusable Blocks"
    },
    "pages": { "$ref": "#/$defs/Pages" }
  },
  "additionalProperties": false,
  "description": "Complete application configuration including name, version, description, and data tables. This is the root schema for Omnera applications.",
  "title": "Application Configuration",
  "examples": [
    {
      "name": "todo-app",
      "version": "1.0.0",
      "description": "A simple todo list application",
      "tables": [
        {
          "id": 1,
          "name": "tasks",
          "fields": [
            {
              "id": 1,
              "name": "title",
              "required": true,
              "type": "single-line-text"
            },
            {
              "id": 2,
              "name": "completed",
              "required": true,
              "type": "checkbox"
            }
          ]
        }
      ]
    },
    {
      "name": "@myorg/dashboard",
      "version": "2.0.0-beta.1",
      "description": "Admin dashboard for analytics and reporting"
    },
    { "name": "blog-system" }
  ]
}
