{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "sections.schema.json",
  "title": "Page Sections",
  "description": "Array of page content sections",
  "type": "array",
  "items": {
    "title": "Section",
    "description": "A page section that can be either a component or a block reference",
    "oneOf": [
      {
        "type": "object",
        "description": "Direct component definition",
        "properties": {
          "type": {
            "type": "string",
            "description": "Component type",
            "enum": [
              "section",
              "container",
              "flex",
              "grid",
              "card",
              "text",
              "icon",
              "image",
              "button",
              "link",
              "timeline",
              "accordion",
              "badge",
              "customHTML",
              "video",
              "audio",
              "iframe",
              "form",
              "input"
            ]
          },
          "props": {
            "$ref": "../common/props.schema.json"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/items"
            }
          },
          "content": {
            "type": "string",
            "description": "Text content for text components"
          },
          "interactions": {
            "$ref": "../common/interactions/interactions.schema.json",
            "description": "Interactive behaviors (hover, click, scroll, entrance)"
          },
          "responsive": {
            "$ref": "../common/responsive.schema.json",
            "description": "Breakpoint-specific overrides for responsive design"
          },
          "i18n": {
            "$ref": "../common/i18n.schema.json",
            "description": "Multi-language translations"
          }
        },
        "required": ["type"],
        "additionalProperties": false
      },
      {
        "$ref": "../../blocks/common/block-reference.schema.json"
      }
    ]
  },
  "examples": [
    [
      {
        "type": "section",
        "props": {
          "id": "hero",
          "className": "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100"
        },
        "children": [
          {
            "type": "container",
            "props": {
              "maxWidth": "max-w-7xl"
            },
            "children": [
              {
                "type": "text",
                "props": {
                  "level": "h1",
                  "className": "text-6xl font-bold"
                },
                "content": "Welcome to Our Platform"
              }
            ]
          }
        ]
      },
      {
        "$ref": "section-header",
        "vars": {
          "title": "Our Features",
          "subtitle": "Everything you need to succeed",
          "titleColor": "blue-600"
        }
      }
    ]
  ],
  "specs": [
    {
      "id": "APP-PAGES-SECTIONS-001",
      "given": "a sections array with direct component",
      "when": "section has type 'section' with props and children",
      "then": "it should render direct component definition",
      "x-validation": {
        "setup": {
          "sections": [
            {
              "type": "section",
              "props": {
                "id": "hero",
                "className": "min-h-screen bg-gradient"
              },
              "children": [
                {
                  "type": "text",
                  "content": "Welcome"
                }
              ]
            }
          ]
        },
        "assertions": [
          "Direct component definition (not block reference)",
          "type: 'section' with props and children",
          "No $ref - inline component structure",
          "Self-contained section definition"
        ]
      },
      "x-application": {
        "sections": [
          {
            "type": "section",
            "props": {
              "id": "hero",
              "className": "min-h-screen bg-gradient"
            },
            "children": [
              {
                "type": "text",
                "content": "Welcome"
              }
            ]
          }
        ],
        "expectedDOM": "<section data-testid=\"page-section\" id=\"hero\" class=\"min-h-screen bg-gradient\"><p data-testid=\"text-element\">Welcome</p></section>",
        "assertions": [
          "Component tree: section â†’ text",
          "Props applied: id='hero', className='min-h-screen bg-gradient'",
          "Text content rendered: 'Welcome'",
          "Direct component renders without block resolution"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-002",
      "given": "a section with 17 component types",
      "when": "type enum includes section, container, flex, grid, card, text, icon, image, button, link, timeline, accordion, badge, customHTML, video, audio, iframe, form, input",
      "then": "it should support all component types for page building",
      "x-validation": {
        "setup": {
          "componentTypes": [
            "section",
            "container",
            "flex",
            "grid",
            "card",
            "text",
            "icon",
            "image",
            "button",
            "link",
            "timeline",
            "accordion",
            "badge",
            "customHTML",
            "video",
            "audio",
            "iframe",
            "form",
            "input"
          ]
        },
        "assertions": [
          "17 component types supported",
          "Layout: section, container, flex, grid",
          "Content: text, icon, image, customHTML",
          "Interactive: button, link, accordion",
          "Grouping: card, badge, timeline",
          "Media: video, audio, iframe",
          "Forms: form, input",
          "Comprehensive page building toolkit"
        ]
      },
      "x-application": {
        "sections": [
          {
            "type": "section",
            "children": []
          },
          {
            "type": "container",
            "children": []
          },
          {
            "type": "flex",
            "children": []
          },
          {
            "type": "grid",
            "children": []
          },
          {
            "type": "card",
            "children": []
          },
          {
            "type": "text",
            "content": "Text"
          },
          {
            "type": "icon",
            "props": {
              "name": "star"
            }
          },
          {
            "type": "image",
            "props": {
              "src": "/image.jpg"
            }
          },
          {
            "type": "button",
            "content": "Click"
          },
          {
            "type": "link",
            "props": {
              "href": "/about"
            },
            "content": "About"
          },
          {
            "type": "timeline",
            "children": []
          },
          {
            "type": "accordion",
            "children": []
          },
          {
            "type": "badge",
            "content": "New"
          },
          {
            "type": "customHTML",
            "props": {
              "html": "<div>Custom</div>"
            }
          },
          {
            "type": "video",
            "props": {
              "src": "/video.mp4"
            }
          },
          {
            "type": "audio",
            "props": {
              "src": "/audio.mp3"
            }
          },
          {
            "type": "iframe",
            "props": {
              "src": "https://example.com"
            }
          },
          {
            "type": "form",
            "children": []
          },
          {
            "type": "input",
            "props": {
              "type": "text"
            }
          }
        ],
        "assertions": [
          "All 17 types render correctly",
          "Layout components: structure content",
          "Content components: display information",
          "Interactive components: user actions",
          "Media components: rich content",
          "Form components: user input",
          "Complete page building system"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-003",
      "given": "a section with props",
      "when": "props includes className, id, and other component properties",
      "then": "it should accept generic component properties via props.schema.json",
      "x-validation": {
        "setup": {
          "section": {
            "type": "section",
            "props": {
              "id": "hero-section",
              "className": "min-h-screen bg-gradient",
              "style": {
                "padding": "2rem"
              },
              "data-analytics": "hero"
            }
          }
        },
        "assertions": [
          "Props reference: props.schema.json",
          "Standard props: id, className, style",
          "Custom data attributes: data-analytics",
          "Generic component properties accepted"
        ]
      },
      "x-application": {
        "section": {
          "type": "section",
          "props": {
            "id": "hero-section",
            "className": "min-h-screen bg-gradient",
            "style": {
              "padding": "2rem"
            },
            "data-analytics": "hero"
          }
        },
        "expectedDOM": "<section data-testid=\"page-section\" id=\"hero-section\" class=\"min-h-screen bg-gradient\" style=\"padding: 2rem;\" data-analytics=\"hero\"></section>",
        "assertions": [
          "Props applied to DOM element",
          "id='hero-section' for anchor links",
          "className applied for styling",
          "style object converted to inline styles",
          "data-analytics for tracking",
          "All props from props.schema.json supported"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-004",
      "given": "a section with recursive children",
      "when": "children array contains nested sections",
      "then": "it should support unlimited nesting depth for component tree",
      "x-validation": {
        "setup": {
          "section": {
            "type": "section",
            "children": [
              {
                "type": "container",
                "children": [
                  {
                    "type": "flex",
                    "children": [
                      {
                        "type": "card",
                        "children": [
                          {
                            "type": "text",
                            "content": "Deeply nested"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "assertions": [
          "Recursive children schema: $ref: '#/items'",
          "Unlimited nesting depth",
          "Depth: section â†’ container â†’ flex â†’ card â†’ text (5 levels)",
          "Component tree structure",
          "No nesting limit enforced"
        ]
      },
      "x-application": {
        "section": {
          "type": "section",
          "children": [
            {
              "type": "container",
              "children": [
                {
                  "type": "flex",
                  "children": [
                    {
                      "type": "card",
                      "children": [
                        {
                          "type": "text",
                          "content": "Deeply nested"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "expectedDOM": "<section data-testid=\"page-section\"><div data-testid=\"container\"><div data-testid=\"flex\"><div data-testid=\"card\"><p data-testid=\"text-element\">Deeply nested</p></div></div></div></section>",
        "assertions": [
          "Component tree renders recursively",
          "5-level nesting: section â†’ container â†’ flex â†’ card â†’ text",
          "Each level renders its children",
          "Unlimited depth supported for complex layouts"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-005",
      "given": "a text component with content property",
      "when": "component type is 'text' with content 'Welcome to Our Platform'",
      "then": "it should render text content",
      "x-validation": {
        "setup": {
          "section": {
            "type": "text",
            "props": {
              "level": "h1",
              "className": "text-6xl font-bold"
            },
            "content": "Welcome to Our Platform"
          }
        },
        "assertions": [
          "content property for text components",
          "content: 'Welcome to Our Platform'",
          "props.level: 'h1' (heading level)",
          "Text-specific properties"
        ]
      },
      "x-application": {
        "section": {
          "type": "text",
          "props": {
            "level": "h1",
            "className": "text-6xl font-bold"
          },
          "content": "Welcome to Our Platform"
        },
        "expectedDOM": "<h1 data-testid=\"text-element\" class=\"text-6xl font-bold\">Welcome to Our Platform</h1>",
        "assertions": [
          "Text component renders as <h1>",
          "content property becomes text node",
          "props.level determines HTML tag (h1, h2, p)",
          "className applied for styling",
          "Text content: 'Welcome to Our Platform'"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-006",
      "given": "a section with interactions",
      "when": "interactions includes hover, click, scroll, entrance",
      "then": "it should apply interactive behaviors from interactions.schema.json",
      "x-validation": {
        "setup": {
          "section": {
            "type": "button",
            "content": "Click me",
            "interactions": {
              "hover": {
                "scale": 1.05
              },
              "click": {
                "action": "navigate",
                "url": "/contact"
              },
              "entrance": {
                "animation": "fade-in",
                "duration": "500ms"
              }
            }
          }
        },
        "assertions": [
          "interactions reference: interactions.schema.json",
          "hover: scale on mouse over",
          "click: navigation action",
          "entrance: fade-in animation",
          "Multiple interaction types combined"
        ]
      },
      "x-application": {
        "section": {
          "type": "button",
          "content": "Click me",
          "interactions": {
            "hover": {
              "scale": 1.05
            },
            "click": {
              "action": "navigate",
              "url": "/contact"
            },
            "entrance": {
              "animation": "fade-in",
              "duration": "500ms"
            }
          }
        },
        "expectedDOM": "<button data-testid=\"button\" class=\"interactive\" data-hover-scale=\"1.05\" data-click-action=\"navigate\" data-click-url=\"/contact\" data-entrance=\"fade-in\" data-entrance-duration=\"500ms\">Click me</button>",
        "userAction": "User hovers over button",
        "behavior": {
          "hover": "Button scales to 105% size",
          "click": "Navigate to /contact page",
          "entrance": "Button fades in over 500ms on page load"
        },
        "assertions": [
          "Interactions applied as data attributes",
          "Hover: CSS transform scale(1.05)",
          "Click: Navigate to /contact",
          "Entrance: Fade-in animation on mount",
          "Interactive behaviors enhance UX"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-007",
      "given": "a section with responsive overrides",
      "when": "responsive property defines breakpoint-specific changes",
      "then": "it should adapt component for different screen sizes",
      "x-validation": {
        "setup": {
          "section": {
            "type": "grid",
            "props": {
              "columns": 1
            },
            "responsive": {
              "md": {
                "props": {
                  "columns": 2
                }
              },
              "lg": {
                "props": {
                  "columns": 3
                }
              }
            }
          }
        },
        "assertions": [
          "responsive reference: responsive.schema.json",
          "Base: 1 column (mobile)",
          "md breakpoint: 2 columns (tablet)",
          "lg breakpoint: 3 columns (desktop)",
          "Progressive enhancement"
        ]
      },
      "x-application": {
        "section": {
          "type": "grid",
          "props": {
            "columns": 1
          },
          "responsive": {
            "md": {
              "props": {
                "columns": 2
              }
            },
            "lg": {
              "props": {
                "columns": 3
              }
            }
          }
        },
        "expectedDOM": "<div data-testid=\"grid\" class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3\"></div>",
        "behavior": {
          "mobile": "1 column layout (<768px)",
          "tablet": "2 column layout (768px+)",
          "desktop": "3 column layout (1024px+)"
        },
        "assertions": [
          "Base: 1 column for mobile",
          "md (768px+): 2 columns for tablet",
          "lg (1024px+): 3 columns for desktop",
          "Responsive design adapts to viewport",
          "Mobile-first progressive enhancement"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-008",
      "given": "a section with i18n translations",
      "when": "i18n property defines multi-language content",
      "then": "it should support translated component content",
      "x-validation": {
        "setup": {
          "section": {
            "type": "text",
            "content": "Welcome",
            "i18n": {
              "fr": {
                "content": "Bienvenue"
              },
              "es": {
                "content": "Bienvenido"
              }
            }
          }
        },
        "assertions": [
          "i18n reference: i18n.schema.json",
          "Default: 'Welcome' (en)",
          "fr translation: 'Bienvenue'",
          "es translation: 'Bienvenido'",
          "Multi-language support"
        ]
      },
      "x-application": {
        "section": {
          "type": "text",
          "content": "Welcome",
          "i18n": {
            "fr": {
              "content": "Bienvenue"
            },
            "es": {
              "content": "Bienvenido"
            }
          }
        },
        "expectedDOM": {
          "en": "<p data-testid=\"text-element\">Welcome</p>",
          "fr": "<p data-testid=\"text-element\" lang=\"fr\">Bienvenue</p>",
          "es": "<p data-testid=\"text-element\" lang=\"es\">Bienvenido</p>"
        },
        "assertions": [
          "Default language: 'Welcome' (en)",
          "French: 'Bienvenue' with lang='fr'",
          "Spanish: 'Bienvenido' with lang='es'",
          "Content switches based on active language",
          "i18n enables multi-language pages"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-009",
      "given": "a block reference in sections",
      "when": "section uses $ref with vars for variable substitution",
      "then": "it should reference and instantiate reusable block with variables",
      "x-validation": {
        "setup": {
          "block": {
            "id": "section-header",
            "structure": {
              "type": "section",
              "children": [
                {
                  "type": "text",
                  "props": {
                    "level": "h2"
                  },
                  "content": "$title"
                }
              ]
            }
          },
          "section": {
            "$ref": "section-header",
            "vars": {
              "title": "Our Features"
            }
          }
        },
        "assertions": [
          "Block reference: $ref + vars",
          "$ref: 'section-header' (block ID)",
          "vars: { title: 'Our Features' }",
          "Variable substitution: $title â†’ 'Our Features'",
          "Reusable block instantiation"
        ]
      },
      "x-application": {
        "block": {
          "id": "section-header",
          "structure": {
            "type": "section",
            "children": [
              {
                "type": "text",
                "props": {
                  "level": "h2"
                },
                "content": "$title"
              }
            ]
          }
        },
        "section": {
          "$ref": "section-header",
          "vars": {
            "title": "Our Features"
          }
        },
        "expectedDOM": "<section data-testid=\"page-section\"><h2 data-testid=\"text-element\">Our Features</h2></section>",
        "assertions": [
          "Block 'section-header' resolved",
          "Variable $title replaced with 'Our Features'",
          "Block structure instantiated with vars",
          "Reusable block reduces duplication",
          "Update block once, affects all references"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-010",
      "given": "sections with mixed direct components and block references",
      "when": "array contains both direct definitions and $ref blocks",
      "then": "it should support hybrid section composition",
      "x-validation": {
        "setup": {
          "sections": [
            {
              "type": "section",
              "props": {
                "id": "hero"
              },
              "children": [
                {
                  "type": "text",
                  "content": "Welcome"
                }
              ]
            },
            {
              "$ref": "cta-section",
              "vars": {
                "buttonLabel": "Get Started"
              }
            },
            {
              "type": "container",
              "children": [
                {
                  "type": "text",
                  "content": "Features"
                }
              ]
            }
          ]
        },
        "assertions": [
          "Mixed composition: direct + block references",
          "Section 1: Direct component (hero)",
          "Section 2: Block reference (cta-section)",
          "Section 3: Direct component (features)",
          "Hybrid approach: inline + reusable blocks"
        ]
      },
      "x-application": {
        "sections": [
          {
            "type": "section",
            "props": {
              "id": "hero"
            },
            "children": [
              {
                "type": "text",
                "content": "Welcome"
              }
            ]
          },
          {
            "$ref": "cta-section",
            "vars": {
              "buttonLabel": "Get Started"
            }
          },
          {
            "type": "container",
            "children": [
              {
                "type": "text",
                "content": "Features"
              }
            ]
          }
        ],
        "expectedDOM": "<main data-testid=\"page-main\"><section data-testid=\"page-section\" id=\"hero\"><p data-testid=\"text-element\">Welcome</p></section><section data-testid=\"cta-section\"><button data-testid=\"button\">Get Started</button></section><div data-testid=\"container\"><p data-testid=\"text-element\">Features</p></div></main>",
        "assertions": [
          "3 sections render in order",
          "Section 1: Direct hero section",
          "Section 2: CTA block with 'Get Started'",
          "Section 3: Direct features container",
          "Flexible composition: mix inline and reusable"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-011",
      "given": "a complex nested section tree",
      "when": "section â†’ container â†’ flex â†’ grid â†’ card â†’ text hierarchy",
      "then": "it should build complex layouts through component composition",
      "x-validation": {
        "setup": {
          "section": {
            "type": "section",
            "props": {
              "className": "py-20"
            },
            "children": [
              {
                "type": "container",
                "props": {
                  "maxWidth": "max-w-7xl"
                },
                "children": [
                  {
                    "type": "flex",
                    "props": {
                      "direction": "column",
                      "gap": "4"
                    },
                    "children": [
                      {
                        "type": "grid",
                        "props": {
                          "columns": 3
                        },
                        "children": [
                          {
                            "type": "card",
                            "children": [
                              {
                                "type": "text",
                                "props": {
                                  "level": "h3"
                                },
                                "content": "Feature 1"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "assertions": [
          "6-level nesting depth",
          "Hierarchy: section â†’ container â†’ flex â†’ grid â†’ card â†’ text",
          "Each level adds layout/structure",
          "Complex composition from simple primitives"
        ]
      },
      "x-application": {
        "section": {
          "type": "section",
          "props": {
            "className": "py-20"
          },
          "children": [
            {
              "type": "container",
              "props": {
                "maxWidth": "max-w-7xl"
              },
              "children": [
                {
                  "type": "flex",
                  "props": {
                    "direction": "column",
                    "gap": "4"
                  },
                  "children": [
                    {
                      "type": "grid",
                      "props": {
                        "columns": 3
                      },
                      "children": [
                        {
                          "type": "card",
                          "children": [
                            {
                              "type": "text",
                              "props": {
                                "level": "h3"
                              },
                              "content": "Feature 1"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "expectedDOM": "<section data-testid=\"page-section\" class=\"py-20\"><div data-testid=\"container\" class=\"max-w-7xl\"><div data-testid=\"flex\" class=\"flex flex-col gap-4\"><div data-testid=\"grid\" class=\"grid grid-cols-3\"><div data-testid=\"card\"><h3 data-testid=\"text-element\">Feature 1</h3></div></div></div></div></section>",
        "assertions": [
          "Section: page wrapper (py-20 padding)",
          "Container: max-width constraint (max-w-7xl)",
          "Flex: vertical layout (column, gap-4)",
          "Grid: 3-column layout",
          "Card: content wrapper",
          "Text: h3 heading 'Feature 1'",
          "Complex layout from component composition"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-012",
      "given": "a section with all 3 optional properties",
      "when": "section includes interactions, responsive, and i18n",
      "then": "it should combine interactive, responsive, and multi-language features",
      "x-validation": {
        "setup": {
          "section": {
            "type": "button",
            "content": "Click me",
            "props": {
              "className": "px-6 py-3"
            },
            "interactions": {
              "hover": {
                "scale": 1.05
              }
            },
            "responsive": {
              "md": {
                "props": {
                  "className": "px-8 py-4"
                }
              }
            },
            "i18n": {
              "fr": {
                "content": "Cliquez-moi"
              }
            }
          }
        },
        "assertions": [
          "All 3 optional properties combined",
          "interactions: hover scale",
          "responsive: larger padding on md+",
          "i18n: French translation",
          "Full-featured component"
        ]
      },
      "x-application": {
        "section": {
          "type": "button",
          "content": "Click me",
          "props": {
            "className": "px-6 py-3"
          },
          "interactions": {
            "hover": {
              "scale": 1.05
            }
          },
          "responsive": {
            "md": {
              "props": {
                "className": "px-8 py-4"
              }
            }
          },
          "i18n": {
            "fr": {
              "content": "Cliquez-moi"
            }
          }
        },
        "expectedDOM": {
          "en-mobile": "<button data-testid=\"button\" class=\"px-6 py-3\" data-hover-scale=\"1.05\">Click me</button>",
          "en-desktop": "<button data-testid=\"button\" class=\"px-8 py-4\" data-hover-scale=\"1.05\">Click me</button>",
          "fr-mobile": "<button data-testid=\"button\" class=\"px-6 py-3\" data-hover-scale=\"1.05\" lang=\"fr\">Cliquez-moi</button>",
          "fr-desktop": "<button data-testid=\"button\" class=\"px-8 py-4\" data-hover-scale=\"1.05\" lang=\"fr\">Cliquez-moi</button>"
        },
        "assertions": [
          "interactions: Scale 1.05 on hover (all sizes, all languages)",
          "responsive: px-6 py-3 (mobile), px-8 py-4 (md+)",
          "i18n: 'Click me' (en), 'Cliquez-moi' (fr)",
          "All features work together seamlessly",
          "Fully internationalized, responsive, interactive component"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-013",
      "given": "sections with form components",
      "when": "sections include form, input types for user input",
      "then": "it should support form building capabilities",
      "x-validation": {
        "setup": {
          "sections": [
            {
              "type": "form",
              "props": {
                "action": "/api/contact",
                "method": "POST"
              },
              "children": [
                {
                  "type": "input",
                  "props": {
                    "type": "text",
                    "name": "name",
                    "placeholder": "Your name",
                    "required": true
                  }
                },
                {
                  "type": "input",
                  "props": {
                    "type": "email",
                    "name": "email",
                    "placeholder": "Your email"
                  }
                },
                {
                  "type": "button",
                  "props": {
                    "type": "submit"
                  },
                  "content": "Submit"
                }
              ]
            }
          ]
        },
        "assertions": [
          "Form component types: form, input, button",
          "Form props: action, method",
          "Input types: text, email",
          "Validation: required attribute",
          "Form building capabilities"
        ]
      },
      "x-application": {
        "sections": [
          {
            "type": "form",
            "props": {
              "action": "/api/contact",
              "method": "POST"
            },
            "children": [
              {
                "type": "input",
                "props": {
                  "type": "text",
                  "name": "name",
                  "placeholder": "Your name",
                  "required": true
                }
              },
              {
                "type": "input",
                "props": {
                  "type": "email",
                  "name": "email",
                  "placeholder": "Your email"
                }
              },
              {
                "type": "button",
                "props": {
                  "type": "submit"
                },
                "content": "Submit"
              }
            ]
          }
        ],
        "expectedDOM": "<form data-testid=\"form\" action=\"/api/contact\" method=\"POST\"><input data-testid=\"input\" type=\"text\" name=\"name\" placeholder=\"Your name\" required /><input data-testid=\"input\" type=\"email\" name=\"email\" placeholder=\"Your email\" /><button data-testid=\"button\" type=\"submit\">Submit</button></form>",
        "userAction": "User fills form and clicks Submit",
        "behavior": {
          "validation": "Browser validates required name field and email format",
          "submission": "POST request to /api/contact with form data"
        },
        "assertions": [
          "Form: action='/api/contact', method='POST'",
          "Input 1: text, name='name', required",
          "Input 2: email, name='email'",
          "Button: submit type",
          "Form submission sends data to API",
          "Built-in validation (required, email format)"
        ]
      }
    },
    {
      "id": "APP-PAGES-SECTIONS-014",
      "given": "sections with media components",
      "when": "sections include image, video, audio, iframe types",
      "then": "it should support rich media content",
      "x-validation": {
        "setup": {
          "sections": [
            {
              "type": "image",
              "props": {
                "src": "/hero.jpg",
                "alt": "Hero image",
                "width": 1200,
                "height": 600
              }
            },
            {
              "type": "video",
              "props": {
                "src": "/demo.mp4",
                "controls": true,
                "autoplay": false
              }
            },
            {
              "type": "audio",
              "props": {
                "src": "/podcast.mp3",
                "controls": true
              }
            },
            {
              "type": "iframe",
              "props": {
                "src": "https://www.youtube.com/embed/dQw4w9WgXcQ",
                "width": 560,
                "height": 315
              }
            }
          ]
        },
        "assertions": [
          "Media component types: image, video, audio, iframe",
          "Image: src, alt, dimensions",
          "Video: src, controls, autoplay",
          "Audio: src, controls",
          "Iframe: embedded content (YouTube)",
          "Rich media support"
        ]
      },
      "x-application": {
        "sections": [
          {
            "type": "image",
            "props": {
              "src": "/hero.jpg",
              "alt": "Hero image",
              "width": 1200,
              "height": 600
            }
          },
          {
            "type": "video",
            "props": {
              "src": "/demo.mp4",
              "controls": true,
              "autoplay": false
            }
          },
          {
            "type": "audio",
            "props": {
              "src": "/podcast.mp3",
              "controls": true
            }
          },
          {
            "type": "iframe",
            "props": {
              "src": "https://www.youtube.com/embed/dQw4w9WgXcQ",
              "width": 560,
              "height": 315
            }
          }
        ],
        "expectedDOM": "<main data-testid=\"page-main\"><img data-testid=\"image\" src=\"/hero.jpg\" alt=\"Hero image\" width=\"1200\" height=\"600\" /><video data-testid=\"video\" src=\"/demo.mp4\" controls></video><audio data-testid=\"audio\" src=\"/podcast.mp3\" controls></audio><iframe data-testid=\"iframe\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" width=\"560\" height=\"315\"></iframe></main>",
        "assertions": [
          "Image: /hero.jpg with alt text (1200Ã—600)",
          "Video: /demo.mp4 with controls (no autoplay)",
          "Audio: /podcast.mp3 with player controls",
          "Iframe: YouTube embed (560Ã—315)",
          "All media types render correctly",
          "Rich content pages supported"
        ]
      }
    }
  ]
}
