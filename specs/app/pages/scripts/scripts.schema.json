{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "scripts.schema.json",
  "title": "Client Scripts Configuration",
  "description": "Client-side scripts, features, and external dependencies",
  "type": "object",
  "properties": {
    "features": {
      "$ref": "./features/features.schema.json"
    },
    "externalScripts": {
      "$ref": "./external-scripts/external-scripts.schema.json"
    },
    "inlineScripts": {
      "$ref": "./inline-scripts/inline-scripts.schema.json"
    },
    "config": {
      "type": "object",
      "description": "Client-side configuration data",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "features": {
        "darkMode": true,
        "animations": true,
        "analytics": false
      },
      "externalScripts": [
        {
          "src": "https://cdn.example.com/script.js",
          "async": true
        }
      ],
      "config": {
        "apiUrl": "https://api.example.com",
        "environment": "production"
      }
    }
  ],
  "x-specs": [
    {
      "id": "APP-PAGES-SCRIPTS-001",
      "given": "a scripts configuration with all 4 properties",
      "when": "scripts includes features, externalScripts, inlineScripts, config",
      "then": "it should orchestrate client-side script management",
      "validation": {
        "setup": "scripts: { features: { darkMode: true }, externalScripts: [{ src: 'https://cdn.example.com/lib.js', async: true }], inlineScripts: [{ content: 'console.log(\"ready\")' }], config: { apiUrl: 'https://api.example.com' } }",
        "assertions": [
          "scripts is object",
          "scripts.features exists (client feature toggles)",
          "scripts.externalScripts exists (CDN dependencies)",
          "scripts.inlineScripts exists (inline JS code)",
          "scripts.config exists (client configuration)"
        ]
      },
      "application": {
        "scripts": {
          "features": {
            "darkMode": true,
            "animations": true,
            "analytics": false
          },
          "externalScripts": [
            {
              "src": "https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js",
              "async": true,
              "defer": true
            }
          ],
          "inlineScripts": [
            {
              "content": "window.APP_CONFIG = { ready: true };"
            }
          ],
          "config": {
            "apiUrl": "https://api.example.com",
            "environment": "production",
            "version": "1.0.0"
          }
        },
        "expectedDOM": "<head><script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\" async defer></script><script>window.APP_CONFIG = { ready: true };</script></head>",
        "useCases": [
          "SPA initialization: Load framework (Alpine.js, htmx) + inline config",
          "Analytics: External script (Google Analytics) + inline tracking code",
          "Feature flags: Toggle features based on environment"
        ],
        "assertions": [
          "All 4 script types managed in single orchestrator",
          "External scripts loaded first (async/defer)",
          "Inline scripts execute after external scripts load",
          "Config object available as window.APP_CONFIG"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-002",
      "given": "scripts with features only",
      "when": "features defines darkMode, animations, analytics",
      "then": "it should enable client-side feature toggles",
      "validation": {
        "setup": "scripts: { features: { darkMode: true, animations: true, analytics: false } }",
        "assertions": [
          "scripts.features is object",
          "features.darkMode is boolean (toggle dark theme)",
          "features.animations is boolean (enable/disable animations)",
          "features.analytics is boolean (opt-in tracking)",
          "Other properties optional (externalScripts, inlineScripts, config)"
        ]
      },
      "application": {
        "scripts": {
          "features": {
            "darkMode": true,
            "animations": true,
            "analytics": false,
            "cookieConsent": true,
            "chatWidget": false
          }
        },
        "expectedDOM": "<html data-theme=\"dark\" data-animations=\"true\" data-analytics=\"false\"><body><!-- features control client behavior --></body></html>",
        "behavior": {
          "darkMode": "If true: add 'dark' class to <html>, localStorage 'theme': 'dark'",
          "animations": "If true: enable CSS transitions, if false: prefers-reduced-motion",
          "analytics": "If false: disable tracking scripts, respect privacy",
          "cookieConsent": "If true: show cookie banner before analytics",
          "chatWidget": "If false: hide chat widget (performance optimization)"
        },
        "useCases": [
          "GitHub: darkMode toggle, animations disabled for performance",
          "Vercel: analytics opt-out, cookieConsent for GDPR",
          "Linear: animations always on, chatWidget for support"
        ],
        "assertions": [
          "Features control client-side behavior without server changes",
          "Boolean flags stored in data-* attributes for CSS/JS access",
          "Feature state persisted in localStorage",
          "Supports privacy (analytics opt-out) and accessibility (animations off)"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-003",
      "given": "scripts with externalScripts",
      "when": "externalScripts array loads CDN libraries",
      "then": "it should include external JavaScript dependencies",
      "validation": {
        "setup": "scripts: { externalScripts: [{ src: 'https://cdn.example.com/script.js', async: true, defer: false }] }",
        "assertions": [
          "scripts.externalScripts is array",
          "Each item has 'src' (required URL)",
          "Each item has 'async' (optional boolean, default false)",
          "Each item has 'defer' (optional boolean, default false)",
          "src must start with https:// (security: no http://)"
        ]
      },
      "application": {
        "scripts": {
          "externalScripts": [
            {
              "src": "https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js",
              "async": true,
              "defer": true
            },
            {
              "src": "https://unpkg.com/htmx.org@1.9.10",
              "async": false,
              "defer": false
            },
            {
              "src": "https://cdn.jsdelivr.net/npm/chart.js",
              "async": true,
              "defer": false
            }
          ]
        },
        "expectedDOM": "<head><script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3/dist/cdn.min.js\" async defer></script><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script src=\"https://cdn.jsdelivr.net/npm/chart.js\" async></script></head>",
        "loadingBehavior": {
          "async": "Download in parallel, execute immediately when ready (non-blocking)",
          "defer": "Download in parallel, execute after HTML parsed (order preserved)",
          "neither": "Blocking download and execution (blocks HTML parsing)"
        },
        "useCases": [
          "Alpine.js (async + defer): Lightweight SPA framework, order matters",
          "htmx (blocking): Required immediately for page interactions",
          "Chart.js (async only): Load in background, no order dependency"
        ],
        "performance": {
          "async": "Best for analytics, ads (execute ASAP, order doesn't matter)",
          "defer": "Best for frameworks (preserve execution order, non-blocking)",
          "neither": "Avoid unless script must execute before DOM"
        },
        "assertions": [
          "External scripts loaded from CDN (jsDelivr, unpkg)",
          "async + defer: non-blocking, preserves order",
          "async only: non-blocking, executes immediately",
          "Security: HTTPS required, no inline event handlers"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-004",
      "given": "scripts with inlineScripts",
      "when": "inlineScripts array contains code snippets",
      "then": "it should inject inline JavaScript code",
      "validation": {
        "setup": "scripts: { inlineScripts: [{ content: 'console.log(\"Hello\")' }] }",
        "assertions": [
          "scripts.inlineScripts is array",
          "Each item has 'content' (required string, JavaScript code)",
          "Content length < 10KB (avoid large inline scripts)",
          "No <script> tags in content (raw JS only)"
        ]
      },
      "application": {
        "scripts": {
          "inlineScripts": [
            {
              "content": "window.APP_CONFIG = { apiUrl: 'https://api.example.com', debug: false };"
            },
            {
              "content": "document.addEventListener('DOMContentLoaded', () => { console.log('App ready'); });"
            },
            {
              "content": "if (localStorage.getItem('theme') === 'dark') { document.documentElement.classList.add('dark'); }"
            }
          ]
        },
        "expectedDOM": "<head><script>window.APP_CONFIG = { apiUrl: 'https://api.example.com', debug: false };</script><script>document.addEventListener('DOMContentLoaded', () => { console.log('App ready'); });</script><script>if (localStorage.getItem('theme') === 'dark') { document.documentElement.classList.add('dark'); }</script></head>",
        "useCases": [
          "Global config: window.APP_CONFIG for client-side app configuration",
          "DOMContentLoaded: Execute code after DOM ready (event listeners)",
          "Theme restoration: Apply saved theme before paint (avoid FOUC)"
        ],
        "security": {
          "csp": "Inline scripts require 'unsafe-inline' or nonce/hash in CSP header",
          "nonce": "Add nonce attribute: <script nonce=\"random123\">...",
          "hash": "CSP: script-src 'sha256-{hash}' (hash of script content)"
        },
        "performance": {
          "pros": "No network request, executes immediately",
          "cons": "Inline scripts not cached (repeated on every page load)",
          "recommendation": "Keep inline scripts < 1KB, use external for larger code"
        },
        "assertions": [
          "Inline scripts execute in order (synchronous)",
          "Use for critical initialization (theme, config)",
          "Avoid large inline scripts (> 10KB, use external instead)",
          "CSP considerations: nonce or hash required for strict CSP"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-005",
      "given": "scripts with config object",
      "when": "config has apiUrl and environment properties",
      "then": "it should provide client-side configuration data",
      "validation": {
        "setup": "scripts: { config: { apiUrl: 'https://api.example.com', environment: 'production' } }",
        "assertions": [
          "scripts.config is object",
          "config has additionalProperties: true (flexible schema)",
          "Common properties: apiUrl, environment, version, debug, features",
          "Config available as window.APP_CONFIG in client"
        ]
      },
      "application": {
        "scripts": {
          "config": {
            "apiUrl": "https://api.example.com",
            "wsUrl": "wss://ws.example.com",
            "environment": "production",
            "version": "1.2.3",
            "debug": false,
            "features": {
              "newDashboard": true,
              "betaFeatures": false
            },
            "auth": {
              "provider": "auth0",
              "domain": "example.auth0.com",
              "clientId": "abc123"
            },
            "sentry": {
              "dsn": "https://key@sentry.io/project",
              "environment": "production"
            }
          }
        },
        "expectedDOM": "<head><script>window.APP_CONFIG = {\"apiUrl\":\"https://api.example.com\",\"wsUrl\":\"wss://ws.example.com\",\"environment\":\"production\",\"version\":\"1.2.3\",\"debug\":false,\"features\":{\"newDashboard\":true,\"betaFeatures\":false},\"auth\":{\"provider\":\"auth0\",\"domain\":\"example.auth0.com\",\"clientId\":\"abc123\"},\"sentry\":{\"dsn\":\"https://key@sentry.io/project\",\"environment\":\"production\"}};</script></head>",
        "useCases": [
          "API configuration: apiUrl, wsUrl for fetch/WebSocket connections",
          "Environment detection: show debug tools in dev, hide in production",
          "Feature flags: enable/disable features without deployment",
          "Third-party config: Auth0, Sentry configuration"
        ],
        "security": {
          "publicOnly": "Config is public (sent to client), NO SECRETS",
          "secrets": "Never include API keys, passwords, private tokens",
          "sanitization": "Escape HTML in config values to prevent XSS"
        },
        "assertions": [
          "Config object serialized to JSON in inline script",
          "Available as window.APP_CONFIG in all client scripts",
          "additionalProperties: true allows any custom config",
          "Security: only public configuration (no secrets)"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-006",
      "given": "empty scripts configuration",
      "when": "all properties are omitted",
      "then": "it should allow pages without client-side scripts",
      "validation": {
        "setup": "scripts: {}",
        "assertions": [
          "scripts is object (required)",
          "All properties optional (features, externalScripts, inlineScripts, config)",
          "Empty scripts = no client-side JavaScript",
          "Useful for static pages (blogs, documentation)"
        ]
      },
      "application": {
        "scripts": {},
        "expectedDOM": "<head><!-- No scripts injected --></head><body><!-- Pure HTML/CSS page --></body>",
        "useCases": [
          "Static blog: No JavaScript required (SEO-friendly, fast)",
          "Documentation: Pure HTML (works without JS, accessible)",
          "Landing pages: Minimal JS (better Core Web Vitals)",
          "Progressive enhancement: Start with no JS, add incrementally"
        ],
        "performance": {
          "ttfb": "Instant (no script downloads)",
          "tti": "Instant (no JS parsing/execution)",
          "cls": "Zero layout shift (no dynamic content)",
          "lcp": "Faster (no JS blocking paint)"
        },
        "accessibility": {
          "noJS": "Page works without JavaScript (screen readers, old browsers)",
          "fallback": "Graceful degradation if JS disabled",
          "wcag": "WCAG 2.1 Level A compliance (no JS dependency)"
        },
        "assertions": [
          "Empty scripts configuration is valid",
          "No <script> tags in HTML output",
          "Perfect for static content (blogs, docs, legal pages)",
          "Progressive enhancement: add scripts only when needed"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-007",
      "given": "scripts config with additionalProperties true",
      "when": "config accepts any custom properties",
      "then": "it should support flexible client configuration",
      "validation": {
        "setup": "scripts: { config: { customProp: 'value', anotherProp: 123 } }",
        "assertions": [
          "config has additionalProperties: true",
          "Accepts any custom properties (no schema restriction)",
          "Common convention: camelCase keys, JSON-serializable values",
          "Use for app-specific configuration"
        ]
      },
      "application": {
        "scripts": {
          "config": {
            "mapboxToken": "pk.eyJ1...",
            "stripePublishableKey": "pk_live_...",
            "googleMapsApiKey": "AIza...",
            "recaptchaSiteKey": "6Lf...",
            "posthogApiKey": "phc_...",
            "intercomAppId": "abc123",
            "customDomain": "app.example.com",
            "maxUploadSize": 10485760,
            "allowedFileTypes": [".jpg", ".png", ".pdf"]
          }
        },
        "expectedDOM": "<script>window.APP_CONFIG = {\"mapboxToken\":\"pk.eyJ1...\",\"stripePublishableKey\":\"pk_live_...\",\"googleMapsApiKey\":\"AIza...\",\"recaptchaSiteKey\":\"6Lf...\",\"posthogApiKey\":\"phc_...\",\"intercomAppId\":\"abc123\",\"customDomain\":\"app.example.com\",\"maxUploadSize\":10485760,\"allowedFileTypes\":[\".jpg\",\".png\",\".pdf\"]};</script>",
        "realWorldExamples": [
          "Mapbox: Public access token for map rendering",
          "Stripe: Publishable key (safe to expose, NOT secret key)",
          "Google Maps: API key with domain restrictions",
          "Intercom: App ID for chat widget initialization"
        ],
        "security": {
          "publicKeys": "Only publishable/public keys (Stripe pk_*, Mapbox pk.*)",
          "restrictions": "Add domain restrictions to API keys (Google Maps, Firebase)",
          "secrets": "NEVER add secret keys (Stripe sk_*, private tokens)",
          "rotation": "Rotate exposed keys regularly (quarterly)"
        },
        "assertions": [
          "additionalProperties: true allows unlimited custom config",
          "Useful for third-party API keys (public only)",
          "Convention: keys are public, secrets in server environment",
          "Real-world: Mapbox, Stripe, Google Maps, Intercom configs"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-008",
      "given": "scripts combining features and config",
      "when": "features toggle behavior and config provides data",
      "then": "it should enable feature-driven configuration",
      "validation": {
        "setup": "scripts: { features: { analytics: true }, config: { analyticsId: 'G-XXXXX' } }",
        "assertions": [
          "features controls behavior (boolean toggles)",
          "config provides data (strings, numbers, objects)",
          "Combined: feature flag enables config usage",
          "Example: analytics: true → use config.analyticsId"
        ]
      },
      "application": {
        "scripts": {
          "features": {
            "analytics": true,
            "chatWidget": true,
            "darkMode": true,
            "errorTracking": true
          },
          "config": {
            "googleAnalyticsId": "G-XXXXXXXXXX",
            "intercomAppId": "abc123",
            "sentryDsn": "https://key@sentry.io/project",
            "defaultTheme": "dark"
          },
          "externalScripts": [
            {
              "src": "https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX",
              "async": true
            },
            {
              "src": "https://widget.intercom.io/widget/abc123",
              "async": true
            },
            {
              "src": "https://browser.sentry-cdn.com/7.x/bundle.min.js",
              "async": true
            }
          ],
          "inlineScripts": [
            {
              "content": "if (window.APP_CONFIG.features.analytics && window.APP_CONFIG.googleAnalyticsId) { window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', window.APP_CONFIG.googleAnalyticsId); }"
            },
            {
              "content": "if (window.APP_CONFIG.features.errorTracking && window.APP_CONFIG.sentryDsn) { Sentry.init({ dsn: window.APP_CONFIG.sentryDsn }); }"
            },
            {
              "content": "if (window.APP_CONFIG.features.darkMode && window.APP_CONFIG.defaultTheme === 'dark') { document.documentElement.classList.add('dark'); }"
            }
          ]
        },
        "pattern": {
          "description": "Feature flags control whether config is used",
          "logic": "if (features.X && config.xData) { useData(config.xData); }",
          "benefit": "Disable features without removing config (easy rollback)"
        },
        "useCases": [
          "Analytics: features.analytics → load GA with config.googleAnalyticsId",
          "Error tracking: features.errorTracking → init Sentry with config.sentryDsn",
          "Chat widget: features.chatWidget → load Intercom with config.intercomAppId",
          "Dark mode: features.darkMode → apply config.defaultTheme"
        ],
        "assertions": [
          "features (booleans) gate config (data) usage",
          "Inline scripts check features before using config",
          "External scripts loaded conditionally based on features",
          "Pattern enables feature flags without config changes"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-009",
      "given": "scripts at page level",
      "when": "each page can define custom scripts",
      "then": "it should support per-page script customization",
      "validation": {
        "setup": "page: { path: '/dashboard', scripts: { features: { analytics: true } } }, page: { path: '/blog', scripts: {} }",
        "assertions": [
          "Each page has optional scripts property",
          "/dashboard has analytics enabled",
          "/blog has no scripts (empty object)",
          "Per-page scripts override global defaults"
        ]
      },
      "application": {
        "pages": [
          {
            "path": "/",
            "scripts": {
              "features": {
                "analytics": true,
                "chatWidget": true
              },
              "externalScripts": [
                {
                  "src": "https://www.googletagmanager.com/gtag/js?id=G-HOME",
                  "async": true
                }
              ]
            }
          },
          {
            "path": "/dashboard",
            "scripts": {
              "features": {
                "analytics": true,
                "darkMode": true
              },
              "externalScripts": [
                {
                  "src": "https://cdn.jsdelivr.net/npm/chart.js",
                  "async": true
                }
              ],
              "config": {
                "apiUrl": "https://api.example.com/v1"
              }
            }
          },
          {
            "path": "/blog",
            "scripts": {}
          }
        ],
        "useCases": [
          "Homepage: Analytics + chat widget for conversions",
          "Dashboard: Chart.js for data visualization, no chat widget",
          "Blog: No scripts (pure HTML/CSS, fast, SEO-friendly)",
          "Pricing: Stripe.js only on pricing page (lazy load)"
        ],
        "pattern": {
          "global": "Define default scripts at app level (all pages)",
          "override": "Override per page (merge or replace strategy)",
          "merge": "Page scripts extend global scripts (additive)",
          "replace": "Page scripts replace global scripts (isolate)"
        },
        "performance": {
          "benefit": "Load scripts only where needed (reduces JS bundle)",
          "example": "Chart.js on dashboard only (not on blog)",
          "lazy": "Stripe.js loaded only on /pricing (code splitting)"
        },
        "assertions": [
          "Each page defines custom scripts independently",
          "Homepage: analytics + chat widget",
          "Dashboard: Chart.js for visualizations",
          "Blog: no scripts (minimal JS, better performance)"
        ]
      }
    },
    {
      "id": "APP-PAGES-SCRIPTS-010",
      "given": "scripts referencing sub-schemas",
      "when": "features, externalScripts, inlineScripts use $ref",
      "then": "it should compose scripts from modular schemas",
      "validation": {
        "setup": "scripts: { features: { $ref: './features/features.schema.json' }, externalScripts: { $ref: './external-scripts/external-scripts.schema.json' }, inlineScripts: { $ref: './inline-scripts/inline-scripts.schema.json' } }",
        "assertions": [
          "scripts.features references ./features/features.schema.json",
          "scripts.externalScripts references ./external-scripts/external-scripts.schema.json",
          "scripts.inlineScripts references ./inline-scripts/inline-scripts.schema.json",
          "Modular schemas enable reusable script definitions"
        ]
      },
      "application": {
        "schemas": {
          "scripts.schema.json": {
            "description": "Orchestrator for client-side scripts",
            "properties": {
              "features": {
                "$ref": "./features/features.schema.json"
              },
              "externalScripts": {
                "$ref": "./external-scripts/external-scripts.schema.json"
              },
              "inlineScripts": {
                "$ref": "./inline-scripts/inline-scripts.schema.json"
              },
              "config": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "features/features.schema.json": {
            "description": "Client-side feature toggles (darkMode, analytics, etc.)",
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "external-scripts/external-scripts.schema.json": {
            "description": "CDN script references (src, async, defer)",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "src": {
                  "type": "string",
                  "format": "uri"
                },
                "async": {
                  "type": "boolean"
                },
                "defer": {
                  "type": "boolean"
                }
              },
              "required": ["src"]
            }
          },
          "inline-scripts/inline-scripts.schema.json": {
            "description": "Inline JavaScript code snippets",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                }
              },
              "required": ["content"]
            }
          }
        },
        "benefits": {
          "reusability": "Sub-schemas reused across multiple pages/apps",
          "validation": "Each sub-schema validates independently",
          "documentation": "Clear separation of concerns (features vs scripts vs config)",
          "testing": "Test each sub-schema in isolation"
        },
        "realWorld": [
          "Features schema: Shared feature flag definitions across pages",
          "External scripts: Library catalog (Alpine.js, htmx, Chart.js)",
          "Inline scripts: Reusable snippets (theme restoration, analytics init)"
        ],
        "assertions": [
          "scripts.schema.json orchestrates 3 sub-schemas via $ref",
          "Sub-schemas define validation rules independently",
          "Modular design enables reusability and testing",
          "Real-world: features, external-scripts, inline-scripts catalogs"
        ]
      }
    }
  ]
}
