{
  "$id": "path.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "URL Path",
  "description": "URL path where the page is accessible",
  "$ref": "../../common/definitions.schema.json#/definitions/path",
  "examples": ["/", "/about", "/pricing", "/contact"],
  "x-specs": [
    {
      "id": "APP-PAGES-PATH-001",
      "given": "a root path",
      "when": "value is '/'",
      "then": "it should validate as homepage path",
      "validation": {
        "setup": {
          "path": "/"
        },
        "assertions": ["Value: '/' (root path)", "Homepage route", "Matches domain root URL"]
      },
      "application": {
        "path": "/",
        "url": "https://example.com/",
        "routing": {
          "matched": true,
          "page": "homepage"
        },
        "assertions": [
          "URL: https://example.com/ → path: '/'",
          "Router matches homepage",
          "Default page at domain root"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-002",
      "given": "a path referencing common definition",
      "when": "schema uses $ref to definitions.schema.json#/definitions/path",
      "then": "it should follow shared path pattern from common definitions",
      "validation": {
        "setup": {
          "schema": {
            "$ref": "../../common/definitions.schema.json#/definitions/path"
          }
        },
        "assertions": [
          "Shared definition pattern",
          "DRY: path validation defined once in definitions.schema.json",
          "All path schemas reference common definition"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-003",
      "given": "a single-level path",
      "when": "value is '/about' or '/pricing'",
      "then": "it should accept paths with leading slash",
      "validation": {
        "setup": {
          "paths": ["/about", "/pricing", "/contact"]
        },
        "assertions": [
          "Pattern: /segment",
          "Leading slash required",
          "Single URL segment",
          "Common website paths"
        ]
      },
      "application": {
        "path": "/about",
        "url": "https://example.com/about",
        "routing": {
          "matched": true,
          "page": "about"
        },
        "assertions": [
          "URL: https://example.com/about → path: '/about'",
          "Router matches about page",
          "Single-level navigation"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-004",
      "given": "a nested path",
      "when": "value is '/products/pricing' or '/blog/article'",
      "then": "it should accept multi-level URL paths",
      "validation": {
        "setup": {
          "paths": ["/products/pricing", "/blog/article", "/docs/api/reference"]
        },
        "assertions": [
          "Pattern: /segment/segment",
          "Multiple levels supported",
          "Hierarchical URL structure",
          "Unlimited nesting depth"
        ]
      },
      "application": {
        "path": "/products/pricing",
        "url": "https://example.com/products/pricing",
        "routing": {
          "matched": true,
          "page": "pricing"
        },
        "breadcrumb": ["Products", "Pricing"],
        "assertions": [
          "URL: https://example.com/products/pricing → path: '/products/pricing'",
          "Router matches nested page",
          "Breadcrumb navigation: Products > Pricing",
          "Hierarchical site structure"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-005",
      "given": "a path with kebab-case segments",
      "when": "value is '/our-team' or '/contact-us'",
      "then": "it should accept kebab-case URL segments",
      "validation": {
        "setup": {
          "paths": ["/our-team", "/contact-us", "/terms-of-service"]
        },
        "assertions": [
          "Pattern: /kebab-case-segment",
          "Hyphens allowed in segments",
          "SEO-friendly URLs",
          "Readable multi-word paths"
        ]
      },
      "application": {
        "path": "/our-team",
        "url": "https://example.com/our-team",
        "routing": {
          "matched": true,
          "page": "team"
        },
        "assertions": [
          "URL: https://example.com/our-team → path: '/our-team'",
          "Router matches team page",
          "Kebab-case improves SEO (vs /ourteam or /our_team)",
          "Readable URLs for users"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-006",
      "given": "common website paths (/, /about, /pricing, /contact)",
      "when": "standard website pages are defined",
      "then": "it should provide examples for typical URL patterns",
      "validation": {
        "setup": {
          "paths": ["/", "/about", "/pricing", "/contact"]
        },
        "assertions": [
          "Homepage: '/'",
          "About: '/about'",
          "Pricing: '/pricing'",
          "Contact: '/contact'",
          "Standard website structure"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-007",
      "given": "path as required field",
      "when": "page is created without path",
      "then": "it should fail validation (path is required)",
      "validation": {
        "setup": {
          "page": {
            "name": "About",
            "meta": {
              "title": "About Us"
            },
            "sections": []
          }
        },
        "assertions": [
          "INVALID: path property missing",
          "Validation error: path is required",
          "Every page must have a path",
          "Cannot route to page without path"
        ],
        "expectValidation": "fail"
      }
    },
    {
      "id": "APP-PAGES-PATH-008",
      "given": "paths across multiple pages",
      "when": "each page has unique path",
      "then": "it should ensure unique routing for all pages",
      "validation": {
        "setup": {
          "pages": [
            {
              "path": "/"
            },
            {
              "path": "/about"
            },
            {
              "path": "/pricing"
            },
            {
              "path": "/contact"
            }
          ]
        },
        "assertions": [
          "All paths unique",
          "No duplicate paths",
          "Each path maps to one page",
          "Unique routing table"
        ]
      },
      "application": {
        "pages": [
          {
            "path": "/",
            "name": "Home"
          },
          {
            "path": "/about",
            "name": "About"
          }
        ],
        "routing": {
          "/": "Home",
          "/about": "About",
          "/unknown": "404"
        },
        "assertions": [
          "Router builds path → page mapping",
          "Each path resolves to unique page",
          "Undefined paths return 404",
          "No path collisions"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-009",
      "given": "path determining page accessibility",
      "when": "user navigates to path in browser",
      "then": "it should map URL to page configuration for rendering",
      "application": {
        "page": {
          "path": "/pricing",
          "name": "Pricing",
          "meta": {
            "title": "Pricing Plans"
          },
          "sections": []
        },
        "userAction": "Navigate to https://example.com/pricing",
        "routing": {
          "url": "https://example.com/pricing",
          "matched": true,
          "page": "Pricing"
        },
        "render": {
          "title": "Pricing Plans",
          "content": "Pricing page sections..."
        },
        "assertions": [
          "User navigates to https://example.com/pricing",
          "Router matches path: '/pricing'",
          "Page configuration loaded: Pricing page",
          "Page rendered with title 'Pricing Plans'",
          "Path is the key to page routing"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-010",
      "given": "path with dynamic segments",
      "when": "value is '/blog/:slug' or '/products/:id'",
      "then": "it should support dynamic route parameters (if applicable)",
      "validation": {
        "setup": {
          "paths": ["/blog/:slug", "/products/:id", "/users/:userId/posts/:postId"]
        },
        "assertions": [
          "Pattern: /segment/:param",
          "Dynamic parameters with : prefix",
          "Multiple parameters supported",
          "Common for dynamic content (blogs, products, users)"
        ]
      },
      "application": {
        "path": "/blog/:slug",
        "urls": {
          "/blog/hello-world": {
            "matched": true,
            "params": {
              "slug": "hello-world"
            }
          },
          "/blog/getting-started": {
            "matched": true,
            "params": {
              "slug": "getting-started"
            }
          }
        },
        "assertions": [
          "Path pattern: '/blog/:slug'",
          "URL: /blog/hello-world → slug = 'hello-world'",
          "URL: /blog/getting-started → slug = 'getting-started'",
          "Single path matches infinite URLs",
          "Dynamic routing for CMS content"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-011",
      "given": "app with NO pages array",
      "when": "user navigates to '/'",
      "then": "DefaultHomePage displays app name, version, description (NO blocks)",
      "validation": {
        "setup": {
          "app": {
            "name": "My App",
            "version": "1.0.0",
            "description": "My app description",
            "blocks": [
              {
                "name": "hero",
                "type": "section",
                "children": []
              }
            ]
          }
        },
        "assertions": [
          "app.pages is undefined/empty",
          "No '/' page exists",
          "DefaultHomePage should render",
          "app.name displayed",
          "app.version displayed",
          "app.description displayed",
          "app.blocks NOT rendered (bug fix verification)"
        ]
      },
      "application": {
        "expectedDOM": "App name visible, version badge visible, description visible, NO blocks rendered",
        "behavior": "DefaultHomePage acts as fallback when pages array is missing",
        "useCases": [
          "New app with no pages configured",
          "Minimal app setup with only app-level properties"
        ],
        "assertions": [
          "data-testid='app-name-heading' exists",
          "data-testid='app-version-badge' exists (if version present)",
          "data-testid='app-description' exists (if description present)",
          "NO elements with data-block attribute",
          "Blocks should NOT be rendered in DefaultHomePage"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-012",
      "given": "app with pages=[{path: '/about'}] (no '/' page)",
      "when": "user navigates to '/'",
      "then": "DefaultHomePage displays (fallback behavior)",
      "validation": {
        "setup": {
          "app": {
            "name": "My App",
            "pages": [
              {
                "path": "/about",
                "sections": []
              }
            ]
          }
        },
        "assertions": [
          "app.pages exists but no page with path='/'",
          "DefaultHomePage should render as fallback",
          "app.name displayed",
          "app.blocks NOT rendered"
        ]
      },
      "application": {
        "expectedDOM": "DefaultHomePage rendered with app name, NO blocks",
        "behavior": "When pages array exists but no '/' path defined, fallback to DefaultHomePage",
        "useCases": [
          "App with only non-root pages (/about, /contact, etc.)",
          "Missing homepage configuration"
        ],
        "assertions": [
          "data-testid='app-name-heading' exists",
          "NO elements with data-block attribute",
          "URL shows '/' but DefaultHomePage renders"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-013",
      "given": "app with pages=[{path: '/', sections: [...]}]",
      "when": "user navigates to '/'",
      "then": "custom page renders (NOT DefaultHomePage)",
      "validation": {
        "setup": {
          "app": {
            "name": "My App",
            "pages": [
              {
                "name": "custom_home",
                "path": "/",
                "meta": {
                  "lang": "en-US",
                  "title": "Custom Home"
                },
                "sections": [
                  {
                    "type": "section",
                    "props": {
                      "id": "hero"
                    },
                    "children": [
                      {
                        "type": "h1",
                        "children": ["Custom Homepage"]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "assertions": [
          "app.pages contains page with path='/'",
          "Custom page should render",
          "DefaultHomePage should NOT render",
          "Custom sections rendered from page.sections"
        ]
      },
      "application": {
        "expectedDOM": "Custom page sections rendered, NOT DefaultHomePage",
        "behavior": "Custom '/' page takes precedence over DefaultHomePage",
        "useCases": ["App with custom homepage design", "Marketing page with specific layout"],
        "assertions": [
          "data-testid='page-custom_home' exists",
          "Custom sections with id='hero' rendered",
          "NO data-testid='app-name-heading' (DefaultHomePage not rendered)",
          "Page title shows custom meta.title"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-014",
      "given": "app with blocks=[...] and NO '/' page",
      "when": "DefaultHomePage is rendered",
      "then": "blocks are NOT rendered (only name/version/description shown)",
      "validation": {
        "setup": {
          "app": {
            "name": "My App",
            "version": "1.0.0",
            "description": "App with blocks",
            "blocks": [
              {
                "name": "hero",
                "type": "section",
                "children": [
                  {
                    "type": "h1",
                    "children": ["Hero Block"]
                  }
                ]
              },
              {
                "name": "cta",
                "type": "section",
                "children": [
                  {
                    "type": "button",
                    "children": ["CTA Button"]
                  }
                ]
              }
            ]
          }
        },
        "assertions": [
          "app.blocks exists with multiple blocks",
          "No '/' page exists",
          "DefaultHomePage renders",
          "app.blocks should NOT be rendered (BUG FIX)",
          "Only app.name, app.version, app.description displayed"
        ]
      },
      "application": {
        "expectedDOM": "App name, version, description visible; blocks NOT rendered",
        "behavior": "DefaultHomePage NEVER renders app.blocks - this is the core bug to fix",
        "useCases": [
          "App with reusable blocks defined but no homepage",
          "Blocks should only render in custom pages, not DefaultHomePage"
        ],
        "assertions": [
          "data-testid='app-name-heading' exists",
          "data-testid='app-version-badge' exists",
          "data-testid='app-description' exists",
          "NO elements with [data-block='hero']",
          "NO elements with [data-block='cta']",
          "NO ComponentRenderer rendered for blocks",
          "Lines 68-79 in DefaultHomePage.tsx should be removed"
        ]
      }
    },
    {
      "id": "APP-PAGES-PATH-015",
      "given": "app with pages=[{path: '/', sections: [{block: 'hero'}]}]",
      "when": "user navigates to '/'",
      "then": "custom page renders blocks from sections",
      "validation": {
        "setup": {
          "app": {
            "name": "My App",
            "blocks": [
              {
                "name": "hero",
                "type": "section",
                "children": [
                  {
                    "type": "h1",
                    "children": ["$title"]
                  }
                ]
              }
            ],
            "pages": [
              {
                "name": "custom_home",
                "path": "/",
                "meta": {
                  "lang": "en-US",
                  "title": "Home"
                },
                "sections": [
                  {
                    "block": "hero",
                    "vars": {
                      "title": "Welcome Home"
                    }
                  }
                ]
              }
            ]
          }
        },
        "assertions": [
          "Custom '/' page exists",
          "Page sections reference blocks",
          "Custom page renders (NOT DefaultHomePage)",
          "Blocks rendered from page.sections (NOT from app.blocks directly)",
          "Block variables substituted correctly"
        ]
      },
      "application": {
        "expectedDOM": "Custom page with hero block rendered from sections",
        "behavior": "Custom pages CAN render blocks via sections, but DefaultHomePage CANNOT",
        "useCases": ["Custom homepage using reusable blocks", "Block-based page composition"],
        "assertions": [
          "data-testid='page-custom_home' exists",
          "Hero block rendered via section reference",
          "h1 contains 'Welcome Home' (variable substituted)",
          "DefaultHomePage NOT rendered",
          "Blocks rendered because custom page sections reference them, NOT because of DefaultHomePage"
        ]
      }
    }
  ]
}
