{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "block-props.schema.json",
  "title": "Block Props",
  "description": "Properties for block templates, supporting variable references",
  "type": "object",
  "patternProperties": {
    "^[a-zA-Z][a-zA-Z0-9]*$": {
      "oneOf": [
        {
          "type": "string",
          "description": "String property (may contain $variable)"
        },
        {
          "type": "number",
          "description": "Numeric property"
        },
        {
          "type": "boolean",
          "description": "Boolean property"
        },
        {
          "type": "object",
          "description": "Nested object property"
        },
        {
          "type": "array",
          "description": "Array property"
        }
      ]
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "className": "text-$color bg-$bgColor",
      "size": "$size",
      "enabled": true,
      "maxWidth": "max-w-$width"
    }
  ],
  "specs": [
    {
      "id": "APP-BLOCKS-PROPS-001",
      "given": "props as dynamic object",
      "when": "props uses patternProperties for flexible property names",
      "then": "it should validate any valid JavaScript property name at build time",
      "x-validation": {
        "setup": {
          "validProps": {
            "className": "text-blue",
            "id": "main",
            "ariaLabel": "Main content",
            "dataTestId": "component-1",
            "onClick": "handleClick"
          },
          "invalidProps": {
            "class-name": "invalid",
            "1stProperty": "invalid",
            "": "invalid"
          }
        },
        "assertions": [
          "Valid: className, id, ariaLabel, dataTestId, onClick",
          "Invalid: 'class-name' (hyphen), '1stProperty' (starts with digit), '' (empty)",
          "PatternProperties enable any component prop without predefined schema"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-002",
      "given": "property names in camelCase",
      "when": "property names match ^[a-zA-Z][a-zA-Z0-9]*$ pattern",
      "then": "it should render as HTML attributes following camelCase convention",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "custom-button",
            "type": "button",
            "props": {
              "className": "btn-primary",
              "ariaLabel": "Click me",
              "dataTestId": "submit-btn"
            }
          }
        },
        "expectedDOM": "<button data-testid=\"block-custom-button\" class=\"btn-primary\" aria-label=\"Click me\" data-test-id=\"submit-btn\"></button>",
        "assertions": [
          "className (camelCase) → class attribute",
          "ariaLabel (camelCase) → aria-label attribute (kebab-case)",
          "dataTestId (camelCase) → data-test-id attribute (kebab-case)",
          "CamelCase props convert to kebab-case HTML attributes"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-003",
      "given": "property value as string",
      "when": "value is string (may contain $variable)",
      "then": "it should render string value with variable substitution",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "styled-div",
            "type": "div",
            "props": {
              "className": "text-$color",
              "id": "$elementId",
              "title": "$tooltipText"
            }
          },
          "reference": {
            "$ref": "styled-div",
            "vars": {
              "color": "blue",
              "elementId": "main-content",
              "tooltipText": "Hover for info"
            }
          }
        },
        "expectedDOM": "<div data-testid=\"block-styled-div\" class=\"text-blue\" id=\"main-content\" title=\"Hover for info\"></div>",
        "assertions": [
          "className: 'text-$color' → 'text-blue'",
          "id: '$elementId' → 'main-content'",
          "title: '$tooltipText' → 'Hover for info'",
          "All string props support $variable substitution"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-004",
      "given": "property value as number",
      "when": "value is number like 4, 12, 300",
      "then": "it should render numeric value as HTML attribute",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "grid-layout",
            "type": "div",
            "props": {
              "columns": 3,
              "gap": 4,
              "maxWidth": 1200
            }
          }
        },
        "expectedDOM": "<div data-testid=\"block-grid-layout\" data-columns=\"3\" data-gap=\"4\" data-max-width=\"1200\"></div>",
        "assertions": [
          "Numeric prop 'columns: 3' renders as data-columns=\"3\"",
          "Numeric prop 'gap: 4' renders as data-gap=\"4\"",
          "Numeric prop 'maxWidth: 1200' renders as data-max-width=\"1200\"",
          "Numbers render as string attributes in HTML"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-005",
      "given": "property value as boolean",
      "when": "value is true or false",
      "then": "it should render boolean as HTML boolean attribute",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "form-input",
            "type": "input",
            "props": {
              "disabled": true,
              "required": true,
              "hidden": false
            }
          }
        },
        "expectedDOM": "<input data-testid=\"block-form-input\" disabled required />",
        "assertions": [
          "disabled: true → 'disabled' attribute present",
          "required: true → 'required' attribute present",
          "hidden: false → attribute omitted (false boolean)",
          "True booleans render as attribute presence, false omits attribute"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-006",
      "given": "property value as object",
      "when": "value is nested object",
      "then": "it should render object as JSON data attribute",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "chart-widget",
            "type": "div",
            "props": {
              "chartConfig": {
                "type": "bar",
                "data": [10, 20, 30],
                "colors": { "primary": "blue", "secondary": "green" }
              }
            }
          }
        },
        "expectedDOM": "<div data-testid=\"block-chart-widget\" data-chart-config='{\"type\":\"bar\",\"data\":[10,20,30],\"colors\":{\"primary\":\"blue\",\"secondary\":\"green\"}}'></div>",
        "assertions": [
          "Object prop renders as data-chart-config attribute",
          "Object serialized to JSON string",
          "Nested object structure preserved in attribute",
          "Supports complex configuration objects"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-007",
      "given": "property value as array",
      "when": "value is array of items",
      "then": "it should render array as JSON data attribute",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "tag-list",
            "type": "div",
            "props": {
              "tags": ["react", "typescript", "tailwind"]
            }
          }
        },
        "expectedDOM": "<div data-testid=\"block-tag-list\" data-tags='[\"react\",\"typescript\",\"tailwind\"]'></div>",
        "assertions": [
          "Array prop renders as data-tags attribute",
          "Array serialized to JSON string",
          "Array items preserved in order",
          "Supports list-based configuration"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-008",
      "given": "className with multiple variables",
      "when": "className is 'text-$color bg-$bgColor'",
      "then": "it should render with all variables substituted in className",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "multi-var-box",
            "type": "div",
            "props": {
              "className": "text-$color bg-$bgColor border-$borderColor"
            }
          },
          "reference": {
            "$ref": "multi-var-box",
            "vars": {
              "color": "blue",
              "bgColor": "gray-100",
              "borderColor": "gray-300"
            }
          }
        },
        "expectedDOM": "<div data-testid=\"block-multi-var-box\" class=\"text-blue bg-gray-100 border-gray-300\"></div>",
        "assertions": [
          "className with 3 variables: $color, $bgColor, $borderColor",
          "All substituted: 'text-blue bg-gray-100 border-gray-300'",
          "Multiple variables in single property supported",
          "Enables dynamic Tailwind class combinations"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-009",
      "given": "props mixing variables and literals",
      "when": "maxWidth is 'max-w-$width' (Tailwind utility with variable)",
      "then": "it should render combined static and dynamic className parts",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "container",
            "type": "div",
            "props": {
              "className": "container mx-auto max-w-$width px-$padding"
            }
          },
          "reference": {
            "$ref": "container",
            "vars": { "width": "7xl", "padding": "4" }
          }
        },
        "expectedDOM": "<div data-testid=\"block-container\" class=\"container mx-auto max-w-7xl px-4\"></div>",
        "assertions": [
          "Static parts: 'container', 'mx-auto' preserved",
          "Dynamic parts: 'max-w-$width' → 'max-w-7xl', 'px-$padding' → 'px-4'",
          "Final className: 'container mx-auto max-w-7xl px-4'",
          "Supports mixing fixed and parameterized Tailwind utilities"
        ]
      }
    },
    {
      "id": "APP-BLOCKS-PROPS-010",
      "given": "props for component configuration",
      "when": "props define component appearance and behavior",
      "then": "it should render complete component with all configuration applied",
      "x-test": {
        "setup": {
          "blockDefinition": {
            "name": "action-button",
            "type": "button",
            "props": {
              "className": "btn btn-$variant",
              "disabled": "$isDisabled",
              "ariaLabel": "$label",
              "dataAction": "$action"
            },
            "content": "$buttonText"
          },
          "reference": {
            "$ref": "action-button",
            "vars": {
              "variant": "primary",
              "isDisabled": false,
              "label": "Submit form",
              "action": "submit",
              "buttonText": "Submit"
            }
          }
        },
        "expectedDOM": "<button data-testid=\"block-action-button\" class=\"btn btn-primary\" aria-label=\"Submit form\" data-action=\"submit\">Submit</button>",
        "assertions": [
          "Appearance: className='btn btn-primary' (variant substituted)",
          "Behavior: disabled omitted (false), data-action='submit'",
          "Accessibility: aria-label='Submit form'",
          "Content: 'Submit' text",
          "Props enable complete component customization"
        ]
      }
    }
  ]
}
