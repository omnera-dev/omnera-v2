{
  "summary": "Sign in with social provider",
  "description": "Authenticate user via OAuth social provider (Google, GitHub, etc.). Returns either session details or redirect URL based on authentication flow.",
  "operationId": "socialSignIn",
  "tags": ["authentication"],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "requestBody": {
    "required": true,
    "content": {
      "application/json": {
        "schema": {
          "type": "object",
          "required": ["provider"],
          "properties": {
            "provider": {
              "type": "string",
              "description": "Social provider identifier (e.g., 'google', 'github')",
              "example": "google"
            },
            "callbackURL": {
              "type": "string",
              "description": "Callback URL to redirect to after the user has signed in",
              "nullable": true,
              "example": "https://app.example.com/dashboard"
            },
            "newUserCallbackURL": {
              "type": "string",
              "description": "Callback URL for new user registration",
              "nullable": true
            },
            "errorCallbackURL": {
              "type": "string",
              "description": "Callback URL to redirect to if an error happens",
              "nullable": true,
              "example": "https://app.example.com/auth/error"
            },
            "disableRedirect": {
              "type": "boolean",
              "description": "Disable automatic redirection to the provider. Useful for handling the redirection yourself",
              "nullable": true,
              "default": false
            },
            "idToken": {
              "type": "object",
              "description": "ID token from the provider for server-side verification",
              "nullable": true,
              "required": ["token"],
              "properties": {
                "token": {
                  "type": "string",
                  "description": "ID token from the provider"
                },
                "nonce": {
                  "type": "string",
                  "description": "Nonce used to generate the token",
                  "nullable": true
                },
                "accessToken": {
                  "type": "string",
                  "description": "Access token from the provider",
                  "nullable": true
                },
                "refreshToken": {
                  "type": "string",
                  "description": "Refresh token from the provider",
                  "nullable": true
                },
                "expiresAt": {
                  "type": "number",
                  "description": "Expiry date of the token (Unix timestamp)",
                  "nullable": true
                }
              }
            },
            "scopes": {
              "type": "array",
              "description": "Array of scopes to request from the provider. This will override the default scopes.",
              "nullable": true,
              "items": {
                "type": "string"
              },
              "example": ["email", "profile"]
            },
            "requestSignUp": {
              "type": "boolean",
              "description": "Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider",
              "nullable": true,
              "default": false
            },
            "loginHint": {
              "type": "string",
              "description": "The login hint to use for the authorization code request (e.g., email address)",
              "nullable": true,
              "example": "user@example.com"
            }
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Success - Returns either session details or redirect URL",
      "content": {
        "application/json": {
          "schema": {
            "oneOf": [
              {
                "type": "object",
                "description": "Session response when idToken is provided",
                "required": ["redirect", "token", "user"],
                "properties": {
                  "redirect": {
                    "type": "boolean",
                    "enum": [false]
                  },
                  "token": {
                    "type": "string",
                    "description": "Session token"
                  },
                  "user": {
                    "$ref": "../../../components/schemas/User.json"
                  }
                }
              },
              {
                "type": "object",
                "description": "Redirect response for OAuth flow",
                "required": ["url"],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "OAuth provider URL to redirect to",
                    "example": "https://accounts.google.com/o/oauth2/v2/auth?..."
                  }
                }
              }
            ]
          },
          "examples": {
            "sessionResponse": {
              "summary": "Session created with ID token",
              "value": {
                "redirect": false,
                "token": "sess_abc123xyz",
                "user": {
                  "id": "user_123",
                  "email": "user@example.com",
                  "name": "John Doe",
                  "image": "https://avatar.example.com/john.jpg",
                  "emailVerified": true,
                  "createdAt": "2025-01-15T10:30:00Z",
                  "updatedAt": "2025-01-15T10:30:00Z"
                }
              }
            },
            "redirectResponse": {
              "summary": "OAuth redirect URL",
              "value": {
                "url": "https://accounts.google.com/o/oauth2/v2/auth?client_id=..."
              }
            }
          }
        }
      }
    },
    "400": {
      "$ref": "../../../components/responses/ValidationError.json"
    }
  },
  "specs": [
    {
      "id": "AUTH-SIGN-IN-SOCIAL-001",
      "given": "A running server",
      "when": "User requests social sign-in with Google provider",
      "then": "Response should be successful (200 or redirect) or 404 if provider not configured"
    },
    {
      "id": "AUTH-SIGN-IN-SOCIAL-002",
      "given": "A running server",
      "when": "User requests social sign-in without provider",
      "then": "Response should be validation error (4xx)"
    }
  ]
}
