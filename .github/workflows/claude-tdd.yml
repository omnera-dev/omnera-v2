name: Claude Code TDD

# Trigger Strategy:
# - workflow_run: Automatically triggers when TDD Queue Processor completes
# - issue_comment/PR review: Manual @claude mentions for interactive use
# - Uses label query to find the in-progress spec (no workflow_dispatch dependency)
# - Fully automatic TDD automation with zero API calls for triggering

on:
  # Automatic trigger: When queue processor completes, find in-progress spec
  workflow_run:
    workflows: ["TDD Queue - Processor"]
    types: [completed]
    branches: [main]

  # Manual triggers: @claude mentions in issues/PRs (interactive use)
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# Concurrency control: Prevent duplicate runs for the same issue/PR + sender
# Each issue/PR + sender gets its own concurrency group to prevent:
# - User-triggered workflows from being canceled by bot-triggered workflows
# - Multiple bot comments from canceling each other
# This allows queue system to process multiple specs in parallel without interference
concurrency:
  group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}-${{ github.event.sender.login || github.event.sender.type || 'unknown' }}
  cancel-in-progress: true

jobs:
  claude:
    # Security: Only allow trusted users and automatic workflow_run trigger
    # Exclude claude[bot] to prevent self-triggering and cancellation loops
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
        (github.event_name == 'workflow_run')
      ) && (
        github.event_name == 'workflow_run' ||
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR' ||
        github.event.issue.author_association == 'OWNER' ||
        github.event.issue.author_association == 'MEMBER' ||
        github.event.issue.author_association == 'COLLABORATOR' ||
        github.event.review.author_association == 'OWNER' ||
        github.event.review.author_association == 'MEMBER' ||
        github.event.review.author_association == 'COLLABORATOR' ||
        github.event.sender.login == 'github-actions[bot]' ||
        github.event.sender.login == 'github-actions' ||
        github.event.sender.login == 'app/github-actions' ||
        github.event.issue.user.login == 'github-actions[bot]' ||
        github.event.issue.user.login == 'github-actions' ||
        github.event.issue.user.login == 'app/github-actions' ||
        github.event.comment.user.login == 'github-actions[bot]' ||
        github.event.comment.user.login == 'github-actions' ||
        github.event.comment.user.login == 'app/github-actions'
      ) && (
        github.event.sender.login != 'claude[bot]'
      )
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Claude Code implementation can take time (complex specs)
    permissions:
      contents: write # Need write to push to TDD branches
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Record start time
        id: start_time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to checkout branches

      - name: Query for in-progress spec (workflow_run trigger)
        id: query_spec
        if: github.event_name == 'workflow_run'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "🔍 Querying for in-progress spec..."

          # Find the single in-progress spec (strict serial processing)
          ISSUE_JSON=$(gh issue list --label "tdd-spec:in-progress" --json number,body --limit 1 --jq '.[0]')

          if [ -z "$ISSUE_JSON" ] || [ "$ISSUE_JSON" = "null" ]; then
            echo "⚠️  No in-progress spec found - queue processor may have completed without processing"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          ISSUE_NUMBER=$(echo "$ISSUE_JSON" | jq -r '.number')
          ISSUE_BODY=$(echo "$ISSUE_JSON" | jq -r '.body')

          echo "✅ Found in-progress spec: #$ISSUE_NUMBER"
          echo "found=true" >> $GITHUB_OUTPUT
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue_body<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract and checkout TDD branch if specified
        id: branch
        if: github.event_name == 'issue_comment' || github.event_name == 'issues' || github.event_name == 'workflow_run'
        env:
          ISSUE_BODY: ${{ github.event_name == 'workflow_run' && steps.query_spec.outputs.issue_body || github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_NUMBER: ${{ github.event_name == 'workflow_run' && steps.query_spec.outputs.issue_number || github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Skip if workflow_run didn't find a spec
          if [ "${{ github.event_name }}" = "workflow_run" ] && [ "${{ steps.query_spec.outputs.found }}" != "true" ]; then
            echo "Skipping: no in-progress spec found"
            exit 0
          fi

          # Extract TDD branch from issue body or comment using env vars to avoid bash expansion
          # Look for tdd/spec-* pattern in issue body first, then comment
          BRANCH=$(echo "$ISSUE_BODY" | grep -o 'tdd/spec-[A-Z-]*[0-9]*' | head -1 || true)

          if [ -z "$BRANCH" ]; then
            BRANCH=$(echo "$COMMENT_BODY" | grep -o 'tdd/spec-[A-Z-]*[0-9]*' | head -1 || true)
          fi

          if [ -n "$BRANCH" ]; then
            echo "Found TDD branch: $BRANCH"

            # Check if branch exists remotely
            if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
              echo "✅ Branch $BRANCH exists, checking out..."
              git fetch origin "$BRANCH"
              git checkout "$BRANCH"
              echo "tdd_branch=$BRANCH" >> $GITHUB_OUTPUT
              echo "using_tdd_branch=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Branch $BRANCH does not exist remotely, staying on main"
              echo "using_tdd_branch=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No TDD branch found in issue, staying on main"
            echo "using_tdd_branch=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # For workflow_run: Provide prompt to trigger action
          # For comment-triggered events: Action uses @claude mention (prompt ignored)
          prompt: ${{ github.event_name == 'workflow_run' && 'Please implement the spec in this issue. The TDD branch is already checked out. Follow the e2e-test-fixer agent workflow run the test to see what fails implement minimal code validate all tests pass then commit and push.' || 'default' }}

          # Explicit agent specification ensures e2e-test-fixer agent is used for TDD automation
          # The agent has complete TDD instructions:
          # - Test-first approach (run spec test to see what fails)
          # - Minimal implementation following best practices
          # - Validation (spec test → regression → quality checks)
          # - Git operations (commit and push when all tests pass)
          claude_args: '--agents e2e-test-fixer'

      - name: Record workflow duration
        if: always()
        run: |
          START_TIME="${{ steps.start_time.outputs.timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "⏱️  Workflow duration: ${DURATION}s ($((DURATION / 60))m $((DURATION % 60))s)"

          # Log for metrics collection (future enhancement)
          echo "WORKFLOW=claude DURATION=${DURATION}s" >> $GITHUB_STEP_SUMMARY
