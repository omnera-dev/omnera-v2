name: TDD Queue - Populate (Scan for RED tests with .fixme)

on:
  # Trigger on push to main (when new tests are added)
  push:
    branches:
      - main
    paths:
      - 'specs/**/*.spec.ts'

  # Scheduled runs - Every 4 hours (reduced from 15 minutes)
  # Rationale: Populate is now 15-30x faster with parallel batching
  # + Push trigger handles new tests immediately
  # + Processor runs every 15 min to pick up queued specs
  schedule:
    - cron: '0 */4 * * *'

  # Manual trigger
  workflow_dispatch:
    inputs:
      force:
        description: 'Force populate even if no new tests'
        required: false
        default: false
        type: boolean

# Security: Define minimal required permissions
permissions:
  contents: read
  issues: write

# Allow concurrent population (idempotent - skips duplicates)
concurrency:
  group: tdd-queue-populate
  cancel-in-progress: true

env:
  BUN_VERSION: '1.3.1'

jobs:
  populate-queue:
    name: 📝 Populate TDD Queue (RED tests only)
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Prevent 6-hour hangs (scan + validation + bulk issue creation)

    steps:
      - name: Record start time
        id: start_time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Scan for RED tests with .fixme()
        id: scan
        run: |
          echo "🔍 Scanning for RED tests with test.fixme() patterns..."
          echo "Note: GREEN tests (passing) and test.skip() are excluded"
          bun run scripts/tdd-automation/queue-manager.ts scan
        env:
          GITHUB_OUTPUT: ${{ github.output }}

      - name: Validate schemas for scanned specs
        id: validate
        run: |
          echo "🔍 Validating JSON Schema files for scanned specs..."
          bun run scripts/tdd-automation/validate-schemas-for-specs.ts
        continue-on-error: false

      - name: Analyze spec dependencies
        id: dependencies
        run: |
          echo "🔗 Analyzing spec dependencies..."
          bun run scripts/tdd-automation/analyze-spec-dependencies.ts
        continue-on-error: false

      - name: Check if queue needs population
        id: check
        run: |
          TOTAL_SPECS=$(cat .github/tdd-queue-scan.json | jq -r '.totalSpecs')
          echo "total_specs=$TOTAL_SPECS" >> $GITHUB_OUTPUT

          if [ "$TOTAL_SPECS" -eq "0" ]; then
            echo "📭 No specs with fixme found"
            echo "should_populate=false" >> $GITHUB_OUTPUT
          else
            echo "📊 Found $TOTAL_SPECS specs with fixme"
            echo "should_populate=true" >> $GITHUB_OUTPUT
          fi

      - name: Check GitHub API rate limit
        if: steps.check.outputs.should_populate == 'true'
        id: rate_limit
        run: |
          REMAINING=$(gh api rate_limit --jq '.rate.remaining')
          LIMIT=$(gh api rate_limit --jq '.rate.limit')
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT

          echo "⏱️  GitHub API: $REMAINING/$LIMIT requests remaining"

          if [ "$REMAINING" -lt 100 ]; then
            echo "::error::Rate limit too low: $REMAINING requests remaining (need 100+ for bulk operations)"
            exit 1
          fi

          echo "✅ Rate limit OK for bulk issue creation"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Populate queue with spec issues
        if: steps.check.outputs.should_populate == 'true'
        run: |
          echo "📝 Creating spec issues (skipping duplicates)..."
          bun run scripts/tdd-automation/queue-manager.ts populate
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Display queue status
        if: always()
        run: |
          echo "📊 Current queue status:"
          bun run scripts/tdd-automation/queue-manager.ts status
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Record workflow duration
        if: always()
        run: |
          START_TIME="${{ steps.start_time.outputs.timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "⏱️  Workflow duration: ${DURATION}s ($((DURATION / 60))m $((DURATION % 60))s)"

          # Log for metrics collection (future enhancement)
          echo "WORKFLOW=tdd-queue-populate DURATION=${DURATION}s" >> $GITHUB_STEP_SUMMARY
