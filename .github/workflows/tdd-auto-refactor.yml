name: TDD Auto-Refactor Pipeline

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to refactor'
        required: true
        type: string
      branch_name:
        description: 'Branch name to refactor'
        required: true
        type: string

  # Triggered by comment in PR
  issue_comment:
    types: [created]

# Security: Define minimal required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

# Prevent concurrent refactoring
concurrency:
  group: tdd-refactor
  cancel-in-progress: false

jobs:
  # Job 1: Check if refactoring is needed
  check-trigger:
    name: üîç Check refactoring trigger
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_dispatch') ||
      (github.event.issue.pull_request &&
       contains(github.event.comment.body, '/tdd-refactor') &&
       contains(github.event.issue.labels.*.name, 'tdd-automation'))
    outputs:
      should_refactor: ${{ steps.check.outputs.should_refactor }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      branch_name: ${{ steps.check.outputs.branch_name }}

    steps:
      - name: Get PR details
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, branchName;

            if (context.eventName === 'workflow_dispatch') {
              // Manual trigger
              prNumber = '${{ github.event.inputs.pr_number }}';
              branchName = '${{ github.event.inputs.branch_name }}';
            } else {
              // Comment trigger
              prNumber = context.issue.number;

              // Get PR details
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              branchName = pr.data.head.ref;
            }

            console.log(`PR #${prNumber}, Branch: ${branchName}`);

            // Check if PR has tdd-automation label
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const hasTddLabel = pr.data.labels.some(l => l.name === 'tdd-automation');
            const isReadyForReview = pr.data.labels.some(l => l.name === 'ready-for-review');

            if (!hasTddLabel) {
              console.log('PR does not have tdd-automation label');
              core.setOutput('should_refactor', 'false');
              return;
            }

            if (!isReadyForReview) {
              console.log('PR is not ready for review yet');
              core.setOutput('should_refactor', 'false');
              return;
            }

            core.setOutput('should_refactor', 'true');
            core.setOutput('pr_number', prNumber);
            core.setOutput('branch_name', branchName);

  # Job 2: Create refactoring issue for Claude
  setup-refactoring:
    name: üöÄ Setup refactoring
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should_refactor == 'true'
    outputs:
      issue_number: ${{ steps.issue.outputs.issue_number }}

    steps:
      - name: Create refactoring issue
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.check-trigger.outputs.pr_number }}';
            const branchName = '${{ needs.check-trigger.outputs.branch_name }}';

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Get commits in PR
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const commitList = commits.data
              .map(c => `- ${c.sha.substring(0, 7)}: ${c.commit.message.split('\n')[0]}`)
              .join('\n');

            // Get changed files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const changedFiles = files.data
              .filter(f => f.filename.startsWith('src/'))
              .map(f => `- ${f.filename} (+${f.additions} -${f.deletions})`)
              .join('\n');

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîß Refactor: Optimize PR #${prNumber}`,
              body: `## üîß Automated Refactoring Task

              ### Context
              - **PR to refactor:** #${prNumber}
              - **Branch:** \`${branchName}\`
              - **Triggered by:** @${context.actor}

              ### Instructions for @claude

              Please run the codebase-refactor-auditor agent to optimize the recent implementation:

              1. **Checkout the branch:**
                 \`\`\`bash
                 git checkout ${branchName}
                 \`\`\`

              2. **Establish baseline:**
                 \`\`\`bash
                 # Record current test results
                 bun test:e2e --grep @spec > baseline-spec.txt
                 bun test:e2e --grep @regression > baseline-regression.txt
                 \`\`\`

              3. **Run the codebase-refactor-auditor agent:**
                 Use the Task tool with \`subagent_type="codebase-refactor-auditor"\` to:
                 - Analyze recent commits for code duplication
                 - Refactor to eliminate redundancy
                 - Follow Omnera patterns (Effect.ts, layer architecture)
                 - Ensure DRY principles

              4. **Validate refactoring:**
                 \`\`\`bash
                 # Ensure tests still pass
                 bun test:e2e --grep @spec
                 bun test:e2e --grep @regression

                 # Check code quality
                 bun run lint && bun run typecheck
                 \`\`\`

              5. **Commit refactoring changes:**
                 \`\`\`bash
                 bun run license  # Add copyright headers
                 git add -A
                 git commit -m "refactor: optimize implementation from PR #${prNumber}

                 - Eliminated code duplication
                 - Applied DRY principles
                 - Maintained test baseline
                 - Improved code organization"
                 \`\`\`

              ### Recent Commits to Analyze
              ${commitList}

              ### Changed Files
              ${changedFiles}

              ### Success Criteria
              - ‚úÖ All tests pass (baseline maintained)
              - ‚úÖ Code duplication eliminated
              - ‚úÖ DRY principles applied
              - ‚úÖ TypeScript and ESLint pass
              - ‚úÖ No functionality changes

              ### Progress Tracking
              - [ ] Baseline established
              - [ ] Code analyzed
              - [ ] Refactoring applied
              - [ ] Tests validated
              - [ ] Changes committed

              ---
              *This issue was created automatically by the TDD refactoring pipeline.*`,
              labels: ['tdd-automation', 'refactoring', 'in-progress']
            });

            core.setOutput('issue_number', issue.data.number);
            console.log(`Created refactoring issue #${issue.data.number}`);

            // Add comment to PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## üîß Refactoring Started

              I've initiated the automated refactoring process for this PR.

              - **Refactoring issue:** #${issue.data.number}
              - **Status:** ‚è≥ In progress...

              Claude Code will now analyze the implementation and apply optimizations while maintaining all test baselines.`
            });

  # Job 3: Wait for Claude to complete refactoring
  wait-for-refactoring:
    name: ‚è≥ Wait for refactoring
    runs-on: ubuntu-latest
    needs: [check-trigger, setup-refactoring]
    if: needs.setup-refactoring.outputs.issue_number
    timeout-minutes: 45

    steps:
      - name: Wait for Claude Code refactoring
        run: |
          echo "‚è≥ Waiting for Claude Code to complete refactoring..."
          echo ""
          echo "Claude should:"
          echo "1. Run the codebase-refactor-auditor agent"
          echo "2. Eliminate code duplication"
          echo "3. Ensure tests still pass"
          echo "4. Commit refactoring changes"
          echo ""

          BRANCH="${{ needs.check-trigger.outputs.branch_name }}"
          MAX_ATTEMPTS=20  # 45 minutes max
          ATTEMPT=0

          # Get initial commit count
          INITIAL_COMMITS=$(gh api repos/${{ github.repository }}/commits?sha=$BRANCH --jq 'length')

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Check $ATTEMPT/$MAX_ATTEMPTS..."

            # Check for new commits
            CURRENT_COMMITS=$(gh api repos/${{ github.repository }}/commits?sha=$BRANCH --jq 'length')

            if [ "$CURRENT_COMMITS" -gt "$INITIAL_COMMITS" ]; then
              echo "‚úÖ Found new commits!"

              # Get latest commit
              LATEST_COMMIT=$(gh api repos/${{ github.repository }}/commits/$BRANCH --jq '.commit.message')
              echo "Latest commit: $LATEST_COMMIT"

              if [[ "$LATEST_COMMIT" == *"refactor:"* ]]; then
                echo "‚úÖ Refactoring complete!"
                break
              fi
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "‚è±Ô∏è Timeout waiting for refactoring"
              exit 1
            fi

            echo "Waiting 2 minutes before next check..."
            sleep 120
          done
        env:
          GH_TOKEN: ${{ github.token }}

  # Job 4: Validate refactoring
  validate-refactoring:
    name: ‚úÖ Validate refactoring
    runs-on: ubuntu-latest
    needs: [check-trigger, setup-refactoring, wait-for-refactoring]
    if: success()
    # Security: Read-only permissions for untrusted PR code
    permissions:
      contents: read

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-trigger.outputs.branch_name }}
          fetch-depth: 0
          persist-credentials: false  # Security: Prevent credential access from untrusted PR code

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.3.0'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run all tests
        id: tests
        run: |
          echo "üß™ Running all tests to validate refactoring..."

          # Run spec tests
          if ! bun test:e2e --grep @spec; then
            echo "‚ùå Spec tests failed after refactoring!"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Run regression tests
          if ! bun test:e2e:regression; then
            echo "‚ùå Regression tests failed after refactoring!"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "‚úÖ All tests pass after refactoring!"
          echo "success=true" >> $GITHUB_OUTPUT

      - name: Check code quality
        if: steps.tests.outputs.success == 'true'
        run: |
          echo "üîç Checking code quality..."
          bun run lint
          bun run typecheck

      - name: Calculate metrics
        id: metrics
        if: steps.tests.outputs.success == 'true'
        run: |
          # Get diff stats for refactoring commit
          REFACTOR_COMMIT=$(git log --format="%H" --grep="^refactor:" -1)

          if [ ! -z "$REFACTOR_COMMIT" ]; then
            STATS=$(git diff --shortstat $REFACTOR_COMMIT^..$REFACTOR_COMMIT)
            echo "Refactoring stats: $STATS"

            # Extract numbers
            INSERTIONS=$(echo "$STATS" | grep -o '[0-9]* insertion' | grep -o '[0-9]*' || echo "0")
            DELETIONS=$(echo "$STATS" | grep -o '[0-9]* deletion' | grep -o '[0-9]*' || echo "0")

            echo "insertions=$INSERTIONS" >> $GITHUB_OUTPUT
            echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT

            # Calculate reduction percentage
            if [ "$DELETIONS" -gt "$INSERTIONS" ]; then
              REDUCTION=$((DELETIONS - INSERTIONS))
              echo "reduction=$REDUCTION" >> $GITHUB_OUTPUT
              echo "üìâ Code reduced by $REDUCTION lines"
            else
              echo "reduction=0" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update PR with refactoring results
        if: always()
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ needs.check-trigger.outputs.pr_number }}
          TEST_SUCCESS: ${{ steps.tests.outputs.success }}
          INSERTIONS: ${{ steps.metrics.outputs.insertions }}
          DELETIONS: ${{ steps.metrics.outputs.deletions }}
          REDUCTION: ${{ steps.metrics.outputs.reduction }}
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const success = process.env.TEST_SUCCESS === 'true';
            const insertions = process.env.INSERTIONS || '0';
            const deletions = process.env.DELETIONS || '0';
            const reduction = process.env.REDUCTION || '0';

            const comment = success
              ? `## ‚úÖ Refactoring Complete!

              ### üìä Refactoring Metrics
              - **Lines added:** +${insertions}
              - **Lines removed:** -${deletions}
              - **Net reduction:** ${reduction} lines
              - **All tests passing:** ‚úÖ
              - **Code quality:** ‚úÖ

              The refactoring has been successfully applied. The code is now cleaner and more maintainable while preserving all functionality.`
              : `## ‚ùå Refactoring Validation Failed

              The refactoring caused test failures. This should not happen - the refactoring may need to be reverted.

              [View workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            // Update labels
            if (success) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['refactored']
              });
            } else {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['refactoring-failed']
              });
            }

      - name: Close refactoring issue
        if: steps.tests.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: '${{ needs.setup-refactoring.outputs.issue_number }}',
              state: 'closed',
              state_reason: 'completed'
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: '${{ needs.setup-refactoring.outputs.issue_number }}',
              body: `‚úÖ Refactoring completed successfully! Updated PR #${{ needs.check-trigger.outputs.pr_number }}`
            });
