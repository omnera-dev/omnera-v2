name: Claude Code

# Security & Rate Limiting Strategy:
# - Only OWNER/MEMBER/COLLABORATOR and github-actions bot can invoke @claude
# - GitHub Actions bot accepted in multiple formats: github-actions[bot], github-actions, app/github-actions
# - Concurrency control prevents duplicate runs on same issue/PR
# - Queue system (TDD automation) processes ~96 specs/day (every 15 min)
# - No artificial rate limits - concurrency groups provide natural throttling
# - External contributors CANNOT trigger this workflow (blocked by author_association check)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

# Concurrency control: Prevent duplicate runs for the same issue/PR + sender
# Each issue/PR + sender gets its own concurrency group to prevent:
# - User-triggered workflows from being canceled by bot-triggered workflows
# - Multiple bot comments from canceling each other
# This allows queue system to process multiple specs in parallel without interference
concurrency:
  group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}-${{ github.event.sender.login || github.event.sender.type || 'unknown' }}
  cancel-in-progress: true

jobs:
  claude:
    # Security: Only allow trusted users and github-actions[bot] (TDD automation)
    # Exclude claude[bot] to prevent self-triggering and cancellation loops
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
        (github.event_name == 'workflow_dispatch')
      ) && (
        github.event_name == 'workflow_dispatch' ||
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR' ||
        github.event.issue.author_association == 'OWNER' ||
        github.event.issue.author_association == 'MEMBER' ||
        github.event.issue.author_association == 'COLLABORATOR' ||
        github.event.review.author_association == 'OWNER' ||
        github.event.review.author_association == 'MEMBER' ||
        github.event.review.author_association == 'COLLABORATOR' ||
        github.event.sender.login == 'github-actions[bot]' ||
        github.event.sender.login == 'github-actions' ||
        github.event.sender.login == 'app/github-actions' ||
        github.event.issue.user.login == 'github-actions[bot]' ||
        github.event.issue.user.login == 'github-actions' ||
        github.event.issue.user.login == 'app/github-actions' ||
        github.event.comment.user.login == 'github-actions[bot]' ||
        github.event.comment.user.login == 'github-actions' ||
        github.event.comment.user.login == 'app/github-actions'
      ) && (
        github.event.sender.login != 'claude[bot]'
      )
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Claude Code implementation can take time (complex specs)
    permissions:
      contents: write # Need write to push to TDD branches
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Record start time
        id: start_time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to checkout branches

      - name: Extract and checkout TDD branch if specified
        id: branch
        if: github.event_name == 'issue_comment' || github.event_name == 'issues' || github.event_name == 'workflow_dispatch'
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number || github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # For workflow_dispatch, fetch issue body via gh CLI
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_BODY=$(gh issue view "$ISSUE_NUMBER" --json body --jq '.body')
            COMMENT_BODY=""
          fi

          # Extract TDD branch from issue body or comment using env vars to avoid bash expansion
          # Look for tdd/spec-* pattern in issue body first, then comment
          BRANCH=$(echo "$ISSUE_BODY" | grep -o 'tdd/spec-[A-Z-]*[0-9]*' | head -1 || true)

          if [ -z "$BRANCH" ]; then
            BRANCH=$(echo "$COMMENT_BODY" | grep -o 'tdd/spec-[A-Z-]*[0-9]*' | head -1 || true)
          fi

          if [ -n "$BRANCH" ]; then
            echo "Found TDD branch: $BRANCH"

            # Check if branch exists remotely
            if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
              echo "✅ Branch $BRANCH exists, checking out..."
              git fetch origin "$BRANCH"
              git checkout "$BRANCH"
              echo "tdd_branch=$BRANCH" >> $GITHUB_OUTPUT
              echo "using_tdd_branch=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Branch $BRANCH does not exist remotely, staying on main"
              echo "using_tdd_branch=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No TDD branch found in issue, staying on main"
            echo "using_tdd_branch=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Custom prompt for TDD automation - ensures validation before pushing
          prompt: |
            You are working on TDD automation. Follow this workflow EXACTLY:

            1. **Read the issue** to identify:
               - Spec ID (e.g., APP-BLOCKS-001)
               - Test file path (e.g., specs/app/blocks/blocks.spec.ts)
               - TDD branch name (e.g., tdd/spec-APP-BLOCKS-001)

            2. **Run the spec test FIRST** to see what fails:
               ```bash
               CLAUDECODE=1 bun test:e2e "<test-file>" --grep "<SPEC-ID>"
               ```

            3. **Implement minimal code** following the e2e-test-fixer agent workflow:
               - Remove test.fixme() from the specific test
               - Check if domain schemas exist (create via effect-schema-generator skill if needed)
               - Write minimal but correct code in src/
               - Follow all architectural and infrastructure best practices

            4. **Run the spec test AGAIN** to verify it passes:
               ```bash
               CLAUDECODE=1 bun test:e2e "<test-file>" --grep "<SPEC-ID>"
               ```

            5. **If test still fails**, iterate steps 3-4 until GREEN

            6. **Run regression tests** to ensure no breaking changes:
               ```bash
               CLAUDECODE=1 bun test:e2e:regression
               ```

            7. **Quality checks run automatically** via hooks (no manual action needed)

            8. **Only commit and push when**:
               - ✅ Spec test passes
               - ✅ Regression tests pass
               - ✅ Quality checks pass (eslint, typecheck, prettier)

            **CRITICAL**: DO NOT push changes until ALL validation passes. Iterate on implementation until everything is GREEN.

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          # NOTE: Explicit agent specification ensures e2e-test-fixer agent is used for TDD automation
          claude_args: '--agents e2e-test-fixer'

      - name: Record workflow duration
        if: always()
        run: |
          START_TIME="${{ steps.start_time.outputs.timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "⏱️  Workflow duration: ${DURATION}s ($((DURATION / 60))m $((DURATION % 60))s)"

          # Log for metrics collection (future enhancement)
          echo "WORKFLOW=claude DURATION=${DURATION}s" >> $GITHUB_STEP_SUMMARY
