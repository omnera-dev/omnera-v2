name: Claude Code

# Security & Rate Limiting Strategy:
# - Only OWNER/MEMBER/COLLABORATOR and github-actions[bot] can invoke @claude
# - Concurrency control prevents duplicate runs on same issue/PR
# - Queue system (TDD automation) processes ~96 specs/day (every 15 min)
# - No artificial rate limits - concurrency groups provide natural throttling
# - External contributors CANNOT trigger this workflow (blocked by author_association check)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# Concurrency control: Prevent duplicate runs for the same issue/PR + sender
# Each issue/PR + sender gets its own concurrency group to prevent:
# - User-triggered workflows from being canceled by bot-triggered workflows
# - Multiple bot comments from canceling each other
# This allows queue system to process multiple specs in parallel without interference
concurrency:
  group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}-${{ github.event.sender.login || github.event.sender.type || 'unknown' }}
  cancel-in-progress: true

jobs:
  claude:
    # Security: Only allow trusted users and github-actions[bot] (TDD automation)
    # Exclude claude[bot] to prevent self-triggering and cancellation loops
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      ) && (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR' ||
        github.event.issue.author_association == 'OWNER' ||
        github.event.issue.author_association == 'MEMBER' ||
        github.event.issue.author_association == 'COLLABORATOR' ||
        github.event.review.author_association == 'OWNER' ||
        github.event.review.author_association == 'MEMBER' ||
        github.event.review.author_association == 'COLLABORATOR' ||
        github.event.sender.login == 'github-actions[bot]' ||
        github.event.sender.login == 'github-actions' ||
        github.event.issue.user.login == 'github-actions[bot]' ||
        github.event.issue.user.login == 'github-actions' ||
        github.event.comment.user.login == 'github-actions[bot]' ||
        github.event.comment.user.login == 'github-actions'
      ) && (
        github.event.sender.login != 'claude[bot]'
      )
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Claude Code implementation can take time (complex specs)
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Record start time
        id: start_time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Give a custom prompt to Claude. If this is not specified, Claude will perform the instructions specified in the comment that tagged it.
          # prompt: 'Update the pull request description to include a summary of changes.'

          # Optional: Add claude_args to customize behavior and configuration
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          # NOTE: Explicit agent specification ensures e2e-test-fixer agent is used for TDD automation
          # If --agent flag is not supported, Claude Code will rely on convention (branch pattern tdd/spec-*)
          claude_args: '--agent e2e-test-fixer'

      - name: Record workflow duration
        if: always()
        run: |
          START_TIME="${{ steps.start_time.outputs.timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "⏱️  Workflow duration: ${DURATION}s ($((DURATION / 60))m $((DURATION % 60))s)"

          # Log for metrics collection (future enhancement)
          echo "WORKFLOW=claude DURATION=${DURATION}s" >> $GITHUB_STEP_SUMMARY
