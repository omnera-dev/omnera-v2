name: TDD Queue - Processor

on:
  # Scheduled runs - Every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Manual trigger
  workflow_dispatch:

# Security: Define minimal required permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

# Prevent concurrent processing (strict serial: one spec at a time)
concurrency:
  group: tdd-queue-processor
  cancel-in-progress: false

env:
  BUN_VERSION: '1.3.1'

jobs:
  process-queue:
    name: üîÑ Process TDD Queue
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get next spec from queue
        id: next
        run: |
          echo "üîç Looking for next spec to process..."
          bun run scripts/tdd-automation/queue-manager.ts next
        env:
          GITHUB_OUTPUT: ${{ github.output }}
          GH_TOKEN: ${{ github.token }}

      - name: Check if spec available
        id: check
        run: |
          if [ "${{ steps.next.outputs.has_next }}" != "true" ]; then
            echo "üì≠ No specs available to process"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found spec to process: ${{ steps.next.outputs.spec_id }}"
            echo "should_process=true" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for spec
        if: steps.check.outputs.should_process == 'true'
        run: |
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üåø Creating branch: $BRANCH_NAME"

          # Ensure we're on main and up-to-date
          git checkout main
          git pull origin main

          # Delete branch if it exists
          git branch -D "$BRANCH_NAME" 2>/dev/null || true
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create new branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

          echo "‚úÖ Branch created: $BRANCH_NAME"

      # Note: PR creation skipped due to GitHub Actions limitation
      # GitHub Actions cannot create PRs with default GITHUB_TOKEN
      # Claude Code will create PR when implementing, or validation runs on branch directly

      - name: Mark spec as in-progress
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üèÉ Marking issue #$ISSUE_NUMBER as in-progress..."

          # Update labels
          gh issue edit "$ISSUE_NUMBER" --remove-label "tdd-spec:queued"
          gh issue edit "$ISSUE_NUMBER" --add-label "tdd-spec:in-progress"

          # Add comment with branch info
          gh issue comment "$ISSUE_NUMBER" --body "üöÄ **Processing started**

          - **Branch**: \`$BRANCH_NAME\`
          - **Checkout**: \`git checkout $BRANCH_NAME\`

          Waiting for implementation. Validation will run automatically on commit to this branch."

          echo "‚úÖ Issue updated"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Auto-invoke Claude Code
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          TEST_FILE="${{ steps.next.outputs.test_file }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "ü§ñ Auto-invoking Claude Code with e2e-test-fixer agent for spec $SPEC_ID..."

          gh issue comment "$ISSUE_NUMBER" --body "@claude Please use the **e2e-test-fixer** agent to implement this spec.

          ## ü§ñ TDD Pipeline - Automated Implementation Request

          **Spec ID**: \`$SPEC_ID\`
          **Test File**: \`$TEST_FILE\`
          **Branch**: \`$BRANCH_NAME\`

          ### Agent Context

          The **e2e-test-fixer** agent provides:
          - ‚úÖ Complete TDD workflow with RED‚ÜíGREEN cycle
          - ‚úÖ Autonomous schema creation via **effect-schema-generator** skill
          - ‚úÖ Pipeline mode support (non-interactive execution)
          - ‚úÖ Minimal but correct implementation following Omnera architecture
          - ‚úÖ Layer-based architecture compliance (Domain/Application/Infrastructure)
          - ‚úÖ Effect.ts patterns for side effects
          - ‚úÖ Automatic quality checks and validation

          ### Implementation Steps

          1. **Checkout the branch**:
             \`\`\`bash
             git checkout $BRANCH_NAME
             \`\`\`

          2. **Implement the spec** following e2e-test-fixer workflow:
             - Read test file: \`$TEST_FILE\`
             - Find test with spec ID: \`$SPEC_ID\`
             - Remove \`.fixme()\` from the test
             - Check if Domain schemas exist (invoke **effect-schema-generator** skill if missing)
             - Implement minimal code in correct architectural layer
             - Verify test passes: \`bun test:e2e \"$TEST_FILE\" --grep \"$SPEC_ID\"\`
             - Run regression tests: \`bun test:e2e:regression\`

          3. **Commit and push**:
             \`\`\`bash
             bun run license  # Add copyright headers
             git add -A
             git commit -m \"fix: implement $SPEC_ID\"
             git push
             \`\`\`

          ### Pipeline Mode Indicators

          You are operating in **automated pipeline mode**:
          - Branch pattern: \`tdd/spec-*\` ‚úì
          - Environment: \`CLAUDECODE=1\` ‚úì
          - Issue template: TDD automation ‚úì

          **Behavior**: Non-interactive execution, autonomous decisions, minimal implementation.

          ### Skills Available

          - **effect-schema-generator**: Invoke automatically if Domain schemas are missing
          - See \`@.claude/agents/e2e-test-fixer.md\` for complete workflow

          ### Validation

          Push triggers automatic validation:
          - Specific spec test must pass
          - Regression tests must pass
          - Code quality checks must pass
          - Auto-merge on success

          ---

          *Automated request from TDD queue processor. See workflow: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*"

          echo "‚úÖ Auto-comment posted to issue #$ISSUE_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Post workflow run link
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "üìé Posting workflow run link to issue #$ISSUE_NUMBER..."

          gh issue comment "$ISSUE_NUMBER" --body "ü§ñ **TDD Queue Processor**

          Claude Code has been invoked for spec **$SPEC_ID**.

          üìä **Monitor progress**: [View workflow run]($RUN_URL)

          ---

          *Automated comment from TDD queue processor*"

          echo "‚úÖ Workflow run link posted"
        env:
          GH_TOKEN: ${{ github.token }}
