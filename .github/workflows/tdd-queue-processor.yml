name: TDD Queue - Processor

on:
  # Scheduled runs - Every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Manual trigger
  workflow_dispatch:

# Security: Define minimal required permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

# Prevent concurrent processing (strict serial: one spec at a time)
concurrency:
  group: tdd-queue-processor
  cancel-in-progress: false

env:
  BUN_VERSION: '1.3.1'

jobs:
  process-queue:
    name: üîÑ Process TDD Queue
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get next spec from queue
        id: next
        run: |
          echo "üîç Looking for next spec to process..."
          bun run scripts/tdd-automation/queue-manager.ts next
        env:
          GITHUB_OUTPUT: ${{ github.output }}
          GH_TOKEN: ${{ github.token }}

      - name: Check if spec available
        id: check
        run: |
          if [ "${{ steps.next.outputs.has_next }}" != "true" ]; then
            echo "üì≠ No specs available to process"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found spec to process: ${{ steps.next.outputs.spec_id }}"
            echo "should_process=true" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for spec
        if: steps.check.outputs.should_process == 'true'
        run: |
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üåø Creating branch: $BRANCH_NAME"

          # Ensure we're on main and up-to-date
          git checkout main
          git pull origin main

          # Delete branch if it exists
          git branch -D "$BRANCH_NAME" 2>/dev/null || true
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create new branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

          echo "‚úÖ Branch created: $BRANCH_NAME"

      # Note: PR creation skipped due to GitHub Actions limitation
      # GitHub Actions cannot create PRs with default GITHUB_TOKEN
      # Claude Code will create PR when implementing, or validation runs on branch directly

      - name: Mark spec as in-progress and invoke Claude Code
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          TEST_FILE="${{ steps.next.outputs.test_file }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üèÉ Marking issue #$ISSUE_NUMBER as in-progress and invoking Claude Code..."

          # Update labels
          gh issue edit "$ISSUE_NUMBER" --remove-label "tdd-spec:queued"
          gh issue edit "$ISSUE_NUMBER" --add-label "tdd-spec:in-progress"

          # Post single combined comment
          gh issue comment "$ISSUE_NUMBER" --body "üöÄ **Processing started** - @claude please implement this spec using the **e2e-test-fixer** agent.

          **Branch**: \`$BRANCH_NAME\` (already created and checked out)
          **Test File**: \`$TEST_FILE\`
          **Spec ID**: \`$SPEC_ID\`

          **Quick Start**:
          1. Checkout branch: \`git checkout $BRANCH_NAME\`
          2. Remove \`.fixme()\` from test \`$SPEC_ID\`
          3. Implement minimal code following Omnera architecture
          4. Commit and push (validation runs automatically)

          **Complete workflow**: See \`@docs/development/tdd-automation-pipeline.md\`

          ---
          *Automated from TDD queue processor ‚Ä¢ [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*"

          echo "‚úÖ Issue updated and Claude Code invoked"
        env:
          GH_TOKEN: ${{ github.token }}
