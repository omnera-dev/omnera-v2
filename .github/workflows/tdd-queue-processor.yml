name: TDD Queue - Processor

on:
  # Scheduled runs - Every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Manual trigger
  workflow_dispatch:

# Security: Define minimal required permissions
# NOTE: Requires GH_PAT_WORKFLOW secret with 'repo' scope to post @claude mentions
# Comments posted with PAT appear from token owner's account (not github-actions bot)
# This triggers Claude Code workflow via issue_comment event
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

# Prevent concurrent processing (strict serial: one spec at a time)
concurrency:
  group: tdd-queue-processor
  cancel-in-progress: false

env:
  BUN_VERSION: '1.3.1'

jobs:
  process-queue:
    name: üîÑ Process TDD Queue
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Quick operation: fetch queue, create branch, post comment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure git with token user
        run: |
          USER_NAME=$(gh api user --jq '.login')
          USER_EMAIL=$(gh api user --jq '.email')
          git config user.name "$USER_NAME"
          git config user.email "$USER_EMAIL"
          echo "‚úÖ Git configured as $USER_NAME <$USER_EMAIL>"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_WORKFLOW }}

      - name: Get next spec from queue
        id: next
        run: |
          echo "üîç Looking for next spec to process..."
          bun run scripts/tdd-automation/queue-manager.ts next
        env:
          GITHUB_OUTPUT: ${{ github.output }}
          GH_TOKEN: ${{ secrets.GH_PAT_WORKFLOW || github.token }}

      - name: Check if spec available
        id: check
        run: |
          if [ "${{ steps.next.outputs.has_next }}" != "true" ]; then
            echo "üì≠ No specs available to process"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found spec to process: ${{ steps.next.outputs.spec_id }}"
            echo "should_process=true" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for spec
        if: steps.check.outputs.should_process == 'true'
        run: |
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üåø Creating branch: $BRANCH_NAME"

          # Ensure we're on main and up-to-date
          git checkout main
          git pull origin main

          # Delete branch if it exists
          git branch -D "$BRANCH_NAME" 2>/dev/null || true
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create new branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

          echo "‚úÖ Branch created: $BRANCH_NAME"

      # Note: PR creation skipped due to GitHub Actions limitation
      # GitHub Actions cannot create PRs with default GITHUB_TOKEN
      # Claude Code will create PR when implementing, or validation runs on branch directly

      - name: Mark spec as in-progress and trigger Claude Code via @mention
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          TEST_FILE="${{ steps.next.outputs.test_file }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üèÉ Marking issue #$ISSUE_NUMBER as in-progress..."

          # Update labels
          gh issue edit "$ISSUE_NUMBER" --remove-label "tdd-spec:queued"
          gh issue edit "$ISSUE_NUMBER" --add-label "tdd-spec:in-progress"

          # Trigger Claude Code via @claude mention (using user's PAT)
          # This posts a comment from the token owner's account, which triggers the workflow
          echo "ü§ñ Triggering Claude Code via @claude mention..."
          gh issue comment "$ISSUE_NUMBER" --body "@claude please implement this spec.

          **Branch**: \`$BRANCH_NAME\` ‚Üê Work on this existing branch
          **Test File**: \`$TEST_FILE\`
          **Spec ID**: \`$SPEC_ID\`

          Follow the e2e-test-fixer agent workflow:
          1. Checkout branch \`$BRANCH_NAME\`
          2. Remove \`.fixme()\` from test \`$SPEC_ID\`
          3. Run tests to see what fails
          4. Implement minimal code
          5. Validate all tests pass
          6. Commit and push when GREEN

          Validation runs automatically on push.

          ---
          *ü§ñ Automated via [Queue Processor](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*"

          echo "‚úÖ Issue updated and @claude mentioned - Claude Code will trigger automatically"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_WORKFLOW || github.token }}
