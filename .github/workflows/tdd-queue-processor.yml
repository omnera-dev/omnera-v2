name: TDD Queue - Processor

on:
  # Scheduled runs - Every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Manual trigger
  workflow_dispatch:

# Security: Define minimal required permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

# Prevent concurrent processing (strict serial: one spec at a time)
concurrency:
  group: tdd-queue-processor
  cancel-in-progress: false

env:
  BUN_VERSION: '1.3.1'

jobs:
  process-queue:
    name: üîÑ Process TDD Queue
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get next spec from queue
        id: next
        run: |
          echo "üîç Looking for next spec to process..."
          bun run scripts/tdd-automation/queue-manager.ts next
        env:
          GITHUB_OUTPUT: ${{ github.output }}
          GH_TOKEN: ${{ github.token }}

      - name: Check if spec available
        id: check
        run: |
          if [ "${{ steps.next.outputs.has_next }}" != "true" ]; then
            echo "üì≠ No specs available to process"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Found spec to process: ${{ steps.next.outputs.spec_id }}"
            echo "should_process=true" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for spec
        if: steps.check.outputs.should_process == 'true'
        run: |
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üåø Creating branch: $BRANCH_NAME"

          # Ensure we're on main and up-to-date
          git checkout main
          git pull origin main

          # Delete branch if it exists
          git branch -D "$BRANCH_NAME" 2>/dev/null || true
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create new branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

          echo "‚úÖ Branch created: $BRANCH_NAME"

      # Note: PR creation skipped due to GitHub Actions limitation
      # GitHub Actions cannot create PRs with default GITHUB_TOKEN
      # Claude Code will create PR when implementing, or validation runs on branch directly

      - name: Mark spec as in-progress
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "üèÉ Marking issue #$ISSUE_NUMBER as in-progress..."

          # Update labels
          gh issue edit "$ISSUE_NUMBER" --remove-label "tdd-spec:queued"
          gh issue edit "$ISSUE_NUMBER" --add-label "tdd-spec:in-progress"

          # Add comment with branch info
          gh issue comment "$ISSUE_NUMBER" --body "üöÄ **Processing started**

          - **Branch**: \`$BRANCH_NAME\`
          - **Checkout**: \`git checkout $BRANCH_NAME\`

          Waiting for implementation. Validation will run automatically on commit to this branch."

          echo "‚úÖ Issue updated"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Auto-invoke Claude Code
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          TEST_FILE="${{ steps.next.outputs.test_file }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "ü§ñ Auto-invoking Claude Code for spec $SPEC_ID..."

          gh issue comment "$ISSUE_NUMBER" --body "@claude

          ## Implementation Instructions for @claude

          Please implement this E2E test spec following the TDD pipeline workflow:

          ### Steps

          1. **Checkout the branch**:
             \`\`\`bash
             git checkout $BRANCH_NAME
             \`\`\`

          2. **Read the test file** to understand requirements:
             - Test file: \`$TEST_FILE\`
             - Find the test with spec ID: \`$SPEC_ID\`

          3. **Remove \`.fixme()\`** from the test (make it active)

          4. **Implement minimal code** to make the test pass:
             - Follow the domain/application/infrastructure layer architecture
             - Use Effect.ts for side effects
             - Add proper type safety

          5. **Verify locally** (optional but recommended):
             \`\`\`bash
             bun test:e2e \"$TEST_FILE\" --grep \"$SPEC_ID\"
             \`\`\`

          6. **Commit your changes**:
             \`\`\`bash
             bun run license  # Add copyright headers
             git add -A
             git commit -m \"fix: implement $SPEC_ID\"
             \`\`\`

          7. **Push to trigger validation**:
             \`\`\`bash
             git push
             \`\`\`

          ### Pipeline Mode

          You are operating in **automated pipeline mode** (\`CLAUDECODE=1\`). This means:
          - Non-interactive execution (no questions)
          - Automatic decision-making following Omnera patterns
          - Minimal implementation (just enough to pass the test)
          - Validation runs automatically on push

          ### After Implementation

          If 3+ tests have been fixed, the \`codebase-refactor-auditor\` agent will be triggered automatically for refactoring.

          ---

          *This is an automated comment from the TDD queue system.*"

          echo "‚úÖ Auto-comment posted to issue #$ISSUE_NUMBER"
        env:
          GH_TOKEN: ${{ github.token }}
