name: TDD Queue - Processor

on:
  # Scheduled runs - Every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Manual trigger
  workflow_dispatch:

# Security: Define minimal required permissions
permissions:
  contents: write
  issues: write
  pull-requests: write

# Prevent concurrent processing (strict serial: one spec at a time)
concurrency:
  group: tdd-queue-processor
  cancel-in-progress: false

env:
  BUN_VERSION: '1.3.1'

jobs:
  process-queue:
    name: 🔄 Process TDD Queue
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Quick operation: fetch queue, create branch, post comment

    steps:
      - name: Record start time
        id: start_time
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check GitHub API rate limit
        id: rate_limit
        run: |
          REMAINING=$(gh api rate_limit --jq '.rate.remaining')
          LIMIT=$(gh api rate_limit --jq '.rate.limit')

          echo "⏱️  GitHub API: $REMAINING/$LIMIT requests remaining"

          if [ "$REMAINING" -lt 50 ]; then
            echo "::warning::Rate limit low: $REMAINING requests remaining"
            echo "::warning::Skipping queue processing to preserve API quota"
            exit 0  # Exit gracefully, will retry on next scheduled run
          fi

          echo "✅ Rate limit OK for queue processing"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get next spec from queue
        id: next
        run: |
          echo "🔍 Looking for next spec to process..."
          bun run scripts/tdd-automation/queue-manager.ts next
        env:
          GITHUB_OUTPUT: ${{ github.output }}
          GH_TOKEN: ${{ github.token }}

      - name: Check if spec available
        id: check
        run: |
          if [ "${{ steps.next.outputs.has_next }}" != "true" ]; then
            echo "📭 No specs available to process"
            echo "should_process=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Found spec to process: ${{ steps.next.outputs.spec_id }}"
            echo "should_process=true" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for spec
        if: steps.check.outputs.should_process == 'true'
        run: |
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "🌿 Creating branch: $BRANCH_NAME"

          # Ensure we're on main and up-to-date
          git checkout main
          git pull origin main

          # Delete branch if it exists
          git branch -D "$BRANCH_NAME" 2>/dev/null || true
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create new branch
          git checkout -b "$BRANCH_NAME"
          git push -u origin "$BRANCH_NAME"

          echo "✅ Branch created: $BRANCH_NAME"

      # Note: PR creation skipped due to GitHub Actions limitation
      # GitHub Actions cannot create PRs with default GITHUB_TOKEN
      # Claude Code will create PR when implementing, or validation runs on branch directly

      - name: Mark spec as in-progress and invoke Claude Code
        if: steps.check.outputs.should_process == 'true'
        run: |
          ISSUE_NUMBER="${{ steps.next.outputs.issue_number }}"
          SPEC_ID="${{ steps.next.outputs.spec_id }}"
          TEST_FILE="${{ steps.next.outputs.test_file }}"
          BRANCH_NAME="tdd/spec-$SPEC_ID"

          echo "🏃 Marking issue #$ISSUE_NUMBER as in-progress and invoking Claude Code..."

          # Update labels
          gh issue edit "$ISSUE_NUMBER" --remove-label "tdd-spec:queued"
          gh issue edit "$ISSUE_NUMBER" --add-label "tdd-spec:in-progress"

          # Trigger Claude Code via workflow_dispatch (bot comments don't trigger workflows)
          echo "🤖 Triggering Claude Code workflow for issue #$ISSUE_NUMBER..."
          gh workflow run claude.yml --ref main --field issue_number="$ISSUE_NUMBER"

          # Post status comment
          gh issue comment "$ISSUE_NUMBER" --body "🚀 **Processing started** - Claude Code triggered via workflow_dispatch.

          **Branch**: \`$BRANCH_NAME\` (already created - use this exact branch name)
          **Test File**: \`$TEST_FILE\`
          **Spec ID**: \`$SPEC_ID\`

          **IMPORTANT**: Work on the existing branch \`$BRANCH_NAME\`. Do NOT create a new branch.

          **Quick Start**:
          1. Checkout: \`git checkout $BRANCH_NAME\`
          2. Remove \`.fixme()\` from test \`$SPEC_ID\` in \`$TEST_FILE\`
          3. Implement minimal code following Omnera architecture
          4. Push to \`$BRANCH_NAME\` (validation runs automatically)

          **Complete workflow**: See \`@docs/development/tdd-automation-pipeline.md\`

          ---
          *Automated from TDD queue processor • [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          *Claude Code workflow: Check [Actions tab](https://github.com/${{ github.repository }}/actions/workflows/claude.yml) for progress*"

          echo "✅ Issue updated and Claude Code invoked"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Pipeline health check
        if: always()
        run: |
          echo "🏥 Checking pipeline health..."

          QUEUED=$(gh issue list --label "tdd-spec:queued" --json number --jq 'length')
          IN_PROGRESS=$(gh issue list --label "tdd-spec:in-progress" --json number --jq 'length')

          echo "📊 Queue Status: $QUEUED queued, $IN_PROGRESS in-progress"

          # Alert if queue appears stuck (many queued, none in-progress)
          if [ "$QUEUED" -gt 50 ] && [ "$IN_PROGRESS" -eq 0 ]; then
            echo "::warning::Queue appears stuck: $QUEUED queued specs but none in-progress"
            echo "::warning::This may indicate Claude Code integration issues"
          fi

          # Alert if multiple specs in-progress (should only be 1)
          if [ "$IN_PROGRESS" -gt 1 ]; then
            echo "::warning::Multiple specs in-progress: $IN_PROGRESS (expected max 1)"
            echo "::warning::Concurrency control may not be working correctly"
          fi

          echo "✅ Health check complete"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Record workflow duration
        if: always()
        run: |
          START_TIME="${{ steps.start_time.outputs.timestamp }}"
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "⏱️  Workflow duration: ${DURATION}s ($((DURATION / 60))m $((DURATION % 60))s)"

          # Log for metrics collection (future enhancement)
          echo "WORKFLOW=tdd-queue-processor DURATION=${DURATION}s" >> $GITHUB_STEP_SUMMARY
