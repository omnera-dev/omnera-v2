{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Application Configuration",
  "description": "Complete configuration for your application including metadata, data models, automations, and integrations",
  "version": "0.81.0",
  "type": "object",
  "definitions": {
    "id": {
      "description": "Unique positive integer identifier for entities. IDs are system-generated, auto-incrementing, and immutable. Must be unique within the parent collection (e.g., field IDs unique within a table, table IDs unique within the application). IDs are read-only and assigned automatically when entities are created. Range: 1 to 9,007,199,254,740,991 (JavaScript MAX_SAFE_INTEGER).",
      "title": "ID",
      "readOnly": true,
      "type": "integer",
      "minimum": 1,
      "maximum": 9007199254740991,
      "examples": [1, 2, 3, 100, 1000]
    },
    "name": {
      "description": "Internal identifier name used for database tables, columns, and programmatic references. Must follow database naming conventions: start with a letter, contain only lowercase letters, numbers, and underscores, maximum 63 characters (PostgreSQL limit). This name is used in SQL queries, API endpoints, and code generation. Choose descriptive names that clearly indicate the purpose (e.g., \"email_address\" not \"ea\").",
      "title": "Name",
      "type": "string",
      "minLength": 1,
      "maxLength": 63,
      "pattern": "^[a-z][a-z0-9_]*$",
      "examples": [
        "user",
        "product",
        "order_item",
        "customer_email",
        "shipping_address",
        "created_at"
      ]
    },
    "path": {
      "description": "URL path for routing and navigation. Must start with forward slash (/), contain only lowercase letters, numbers, hyphens, and forward slashes. Used for page routing, API endpoints, and navigation links. Paths should be hierarchical and descriptive (e.g., /customers/orders, /admin/settings). Nested paths are supported.",
      "title": "Path",
      "type": "string",
      "pattern": "^/[a-z0-9-/]*$",
      "minLength": 1,
      "examples": [
        "/home",
        "/customers",
        "/products/inventory",
        "/admin/settings",
        "/reports/sales"
      ]
    },
    "automation": {
      "title": "Automation Workflow",
      "description": "A workflow that executes a series of actions when triggered by specific events or conditions",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/id",
          "title": "Automation ID",
          "examples": [1, 2, 100]
        },
        "name": {
          "description": "Name of the automation workflow",
          "title": "Automation Name",
          "placeholder": "Enter automation name",
          "examples": ["Send Welcome Email", "Process Order", "Sync Customer Data"],
          "type": "string",
          "minLength": 3
        },
        "description": {
          "description": "Detailed description of what this automation does",
          "title": "Description",
          "placeholder": "Describe what this automation does",
          "examples": [
            "Sends a welcome email when a new user signs up",
            "Processes incoming orders and updates inventory"
          ],
          "uiSchema": {
            "ui:widget": "textarea",
            "ui:rows": 2
          },
          "type": "string"
        },
        "editUrl": {
          "description": "URL to edit this automation in an external tool",
          "title": "Edit URL",
          "placeholder": "https://example.com/automations/edit/123",
          "examples": [
            "https://zapier.com/app/editor/123456",
            "https://make.com/scenario/edit/789"
          ],
          "uiSchema": {
            "ui:widget": "uri"
          },
          "type": "string",
          "format": "uri"
        },
        "trigger": {
          "$ref": "#/definitions/automation_trigger"
        },
        "actions": {
          "description": "Sequence of actions to execute when triggered",
          "title": "Actions",
          "uiSchema": {
            "ui:ArrayFieldTemplate": "collapsible",
            "ui:options": {
              "orderable": true,
              "removable": true,
              "addable": true
            }
          },
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/automation_action"
          }
        }
      },
      "required": ["id", "name", "trigger", "actions"],
      "additionalProperties": false,
      "x-user-stories": [
        "GIVEN the application is running WHEN I list automations THEN it should work correctly",
        "GIVEN the application is running WHEN I disable an automation THEN it should work correctly",
        "GIVEN the application is running WHEN I enable an automation THEN it should work correctly",
        "GIVEN the application is running WHEN I open the edit url THEN it should work correctly",
        "GIVEN the application is running WHEN I return a list of automations THEN it should work correctly",
        "GIVEN I am working with same integration actions in a queue WHEN I run parallel automations THEN it should complete successfully"
      ]
    },
    "automation_trigger": {
      "title": "Trigger",
      "description": "Defines when an automation workflow should execute. Triggers can be event-based (record created, updated, deleted), scheduled (cron expressions for recurring tasks), or manual (webhook endpoints). Configure the trigger type, target table (for record triggers), and specific conditions that must be met. Triggers are evaluated in real-time for events or on schedule for time-based automation.",
      "uiSchema": {
        "ui:widget": "trigger-selector"
      },
      "anyOf": [
        {
          "title": "HTTP Trigger",
          "description": "Triggered by HTTP requests",
          "anyOf": [
            {
              "title": "POST Request",
              "description": "Triggered by a POST request",
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "const": "http"
                },
                "event": {
                  "type": "string",
                  "const": "post"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "respondImmediately": {
                      "default": false,
                      "type": "boolean"
                    },
                    "requestBody": {
                      "$ref": "#/definitions/json_schema"
                    }
                  },
                  "required": ["path"],
                  "additionalProperties": false
                }
              },
              "required": ["service", "event", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN a airtable record is created WHEN I trigger an automation THEN it should succeed",
                "GIVEN POST request sent WHEN I process actual lead data THEN it should succeed",
                "GIVEN the application is running WHEN I handle validation for HTTP trigger path as well THEN it should work correctly",
                "GIVEN the application is running WHEN I trigger an automation THEN it should work correctly",
                "GIVEN I am working with immediate response WHEN I trigger an automation THEN it should complete successfully",
                "GIVEN I am working with a invalid body WHEN I not trigger an automation THEN it should complete successfully",
                "GIVEN I am working with a valid object body WHEN I trigger an automation THEN it should complete successfully",
                "GIVEN I am working with a valid array body WHEN I trigger an automation THEN it should complete successfully",
                "GIVEN I am working with a valid array body and respond immediately WHEN I trigger an automation THEN it should complete successfully",
                "GIVEN I am working with form data WHEN I trigger an automation THEN it should complete successfully",
                "GIVEN I am working with a post request WHEN I not found the automation THEN it should complete successfully",
                "GIVEN a calendly invite is created WHEN I trigger an automation THEN it should succeed",
                "GIVEN POST request sent WHEN I process actual lead form data THEN it should succeed"
              ]
            },
            {
              "title": "GET Request",
              "description": "Triggered by a GET request",
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "const": "http"
                },
                "event": {
                  "type": "string",
                  "const": "get"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "respondImmediately": {
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "required": ["path"],
                  "additionalProperties": false
                }
              },
              "required": ["service", "event", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN Facebook sends GET validation request WHEN I respond with hub.challenge THEN it should succeed",
                "GIVEN hub.mode is not subscribe WHEN I not respond with challenge THEN it should succeed",
                "GIVEN I am working with a get request WHEN I not found the automation THEN it should complete successfully",
                "GIVEN I am working with a wrong path WHEN I not found the automation THEN it should complete successfully",
                "GIVEN LinkedIn sends GET validation request WHEN I respond with correctly computed challengeResponse THEN it should succeed",
                "GIVEN I am working with correct HMAC computation WHEN I handle GET validation for HTTP trigger path THEN it should complete successfully"
              ]
            }
          ]
        },
        {
          "title": "Database Trigger",
          "description": "Triggered by database events",
          "anyOf": [
            {
              "title": "Record Created",
              "description": "Triggered when a record is created",
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "const": "database"
                },
                "event": {
                  "type": "string",
                  "const": "record-created"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "table": {
                      "type": "string"
                    }
                  },
                  "required": ["table"],
                  "additionalProperties": false
                }
              },
              "required": ["service", "event", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN a record is created WHEN I run an automation THEN it should succeed"
              ]
            },
            {
              "title": "Record Updated",
              "description": "Triggered when a record is updated",
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "const": "database"
                },
                "event": {
                  "type": "string",
                  "const": "record-updated"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "table": {
                      "type": "string"
                    }
                  },
                  "required": ["table"],
                  "additionalProperties": false
                }
              },
              "required": ["service", "event", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN a record is updated WHEN I run an automation THEN it should succeed"
              ]
            }
          ]
        },
        {
          "title": "Schedule Trigger",
          "description": "Triggered on a schedule",
          "anyOf": [
            {
              "title": "Cron Time",
              "description": "Triggered by a cron expression",
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "const": "schedule"
                },
                "event": {
                  "type": "string",
                  "const": "cron-time"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "expression": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "required": ["expression", "timeZone"],
                  "additionalProperties": false
                }
              },
              "required": ["service", "event", "params"],
              "additionalProperties": false
            }
          ],
          "x-user-stories": [
            "GIVEN I am working with a cron time WHEN I trigger the automation THEN it should complete successfully"
          ]
        },
        {
          "title": "Integration Trigger",
          "description": "Triggered by external service events",
          "anyOf": [
            {
              "title": "Calendly",
              "description": "Triggered by Calendly events",
              "anyOf": [
                {
                  "title": "Invite Created",
                  "description": "Triggered when a Calendly invite is created",
                  "type": "object",
                  "properties": {
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "calendly"
                    },
                    "event": {
                      "type": "string",
                      "const": "invite-created"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "organization": {
                          "description": "The organization of the trigger",
                          "default": "Current user organization",
                          "type": "string"
                        },
                        "scope": {
                          "description": "The scope of the trigger",
                          "default": "user",
                          "type": "string",
                          "enum": ["user", "organization", "group"]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["account", "service", "event"],
                  "additionalProperties": false
                }
              ]
            },
            {
              "title": "Airtable",
              "description": "Triggered by Airtable events",
              "anyOf": [
                {
                  "title": "Record Created",
                  "description": "Triggered when an Airtable record is created",
                  "type": "object",
                  "properties": {
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "airtable"
                    },
                    "event": {
                      "type": "string",
                      "const": "record-created"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "baseId": {
                          "type": "string"
                        },
                        "tableId": {
                          "type": "string"
                        }
                      },
                      "required": ["baseId", "tableId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["account", "service", "event", "params"],
                  "additionalProperties": false
                }
              ]
            },
            {
              "title": "LinkedIn Ads",
              "description": "Triggered by LinkedIn lead events",
              "anyOf": [
                {
                  "title": "New Lead Gen Form Response",
                  "description": "Triggered when a new LinkedIn Lead Gen Form response is created",
                  "type": "object",
                  "properties": {
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "linkedin-ads"
                    },
                    "event": {
                      "type": "string",
                      "const": "new-lead-gen-form-response"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "title": "LinkedIn Organization ID",
                          "description": "Required for non-sponsored lead forms",
                          "type": "string"
                        },
                        "sponsoredAccountId": {
                          "title": "LinkedIn Sponsored Account ID",
                          "description": "Required for sponsored lead forms (leadType: SPONSORED)",
                          "type": "string"
                        },
                        "leadType": {
                          "default": "SPONSORED",
                          "description": "Type of lead form. SPONSORED requires sponsoredAccountId",
                          "type": "string",
                          "enum": ["SPONSORED"]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["account", "service", "event", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I set up Facebook new lead trigger (subscribes page and app if needed) THEN it should work correctly"
              ]
            },
            {
              "title": "Facebook",
              "description": "Triggered by Facebook lead events",
              "anyOf": [
                {
                  "title": "New Lead",
                  "description": "Triggered when a new Facebook Lead Ad response is created",
                  "type": "object",
                  "properties": {
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "facebook-ads"
                    },
                    "event": {
                      "type": "string",
                      "const": "new-lead"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "pageId": {
                          "title": "Facebook Page ID",
                          "description": "The ID of the Facebook page with lead forms",
                          "type": "string"
                        },
                        "appId": {
                          "title": "Facebook App ID",
                          "description": "Your Facebook App ID from the developer console",
                          "type": "string"
                        },
                        "appSecret": {
                          "title": "Facebook App Secret",
                          "description": "Your Facebook App Secret from the developer console",
                          "type": "string"
                        },
                        "verifyToken": {
                          "title": "Webhook Verify Token",
                          "description": "Security token for webhook verification (auto-generated if not provided)",
                          "type": "string"
                        }
                      },
                      "required": ["pageId", "appId", "appSecret"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["account", "service", "event", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN I am working with known test vectors WHEN I compute challengeResponse correctly THEN it should complete successfully",
                "GIVEN the application is running WHEN I set up LinkedIn new lead gen response trigger (creates subscription if none) THEN it should work correctly"
              ]
            }
          ]
        }
      ]
    },
    "automation_action": {
      "title": "Action",
      "description": "Actions to perform when an automation is triggered. Actions execute sequentially in the order defined. Available action types: send-email (email notifications), create-record (insert data), update-record (modify data), delete-record (remove data), http-request (call external APIs), run-script (execute custom code). Each action type has specific configuration requirements and can reference trigger data using template variables.",
      "anyOf": [
        {
          "title": "HTTP Action",
          "description": "HTTP request action",
          "anyOf": [
            {
              "title": "GET Request",
              "description": "Make a GET HTTP request",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "http"
                },
                "action": {
                  "type": "string",
                  "const": "get"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "headers": {
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["url"],
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a get http action THEN it should work correctly",
                "GIVEN I am working with headers WHEN I run a get http action THEN it should complete successfully"
              ]
            },
            {
              "title": "POST Request",
              "description": "Make a POST HTTP request",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "http"
                },
                "action": {
                  "type": "string",
                  "const": "post"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "headers": {
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "body": {
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {}
                    }
                  },
                  "required": ["url"],
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a post http action THEN it should work correctly",
                "GIVEN I am working with headers WHEN I run a post http action THEN it should complete successfully",
                "GIVEN I am working with env headers WHEN I run a post http action THEN it should complete successfully",
                "GIVEN I am working with default env headers WHEN I run a post http action THEN it should complete successfully",
                "GIVEN I am working with body WHEN I run a post http action THEN it should complete successfully"
              ]
            },
            {
              "title": "HTTP Response",
              "description": "Send an HTTP response",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "http"
                },
                "action": {
                  "type": "string",
                  "const": "response"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "headers": {
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "body": {
                      "anyOf": [
                        {
                          "type": "object",
                          "propertyNames": {
                            "type": "string"
                          },
                          "additionalProperties": {}
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a response http action THEN it should work correctly",
                "GIVEN I am working with body from a post request WHEN I run a response http action THEN it should complete successfully",
                "GIVEN I am working with body from a get request WHEN I run a response http action THEN it should complete successfully",
                "GIVEN I am working with previous error WHEN I run a response http action THEN it should complete successfully",
                "GIVEN I am working with previous action WHEN I run a response http action THEN it should complete successfully",
                "GIVEN I am working with headers WHEN I run a response http action THEN it should complete successfully"
              ]
            }
          ]
        },
        {
          "title": "Code Action",
          "description": "Execute custom code",
          "anyOf": [
            {
              "title": "Run TypeScript",
              "description": "Execute TypeScript code",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "code"
                },
                "action": {
                  "type": "string",
                  "const": "run-typescript"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "inputData": {
                      "default": {},
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": ["code"],
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a TypeScript code THEN it should work correctly",
                "GIVEN I am working with input data WHEN I run a TypeScript code THEN it should complete successfully",
                "GIVEN the code throw an error WHEN I return an error THEN it should succeed",
                "GIVEN I am working with externals WHEN I run a TypeScript code THEN it should complete successfully",
                "GIVEN I am working with globals variables WHEN I run a TypeScript code THEN it should complete successfully",
                "GIVEN I am working with tables WHEN I run a TypeScript code THEN it should complete successfully",
                "GIVEN I am working with buckets WHEN I run a TypeScript code THEN it should complete successfully",
                "GIVEN the application is running WHEN I run a TypeScript code that return an array THEN it should work correctly",
                "GIVEN the application is running WHEN I filter a TypeScript code that return an empty array THEN it should work correctly",
                "GIVEN I am working with actions WHEN I run a TypeScript code THEN it should complete successfully"
              ]
            },
            {
              "title": "Run JavaScript",
              "description": "Execute JavaScript code",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "code"
                },
                "action": {
                  "type": "string",
                  "const": "run-javascript"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "inputData": {
                      "default": {},
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string"
                    }
                  },
                  "required": ["code"],
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a JavaScript code THEN it should work correctly",
                "GIVEN I am working with input data WHEN I run a JavaScript code THEN it should complete successfully",
                "GIVEN I am working with externals WHEN I run a JavaScript code THEN it should complete successfully",
                "GIVEN I am working with globals variables WHEN I run a JavaScript code THEN it should complete successfully",
                "GIVEN I am working with tables WHEN I run a JavaScript code THEN it should complete successfully",
                "GIVEN I am working with buckets WHEN I run a JavaScript code THEN it should complete successfully",
                "GIVEN the application is running WHEN I run a JavaScript code that return an array THEN it should work correctly",
                "GIVEN the application is running WHEN I filter a JavaScript code that return an empty array THEN it should work correctly",
                "GIVEN I am working with actions WHEN I run a JavaScript code THEN it should complete successfully"
              ]
            }
          ]
        },
        {
          "title": "Filter Action",
          "description": "Filter or branch automation flow",
          "anyOf": [
            {
              "title": "Only Continue If",
              "description": "Continue only if condition is met",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "filter"
                },
                "action": {
                  "type": "string",
                  "const": "only-continue-if"
                },
                "params": {
                  "$ref": "#/definitions/filter_condition"
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I not run an action if the filter returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an and filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an and filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an or filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an or filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an action if the filter returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an exists filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an exists filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an does-not-exist filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an does-not-exist filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an is-true filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an is-true filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an is-false filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an is-false filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an contains filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an contains filter action that returns false THEN it should work correctly",
                "GIVEN the application is running WHEN I run an does-not-contain filter action that returns true THEN it should work correctly",
                "GIVEN the application is running WHEN I run an does-not-contain filter action that returns false THEN it should work correctly"
              ]
            },
            {
              "title": "Split Into Paths",
              "description": "Branch automation into multiple paths",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "filter"
                },
                "action": {
                  "type": "string",
                  "const": "split-into-paths"
                },
                "params": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "filter": {
                        "$ref": "#/definitions/filter_condition"
                      },
                      "actions": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/automation_action"
                        }
                      }
                    },
                    "required": ["name", "filter", "actions"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a split into paths paths action THEN it should work correctly",
                "GIVEN I am working with 2 valid paths WHEN I run a split into paths paths action THEN it should complete successfully",
                "GIVEN the application is running WHEN I run a split into paths paths action before another action THEN it should work correctly",
                "GIVEN I am working with an error WHEN I run a split into paths paths action THEN it should complete successfully"
              ]
            }
          ]
        },
        {
          "title": "Database Action",
          "description": "Database operations",
          "anyOf": [
            {
              "title": "Create Record",
              "description": "Create a record in a database table",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "service": {
                  "type": "string",
                  "const": "database"
                },
                "action": {
                  "type": "string",
                  "const": "create-record"
                },
                "params": {
                  "type": "object",
                  "properties": {
                    "table": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "fields": {
                      "type": "object",
                      "propertyNames": {
                        "type": "string"
                      },
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    }
                  },
                  "required": ["table", "fields"],
                  "additionalProperties": false
                }
              },
              "required": ["name", "service", "action", "params"],
              "additionalProperties": false
            }
          ],
          "x-user-stories": [
            "GIVEN the application is running WHEN I create a record from an automation THEN it should work correctly"
          ]
        },
        {
          "title": "Integration Action",
          "description": "Actions performed via external service integrations",
          "anyOf": [
            {
              "title": "Calendly",
              "description": "Actions for Calendly API",
              "anyOf": [
                {
                  "title": "List Webhook Subscriptions",
                  "description": "Lists the webhook subscriptions for a given organization",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "calendly"
                    },
                    "action": {
                      "type": "string",
                      "const": "list-webhook-subscriptions"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "organization": {
                          "default": "Current user organisation",
                          "type": "string"
                        },
                        "scope": {
                          "default": "user",
                          "type": "string",
                          "enum": ["user", "organization", "group"]
                        },
                        "count": {
                          "default": 20,
                          "type": "number",
                          "minimum": 1,
                          "maximum": 100
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action"],
                  "additionalProperties": false
                },
                {
                  "title": "Get Event Type",
                  "description": "Gets the event type for a given uuid",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "calendly"
                    },
                    "action": {
                      "type": "string",
                      "const": "get-event-type"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "uuid": {
                          "type": "string"
                        }
                      },
                      "required": ["uuid"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a google sheets append values action THEN it should work correctly"
              ]
            },
            {
              "title": "Airtable",
              "description": "Actions for Airtable API",
              "anyOf": [
                {
                  "title": "List Webhook Payloads",
                  "description": "Lists the webhook payloads for a given webhook",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "airtable"
                    },
                    "action": {
                      "type": "string",
                      "const": "list-webhook-payloads"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "baseId": {
                          "type": "string"
                        },
                        "webhookId": {
                          "type": "string"
                        },
                        "cursor": {
                          "type": "number"
                        },
                        "limit": {
                          "type": "number"
                        }
                      },
                      "required": ["baseId", "webhookId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a google gmail send email action THEN it should work correctly"
              ]
            },
            {
              "title": "Google Sheets",
              "description": "Actions for Google Sheets API",
              "anyOf": [
                {
                  "title": "Append Values",
                  "description": "Appends values to a Google Sheets spreadsheet",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "google-sheets"
                    },
                    "action": {
                      "type": "string",
                      "const": "append-values"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "spreadsheetId": {
                          "type": "string"
                        },
                        "range": {
                          "type": "string"
                        },
                        "values": {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "required": ["spreadsheetId", "range", "values"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a airtable list webhook payloads action THEN it should work correctly"
              ]
            },
            {
              "title": "Google Gmail",
              "description": "Actions for Google Gmail API",
              "anyOf": [
                {
                  "title": "Send Email",
                  "description": "Sends an email",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "google-gmail"
                    },
                    "action": {
                      "type": "string",
                      "const": "send-email"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "to": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "cc": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "bcc": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          ]
                        },
                        "subject": {
                          "type": "string"
                        },
                        "html": {
                          "type": "string"
                        },
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": ["to", "subject", "html"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a facebook get leadgen action THEN it should work correctly",
                "GIVEN the application is running WHEN I run a facebook list app subscriptions action THEN it should work correctly"
              ]
            },
            {
              "title": "LinkedIn Ads",
              "description": "Actions for LinkedIn Ads API",
              "anyOf": [
                {
                  "title": "Create Lead Notification Subscription",
                  "description": "Creates a LinkedIn Lead Notification subscription at owner level",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "linkedin-ads"
                    },
                    "action": {
                      "type": "string",
                      "const": "create-lead-notification-subscription"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "webhook": {
                          "title": "Webhook URL",
                          "type": "string",
                          "format": "uri"
                        },
                        "organizationId": {
                          "title": "LinkedIn Organization ID",
                          "type": "string"
                        },
                        "leadType": {
                          "default": "SPONSORED",
                          "type": "string",
                          "enum": ["SPONSORED"]
                        }
                      },
                      "required": ["webhook", "organizationId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "List Lead Notification Subscriptions",
                  "description": "Lists LinkedIn lead notification subscriptions for an organization",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "linkedin-ads"
                    },
                    "action": {
                      "type": "string",
                      "const": "list-lead-notification-subscriptions"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "organizationId": {
                          "title": "LinkedIn Organization ID",
                          "type": "string"
                        }
                      },
                      "required": ["organizationId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Get Lead Form Response",
                  "description": "Retrieves a single LinkedIn Lead Form Response by its ID",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "linkedin-ads"
                    },
                    "action": {
                      "type": "string",
                      "const": "get-lead-form-response"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "leadResponseId": {
                          "title": "Lead Response ID",
                          "description": "The unique identifier for the lead form response",
                          "type": "string"
                        }
                      },
                      "required": ["leadResponseId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a calendly list webhook subscriptions action THEN it should work correctly",
                "GIVEN the application is running WHEN I run a calendly get event type action THEN it should work correctly",
                "GIVEN the application is running WHEN I run a calendly get event type action on invite created THEN it should work correctly"
              ]
            },
            {
              "title": "Facebook Ads",
              "description": "Actions for Facebook Ads API",
              "anyOf": [
                {
                  "title": "List App Subscriptions",
                  "description": "Lists subscriptions configured on the Facebook App",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "facebook-ads"
                    },
                    "action": {
                      "type": "string",
                      "const": "list-app-subscriptions"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "appId": {
                          "title": "Facebook App ID",
                          "type": "string"
                        },
                        "appSecret": {
                          "title": "Facebook App Secret",
                          "type": "string"
                        }
                      },
                      "required": ["appId", "appSecret"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Get LeadGen",
                  "description": "Retrieves lead generation data using the leadgen_id from webhook",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "facebook-ads"
                    },
                    "action": {
                      "type": "string",
                      "const": "get-leadgen"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "leadgenId": {
                          "title": "Leadgen ID",
                          "description": "The leadgen_id from Facebook webhook data",
                          "type": "string"
                        }
                      },
                      "required": ["leadgenId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ],
              "x-user-stories": [
                "GIVEN the application is running WHEN I run a linkedin list lead notification subscriptions action THEN it should work correctly",
                "GIVEN the application is running WHEN I run a linkedin get lead form response action THEN it should work correctly"
              ]
            },
            {
              "title": "Notion",
              "description": "Actions for Notion API",
              "anyOf": [
                {
                  "title": "Create Page",
                  "description": "Creates a new page in Notion",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "create-page"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "parent": {
                          "description": "Parent of the new page",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "database_id"
                                },
                                "database_id": {
                                  "type": "string"
                                }
                              },
                              "required": ["type", "database_id"],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "page_id"
                                },
                                "page_id": {
                                  "type": "string"
                                }
                              },
                              "required": ["type", "page_id"],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "workspace"
                                },
                                "workspace": {
                                  "type": "boolean",
                                  "const": true
                                }
                              },
                              "required": ["type", "workspace"],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "properties": {
                          "description": "Page properties",
                          "type": "object",
                          "propertyNames": {
                            "type": "string"
                          },
                          "additionalProperties": {}
                        },
                        "children": {
                          "description": "Page content blocks",
                          "type": "array",
                          "items": {}
                        },
                        "icon": {
                          "description": "Page icon",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "emoji"
                                },
                                "emoji": {
                                  "type": "string"
                                }
                              },
                              "required": ["type", "emoji"],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "external"
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "url": {
                                      "type": "string"
                                    }
                                  },
                                  "required": ["url"],
                                  "additionalProperties": false
                                }
                              },
                              "required": ["type", "external"],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "cover": {
                          "description": "Page cover image",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "external"
                            },
                            "external": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string"
                                }
                              },
                              "required": ["url"],
                              "additionalProperties": false
                            }
                          },
                          "required": ["type", "external"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["parent", "properties"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Get Page",
                  "description": "Retrieves a page from Notion",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "get-page"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "pageId": {
                          "description": "The ID of the page to retrieve",
                          "type": "string"
                        },
                        "filterProperties": {
                          "description": "Properties to include in response",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": ["pageId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Update Page",
                  "description": "Updates properties, icon, cover, or archived status of a Notion page",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "update-page"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "pageId": {
                          "description": "The ID of the page to update",
                          "type": "string"
                        },
                        "properties": {
                          "description": "Page properties to update",
                          "type": "object",
                          "propertyNames": {
                            "type": "string"
                          },
                          "additionalProperties": {}
                        },
                        "icon": {
                          "description": "Page icon to set",
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "emoji"
                                },
                                "emoji": {
                                  "type": "string"
                                }
                              },
                              "required": ["type", "emoji"],
                              "additionalProperties": false
                            },
                            {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "const": "external"
                                },
                                "external": {
                                  "type": "object",
                                  "properties": {
                                    "url": {
                                      "type": "string"
                                    }
                                  },
                                  "required": ["url"],
                                  "additionalProperties": false
                                }
                              },
                              "required": ["type", "external"],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "cover": {
                          "description": "Page cover image to set",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "const": "external"
                            },
                            "external": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string"
                                }
                              },
                              "required": ["url"],
                              "additionalProperties": false
                            }
                          },
                          "required": ["type", "external"],
                          "additionalProperties": false
                        },
                        "archived": {
                          "description": "Whether to archive/unarchive the page",
                          "type": "boolean"
                        }
                      },
                      "required": ["pageId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Delete Page",
                  "description": "Deletes (archives) a page in Notion",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "delete-page"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "pageId": {
                          "description": "The ID of the page to delete",
                          "type": "string"
                        }
                      },
                      "required": ["pageId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "List Pages",
                  "description": "Lists pages from a Notion database",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "list-pages"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "databaseId": {
                          "description": "The ID of the database to query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Filter conditions for the query"
                        },
                        "sorts": {
                          "description": "Sort conditions for the query",
                          "type": "array",
                          "items": {}
                        },
                        "startCursor": {
                          "description": "Pagination cursor",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Number of results per page",
                          "type": "number",
                          "minimum": 1,
                          "maximum": 100
                        }
                      },
                      "required": ["databaseId"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Search Pages",
                  "description": "Searches for pages in Notion",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "notion"
                    },
                    "action": {
                      "type": "string",
                      "const": "search-pages"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "description": "Search query text",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Optional filter for search results",
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "required": ["query"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ]
            },
            {
              "title": "Qonto",
              "description": "Actions for Qonto API",
              "anyOf": [
                {
                  "title": "Create Client",
                  "description": "Creates a new client in Qonto",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "qonto"
                    },
                    "action": {
                      "type": "string",
                      "const": "create-client"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Client name",
                          "type": "string"
                        },
                        "email": {
                          "description": "Client email",
                          "type": "string",
                          "format": "email",
                          "pattern": "^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$"
                        },
                        "phone": {
                          "description": "Client phone number",
                          "type": "string"
                        },
                        "address": {
                          "description": "Client address",
                          "type": "object",
                          "properties": {
                            "street": {
                              "description": "Street address",
                              "type": "string"
                            },
                            "city": {
                              "description": "City",
                              "type": "string"
                            },
                            "postal_code": {
                              "description": "Postal code",
                              "type": "string"
                            },
                            "country": {
                              "description": "Country",
                              "type": "string"
                            }
                          },
                          "required": ["street", "city", "postal_code", "country"],
                          "additionalProperties": false
                        },
                        "vat_number": {
                          "description": "VAT number",
                          "type": "string"
                        }
                      },
                      "required": ["name"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                },
                {
                  "title": "Create Invoice",
                  "description": "Creates a new invoice in Qonto",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "account": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "service": {
                      "type": "string",
                      "const": "qonto"
                    },
                    "action": {
                      "type": "string",
                      "const": "create-invoice"
                    },
                    "params": {
                      "type": "object",
                      "properties": {
                        "client_id": {
                          "description": "ID of the client for this invoice",
                          "type": "string"
                        },
                        "amount": {
                          "description": "Invoice total amount",
                          "type": "number",
                          "exclusiveMinimum": 0
                        },
                        "currency": {
                          "description": "Invoice currency",
                          "default": "EUR",
                          "type": "string"
                        },
                        "due_date": {
                          "description": "Invoice due date (ISO 8601 format)",
                          "type": "string"
                        },
                        "items": {
                          "description": "Invoice line items",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "description": "Item description",
                                "type": "string"
                              },
                              "quantity": {
                                "description": "Quantity",
                                "type": "number",
                                "exclusiveMinimum": 0
                              },
                              "unit_price": {
                                "description": "Unit price",
                                "type": "number",
                                "exclusiveMinimum": 0
                              }
                            },
                            "required": ["description", "quantity", "unit_price"],
                            "additionalProperties": false
                          }
                        },
                        "reference": {
                          "description": "Invoice reference number",
                          "type": "string"
                        },
                        "notes": {
                          "description": "Additional notes",
                          "type": "string"
                        }
                      },
                      "required": ["client_id", "amount", "currency", "due_date", "items"],
                      "additionalProperties": false
                    }
                  },
                  "required": ["name", "account", "service", "action", "params"],
                  "additionalProperties": false
                }
              ]
            }
          ]
        }
      ]
    },
    "filter_condition": {
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "target": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": ["contains", "does-not-contain"]
            },
            "value": {
              "type": "string"
            }
          },
          "required": ["target", "operator", "value"],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "target": {
              "type": "string"
            },
            "operator": {
              "type": "string",
              "enum": ["exists", "does-not-exist", "is-true", "is-false"]
            }
          },
          "required": ["target", "operator"],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/filter_condition"
              }
            }
          },
          "required": ["and"],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/filter_condition"
              }
            }
          },
          "required": ["or"],
          "additionalProperties": false
        }
      ],
      "description": "Filter conditions for querying and filtering data in table views, automations, and reports. Specify field to filter on, comparison operator (equals, not equals, contains, greater than, less than, is empty, is not empty), and comparison value. Conditions can be combined with AND/OR logic. Supports dynamic values from other fields, current user, or system variables. Used throughout the application for data filtering and conditional logic."
    },
    "json_schema": {
      "title": "JSON Schema",
      "description": "JSON Schema definition (Draft 07 compatible) for validating structured data in JSON fields. Define the expected structure, types, required properties, constraints, and validation rules. Used to ensure JSON field data conforms to a specific schema. Supports all JSON Schema features: types, properties, required, patterns, enums, nested objects, arrays, and custom validation. Useful for API configurations, structured metadata, and flexible data models with enforced structure.",
      "type": "object",
      "properties": {
        "type": {
          "anyOf": [
            {
              "type": "string",
              "enum": ["string", "number", "integer", "boolean", "object", "array", "null"]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["string", "number", "integer", "boolean", "object", "array", "null"]
              }
            }
          ]
        },
        "properties": {
          "type": "object",
          "propertyNames": {
            "type": "string"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "items": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/json_schema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/json_schema"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              }
            }
          ]
        },
        "additionalProperties": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/json_schema"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            {
              "type": "boolean"
            }
          ]
        },
        "enum": {
          "type": "array",
          "items": {}
        },
        "const": {},
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default": {},
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "multipleOf": {
          "type": "number"
        },
        "minLength": {
          "type": "number"
        },
        "maxLength": {
          "type": "number"
        },
        "pattern": {
          "type": "string"
        },
        "minItems": {
          "type": "number"
        },
        "maxItems": {
          "type": "number"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "allOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "anyOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "oneOf": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "not": {
          "anyOf": [
            {
              "$ref": "#/definitions/json_schema"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "name": {
      "description": "The internal identifier for your application. Must follow npm package naming conventions: lowercase, hyphens allowed, no spaces or special characters. This name is used in URLs, routing paths, API endpoints, and database prefixes. Choose a name that is descriptive but concise.",
      "title": "Application Name",
      "examples": ["my-app", "customer-portal", "inventory-system", "task-manager", "crm-platform"],
      "placeholder": "Enter your application name",
      "default": "My app",
      "type": "string",
      "minLength": 3
    },
    "description": {
      "description": "A comprehensive description of your application's purpose, features, and intended use. This description helps users understand what the application does and appears in application listings, documentation, and metadata. Use clear, concise language that explains the business value.",
      "title": "Application Description",
      "examples": [
        "A customer relationship management system for tracking sales leads and opportunities",
        "Internal inventory management platform with automated reordering workflows",
        "Project management tool for agile teams with sprint planning and kanban boards",
        "Employee onboarding portal with document management and task tracking"
      ],
      "placeholder": "Describe your application purpose",
      "uiSchema": {
        "ui:widget": "textarea",
        "ui:rows": 3
      },
      "default": "My app description",
      "type": "string",
      "minLength": 1
    },
    "version": {
      "description": "Semantic version number following SemVer 2.0.0 specification (MAJOR.MINOR.PATCH). Increment MAJOR for breaking changes, MINOR for new features, PATCH for bug fixes. Optional pre-release identifiers (e.g., -alpha, -beta.1) are supported. This version is used for change tracking, rollback capabilities, and API compatibility.",
      "title": "Version",
      "examples": ["1.0.0", "2.1.3", "0.5.0-beta", "1.0.0-alpha.1", "3.2.1"],
      "placeholder": "1.0.0",
      "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9]+)?$",
      "default": "1.0.0",
      "type": "string",
      "minLength": 5
    },
    "tables": {
      "description": "Collection of database tables that define the data structure of your application. Each table represents an entity (e.g., users, products, orders) with fields that define the schema. Tables support relationships, indexes, constraints, and various field types. Tables are the foundation of your application's data model and determine what information can be stored and how it relates.",
      "title": "Data Tables",
      "uiSchema": {
        "ui:ArrayFieldTemplate": "collapsible",
        "ui:options": {
          "orderable": true,
          "removable": true,
          "addable": true
        }
      },
      "default": [],
      "type": "array",
      "items": {
        "title": "Data Table",
        "description": "A database table definition with its fields and structure",
        "version": "0.81.0",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/definitions/id",
            "title": "Table ID",
            "description": "Unique identifier for the table",
            "examples": [1, 2, 100]
          },
          "name": {
            "$ref": "#/definitions/name",
            "title": "Table Name",
            "description": "Name of the database table",
            "placeholder": "Enter table name",
            "examples": ["users", "products", "orders", "customers"],
            "pattern": "^[a-z][a-z0-9_]*$",
            "help": "Use lowercase letters, numbers, and underscores. Must start with a letter."
          },
          "fields": {
            "description": "List of fields/columns in this table",
            "title": "Table Fields",
            "minItems": 1,
            "uiSchema": {
              "ui:ArrayFieldTemplate": "collapsible",
              "ui:options": {
                "orderable": true,
                "removable": true,
                "addable": true
              }
            },
            "default": [],
            "type": "array",
            "items": {
              "title": "Field",
              "description": "A field in the table",
              "anyOf": [
                {
                  "title": "Text Field",
                  "description": "Text field supporting various formats: single-line for short text (names, titles), long-text for paragraphs and descriptions, phone-number with automatic formatting, email with validation, and url with link display. Required flag makes the field mandatory. Unique constraint ensures no duplicate values across records. Indexing improves search and filter performance.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "unique": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether this field must contain unique values across all rows"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["single-line-text", "long-text", "phone-number", "email", "url"]
                    },
                    "default": {
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false,
                  "x-user-stories": [
                    "GIVEN I am working with an email field WHEN I create a record THEN it should complete successfully",
                    "GIVEN I am working with a long text field WHEN I create a record THEN it should complete successfully",
                    "GIVEN I am working with a phone number field WHEN I create a record THEN it should complete successfully",
                    "GIVEN I am working with a single line text field WHEN I create a record THEN it should complete successfully",
                    "GIVEN I am working with a url field WHEN I create a record THEN it should complete successfully"
                  ]
                },
                {
                  "title": "Number Field",
                  "description": "Numeric field with subtypes: integer for whole numbers, decimal for floating-point with configurable precision (0-10 decimal places), currency for monetary values with currency code (USD, EUR, GBP), and percentage for ratios. Supports min/max constraints for range validation. Indexing enables efficient numerical sorting and filtering.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "unique": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether this field must contain unique values across all rows"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["integer", "decimal", "currency", "percentage"]
                    },
                    "min": {
                      "type": "number",
                      "description": "Minimum value"
                    },
                    "max": {
                      "type": "number",
                      "description": "Maximum value"
                    },
                    "precision": {
                      "type": "integer",
                      "description": "Number of decimal places (for decimal type)",
                      "minimum": 0,
                      "maximum": 10,
                      "default": 2
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency code (for currency type)",
                      "default": "USD",
                      "examples": ["USD", "EUR", "GBP"]
                    },
                    "default": {
                      "type": "number"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Date Field",
                  "description": "Date and time field with three modes: date for calendar dates only, datetime for timestamp with date and time, time for clock time only. Supports custom display formats (YYYY-MM-DD, MM/DD/YYYY, DD-MM-YYYY), timezone specification for datetime fields (UTC, America/New_York, Europe/London), and optional time component for date fields. Useful for tracking events, deadlines, and temporal data.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "unique": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether this field must contain unique values across all rows"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["date", "datetime", "time"]
                    },
                    "format": {
                      "type": "string",
                      "description": "Date format string",
                      "default": "YYYY-MM-DD",
                      "examples": ["YYYY-MM-DD", "MM/DD/YYYY", "DD-MM-YYYY"]
                    },
                    "includeTime": {
                      "type": "boolean",
                      "description": "Include time component (for date type)",
                      "default": false
                    },
                    "timezone": {
                      "type": "string",
                      "description": "Timezone for datetime fields",
                      "default": "UTC",
                      "examples": ["UTC", "America/New_York", "Europe/London"]
                    },
                    "default": {
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Checkbox Field",
                  "description": "Boolean checkbox field for true/false values. Displays as a toggleable checkbox in forms and checkmark/cross in tables. Useful for status flags (active/inactive, published/draft), feature toggles, and yes/no questions. Supports default value. Cannot be required (defaults to false).",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "checkbox"
                    },
                    "default": {
                      "type": "boolean"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false,
                  "x-user-stories": [
                    "GIVEN I am working with a checkbox field WHEN I create a record THEN it should complete successfully"
                  ]
                },
                {
                  "title": "Single Select Field",
                  "description": "Single selection dropdown from predefined options. Users can choose exactly one value from the list. Useful for status fields (Active, Inactive, Pending), categories, priority levels (High, Medium, Low), and enumerated values. Requires at least one option. Supports default value. Indexing improves filtering by option value.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "single-select"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "default": []
                    },
                    "default": {
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "type", "options"],
                  "additionalProperties": false,
                  "x-user-stories": [
                    "GIVEN I am working with a single select field WHEN I create a record THEN it should complete successfully",
                    "GIVEN I am working with an invalid single select field WHEN I create a record THEN it should fail with validation error"
                  ]
                },
                {
                  "title": "Multi Select Field",
                  "description": "Multiple selection field allowing users to choose zero or more options from a predefined list. Displays as checkboxes or multi-select dropdown. Useful for tags, categories, features, skills, and attributes that can have multiple values. Supports maxSelections constraint to limit number of choices. Requires at least one option. Stores values as an array.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "multi-select"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1,
                      "default": []
                    },
                    "maxSelections": {
                      "type": "integer",
                      "description": "Maximum number of selections allowed",
                      "minimum": 1
                    },
                    "default": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["id", "name", "type", "options"],
                  "additionalProperties": false
                },
                {
                  "title": "Relationship Field",
                  "description": "Foreign key relationship to another table creating associations between entities. Supports three relationship types: one-to-one (single unique reference), one-to-many (single reference to many records), many-to-many (junction table for bidirectional references). Configure onDelete behavior (cascade deletes related, set-null clears reference, restrict prevents deletion, no-action does nothing). Configure onUpdate behavior for key changes. Specify displayField to show human-readable value from related table. Automatically indexed for query performance.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true,
                      "description": "Whether to create a database index on this field for faster queries (recommended for foreign keys)"
                    },
                    "type": {
                      "type": "string",
                      "const": "relationship"
                    },
                    "relatedTable": {
                      "type": "string",
                      "description": "Name of the related table",
                      "minLength": 1
                    },
                    "relationType": {
                      "type": "string",
                      "enum": ["one-to-one", "one-to-many", "many-to-many"],
                      "default": "one-to-many",
                      "description": "Type of relationship"
                    },
                    "displayField": {
                      "type": "string",
                      "description": "Field from related table to display in UI",
                      "minLength": 1
                    },
                    "onDelete": {
                      "type": "string",
                      "enum": ["cascade", "set-null", "restrict", "no-action"],
                      "default": "restrict",
                      "description": "Action to take when the related record is deleted"
                    },
                    "onUpdate": {
                      "type": "string",
                      "enum": ["cascade", "set-null", "restrict", "no-action"],
                      "default": "cascade",
                      "description": "Action to take when the related record's key is updated"
                    }
                  },
                  "required": ["id", "name", "type", "relatedTable", "relationType"],
                  "additionalProperties": false
                },
                {
                  "title": "Single Attachment Field",
                  "description": "Single file upload field with configurable storage backend. Supports local filesystem or S3-compatible cloud storage. Configure maxSize limit (in bytes, default 10MB), allowedTypes using MIME types or wildcards (e.g., image/*, application/pdf). Useful for profile pictures, documents, invoices, and single-file attachments. For S3 provider, bucket name is required.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "single-attachment"
                    },
                    "storage": {
                      "type": "object",
                      "properties": {
                        "provider": {
                          "type": "string",
                          "enum": ["local", "s3"],
                          "default": "local",
                          "description": "Storage provider"
                        },
                        "bucket": {
                          "type": "string",
                          "description": "S3 bucket name (required for s3 provider)"
                        },
                        "maxSize": {
                          "type": "integer",
                          "description": "Maximum file size in bytes",
                          "default": 10485760,
                          "minimum": 1
                        },
                        "allowedTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Allowed MIME types or file extensions",
                          "default": ["image/*", "application/pdf"],
                          "examples": [["image/*"], ["application/pdf", "application/msword"]]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Multiple Attachments Field",
                  "description": "Multiple file upload field for collections of attachments. Supports local or S3 storage like single-attachment but allows multiple files per record. Configure maxFiles limit (default 10), maxSize per file (default 10MB), and allowedTypes using MIME types. Useful for document collections, image galleries, contract attachments, and multi-file uploads. Each file validated independently against constraints.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "multiple-attachments"
                    },
                    "maxFiles": {
                      "type": "integer",
                      "description": "Maximum number of files allowed",
                      "minimum": 1,
                      "default": 10
                    },
                    "storage": {
                      "type": "object",
                      "properties": {
                        "provider": {
                          "type": "string",
                          "enum": ["local", "s3"],
                          "default": "local",
                          "description": "Storage provider"
                        },
                        "bucket": {
                          "type": "string",
                          "description": "S3 bucket name (required for s3 provider)"
                        },
                        "maxSize": {
                          "type": "integer",
                          "description": "Maximum file size in bytes per file",
                          "default": 10485760,
                          "minimum": 1
                        },
                        "allowedTypes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Allowed MIME types or file extensions",
                          "default": ["image/*", "application/pdf"],
                          "examples": [["image/*"], ["application/pdf", "application/msword"]]
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Formula Field",
                  "description": "Computed field that automatically calculates values using formula expressions. Formulas can reference other fields, use operators (+, -, *, /, =, >, <), and call functions (CONCAT, IF, ROUND, SUM, etc.). Specify resultType (text, number, boolean, date) for proper type handling. Optionally set display format (currency, percentage, decimal, date). Formulas are read-only and recalculate when dependent fields change. Useful for totals, concatenations, conditional logic, and derived values.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "formula"
                    },
                    "formula": {
                      "type": "string",
                      "description": "Formula expression to compute the value. Supports field references, operators, and functions.",
                      "minLength": 1,
                      "examples": [
                        "price * quantity",
                        "CONCAT(first_name, ' ', last_name)",
                        "IF(status = 'active', 'Yes', 'No')",
                        "ROUND(total * 0.15, 2)"
                      ]
                    },
                    "resultType": {
                      "type": "string",
                      "enum": ["text", "number", "boolean", "date"],
                      "default": "text",
                      "description": "Expected data type of the formula result"
                    },
                    "format": {
                      "type": "string",
                      "description": "Display format for the result (e.g., currency, percentage)",
                      "examples": ["currency", "percentage", "decimal", "date"]
                    }
                  },
                  "required": ["id", "name", "type", "formula"],
                  "additionalProperties": false
                },
                {
                  "title": "Rollup Field",
                  "description": "Aggregate values from related records through a relationship field. Reference a relationshipField in the current table and a relatedField in the linked table. Apply aggregation functions: sum (add all values), count (count records), average (mean value), min (smallest value), max (largest value), median (middle value), concat (join text values), unique (count distinct values). Optionally set display format for the result. Read-only field that automatically updates when related data changes. Useful for totals, counts, statistics from child records.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "rollup"
                    },
                    "relationshipField": {
                      "type": "string",
                      "description": "Name of the relationship field to aggregate from",
                      "minLength": 1
                    },
                    "relatedField": {
                      "type": "string",
                      "description": "Name of the field in the related table to aggregate",
                      "minLength": 1
                    },
                    "aggregation": {
                      "type": "string",
                      "enum": [
                        "sum",
                        "count",
                        "average",
                        "min",
                        "max",
                        "median",
                        "concat",
                        "unique"
                      ],
                      "description": "Aggregation function to apply"
                    },
                    "format": {
                      "type": "string",
                      "description": "Display format for the result",
                      "examples": ["currency", "number", "percentage"]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "type",
                    "relationshipField",
                    "relatedField",
                    "aggregation"
                  ],
                  "additionalProperties": false
                },
                {
                  "title": "Lookup Field",
                  "description": "Display field values from related records through a relationship. Specify relationshipField (the relationship field in current table) and relatedField (the field to display from related table). Read-only field that automatically shows current value from linked record. Updates when related record changes. Useful for showing related data without duplicating storage (e.g., showing customer name in order, category name in product). More efficient than copying data.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "lookup"
                    },
                    "relationshipField": {
                      "type": "string",
                      "description": "Name of the relationship field to lookup from",
                      "minLength": 1
                    },
                    "relatedField": {
                      "type": "string",
                      "description": "Name of the field in the related table to display",
                      "minLength": 1
                    }
                  },
                  "required": ["id", "name", "type", "relationshipField", "relatedField"],
                  "additionalProperties": false
                },
                {
                  "title": "User Field",
                  "description": "Reference to application users/collaborators for assignments, ownership, and mentions. Links records to user accounts. Set allowMultiple=true to assign multiple users (e.g., project team members), or false for single assignment (e.g., task owner). Automatically indexed for efficient filtering by user. Displays user profile information (name, avatar). Useful for task assignments, record ownership, collaboration, and audit trails.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true,
                      "description": "Whether to create a database index on this field for faster queries"
                    },
                    "type": {
                      "type": "string",
                      "const": "user"
                    },
                    "allowMultiple": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to allow multiple users to be selected"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Created At Field",
                  "description": "Automatically set timestamp when record is created. Read-only field that cannot be modified after creation. Always uses current server time in UTC. Automatically indexed for sorting and filtering by creation time. Useful for audit trails, chronological ordering, and tracking when data was first entered. Displays as formatted datetime in UI.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "created-at"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Updated At Field",
                  "description": "Automatically updated timestamp whenever record is modified. Read-only field that updates to current server time on every save operation. Always uses UTC. Automatically indexed for sorting by recency. Useful for audit trails, showing last modification time, and detecting stale data. Displays as formatted datetime in UI.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "updated-at"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Created By Field",
                  "description": "Automatically set reference to the user who created the record. Read-only field that links to user account. Set only once when record is created and never changes. Automatically indexed for filtering by creator. Useful for audit trails, ownership tracking, and permissions. Displays user profile information (name, avatar) in UI.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "created-by"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Updated By Field",
                  "description": "Automatically updated reference to the user who last modified the record. Read-only field that links to user account. Updates on every save operation to current user. Automatically indexed for filtering by editor. Useful for audit trails, tracking who made recent changes, and collaboration history. Displays user profile information in UI.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "updated-by"
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Rating Field",
                  "description": "Star/icon rating field for user feedback and scoring. Configure maxRating (typically 5 or 10), display icon (star, heart, thumbs-up), and whether to allow half-ratings. Stores numeric value (1 to maxRating). Useful for product reviews, satisfaction scores, priority levels, and quality assessments. Displays as interactive icon picker in forms and static icons in tables.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "rating"
                    },
                    "max": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 10,
                      "default": 5,
                      "description": "Maximum rating value"
                    },
                    "style": {
                      "type": "string",
                      "enum": ["star", "number", "heart"],
                      "default": "star",
                      "description": "Visual style for the rating"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Duration Field",
                  "description": "Time duration in hours, minutes, and seconds",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "duration"
                    },
                    "format": {
                      "type": "string",
                      "enum": ["h:mm", "h:mm:ss", "minutes", "seconds"],
                      "default": "h:mm:ss",
                      "description": "Display format for the duration"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Rich Text Field",
                  "description": "Formatted text with markdown support",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "rich-text"
                    },
                    "maxLength": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Maximum length in characters"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Status Field",
                  "description": "Workflow status with customizable options and colors",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "indexed": {
                      "type": "boolean",
                      "default": true
                    },
                    "type": {
                      "type": "string",
                      "const": "status"
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "minLength": 1
                          },
                          "color": {
                            "type": "string",
                            "pattern": "^#[0-9a-fA-F]{6}$",
                            "description": "Hex color code for the status"
                          }
                        },
                        "required": ["value"]
                      },
                      "minItems": 1
                    },
                    "default": {
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "type", "options"],
                  "additionalProperties": false
                },
                {
                  "title": "Button Field",
                  "description": "Trigger actions or open URLs",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "button"
                    },
                    "label": {
                      "type": "string",
                      "description": "Button text label",
                      "minLength": 1
                    },
                    "action": {
                      "type": "string",
                      "enum": ["url", "automation"],
                      "description": "Type of action to trigger"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL to open (when action is 'url')"
                    },
                    "automation": {
                      "type": "string",
                      "description": "Automation name to trigger (when action is 'automation')"
                    }
                  },
                  "required": ["id", "name", "type", "label", "action"],
                  "additionalProperties": false
                },
                {
                  "title": "Autonumber Field",
                  "description": "Auto-incrementing unique number (read-only)",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "type": {
                      "type": "string",
                      "const": "autonumber"
                    },
                    "prefix": {
                      "type": "string",
                      "description": "Optional prefix for the autonumber",
                      "examples": ["INV-", "ORD-", ""]
                    },
                    "startFrom": {
                      "type": "integer",
                      "minimum": 1,
                      "default": 1,
                      "description": "Starting number"
                    },
                    "digits": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 10,
                      "default": 3,
                      "description": "Number of digits with zero padding"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Barcode Field",
                  "description": "Display and scan barcodes",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "barcode"
                    },
                    "format": {
                      "type": "string",
                      "enum": ["qr", "ean13", "code128", "code39"],
                      "default": "qr",
                      "description": "Barcode format"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Progress Field",
                  "description": "Visual progress bar (0-100%)",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "progress"
                    },
                    "color": {
                      "type": "string",
                      "pattern": "^#[0-9a-fA-F]{6}$",
                      "description": "Color of the progress bar"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Color Field",
                  "description": "Color picker for hex colors",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "color"
                    },
                    "default": {
                      "type": "string",
                      "pattern": "^#[0-9a-fA-F]{6}$"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Geolocation Field",
                  "description": "Geographic coordinates (latitude/longitude)",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "geolocation"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "JSON Field",
                  "description": "Flexible JSON field for storing structured data objects. Accepts any valid JSON (objects, arrays, primitives). Optionally provide a JSON Schema for validation to enforce structure and types. Useful for storing configuration objects, API responses, flexible attributes, and dynamic data that doesn't fit rigid schema. Displays with syntax highlighting and formatting in UI. Can be queried using JSON path expressions.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "json"
                    },
                    "schema": {
                      "type": "object",
                      "description": "Optional JSON Schema to validate the data"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                },
                {
                  "title": "Array Field",
                  "description": "List of values (tags, keywords)",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/definitions/id"
                    },
                    "name": {
                      "$ref": "#/definitions/name"
                    },
                    "required": {
                      "type": "boolean",
                      "default": false
                    },
                    "type": {
                      "type": "string",
                      "const": "array"
                    },
                    "itemType": {
                      "type": "string",
                      "enum": ["text", "number"],
                      "default": "text",
                      "description": "Type of items in the array"
                    },
                    "maxItems": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Maximum number of items allowed"
                    }
                  },
                  "required": ["id", "name", "type"],
                  "additionalProperties": false
                }
              ]
            }
          },
          "primaryKey": {
            "description": "Primary key configuration for the table. The primary key uniquely identifies each row and is automatically indexed.",
            "title": "Primary Key",
            "type": "object",
            "examples": [
              {
                "type": "auto-increment",
                "field": "id"
              },
              {
                "type": "uuid",
                "field": "id"
              },
              {
                "type": "composite",
                "fields": ["tenant_id", "user_id"]
              }
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["auto-increment", "uuid", "composite"],
                "default": "auto-increment",
                "description": "Primary key generation strategy. 'auto-increment' uses sequential integers (1, 2, 3...), 'uuid' generates random unique identifiers, 'composite' uses multiple fields together."
              },
              "field": {
                "type": "string",
                "description": "Field name for single-column primary key. Only used with 'auto-increment' or 'uuid' type.",
                "default": "id",
                "pattern": "^[a-z][a-z0-9_]*$",
                "examples": ["id", "user_id", "product_id"]
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "description": "Field names for composite primary key. Only used when type is 'composite'. The combination of these fields must be unique.",
                "minItems": 2,
                "examples": [
                  ["tenant_id", "user_id"],
                  ["order_id", "product_id"]
                ]
              }
            },
            "required": ["type"],
            "additionalProperties": false
          },
          "uniqueConstraints": {
            "description": "Composite unique constraints ensure that combinations of multiple field values are unique across all rows. Use this when you need uniqueness across multiple fields (e.g., email + tenant_id must be unique together).",
            "title": "Unique Constraints",
            "type": "array",
            "default": [],
            "examples": [
              [
                {
                  "name": "uq_user_email_tenant",
                  "fields": ["email", "tenant_id"]
                },
                {
                  "name": "uq_product_sku_variant",
                  "fields": ["sku", "variant_id"]
                }
              ]
            ],
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the unique constraint. Use descriptive names like 'uq_tablename_field1_field2'",
                  "minLength": 1,
                  "pattern": "^[a-z][a-z0-9_]*$",
                  "examples": [
                    "uq_users_email_tenant",
                    "uq_products_sku_variant",
                    "uq_orders_number_year"
                  ]
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": "Field names that must be unique together. The combination of values in these fields must be unique across all rows.",
                  "minItems": 2,
                  "examples": [
                    ["email", "tenant_id"],
                    ["first_name", "last_name", "birth_date"]
                  ]
                }
              },
              "required": ["name", "fields"],
              "additionalProperties": false
            }
          },
          "indexes": {
            "description": "Custom database indexes for query optimization. Indexes improve query performance by creating efficient lookup structures for specified fields.",
            "title": "Database Indexes",
            "type": "array",
            "default": [],
            "examples": [
              [
                {
                  "name": "idx_user_email",
                  "fields": ["email"]
                },
                {
                  "name": "idx_user_created",
                  "fields": ["created_at"],
                  "unique": false
                }
              ]
            ],
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the index. Use descriptive names like 'idx_tablename_fieldname'",
                  "minLength": 1,
                  "pattern": "^[a-z][a-z0-9_]*$",
                  "examples": ["idx_users_email", "idx_products_sku", "idx_orders_status"]
                },
                "fields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": "Field names to include in the index. Order matters for multi-column indexes.",
                  "minItems": 1,
                  "examples": [["email"], ["first_name", "last_name"], ["status", "created_at"]]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this index enforces uniqueness. Use this for unique constraints across multiple fields."
                }
              },
              "required": ["name", "fields"],
              "additionalProperties": false
            }
          }
        },
        "required": ["id", "name", "fields"],
        "additionalProperties": false
      },
      "x-user-stories": [
        "GIVEN the application is running WHEN I return the admin tables page THEN it should work correctly",
        "GIVEN the application is running WHEN I list tables THEN it should work correctly",
        "GIVEN the application is running WHEN I list table records THEN it should work correctly",
        "GIVEN the application is running WHEN I search table records THEN it should work correctly",
        "GIVEN the application is running WHEN I open and display a table record THEN it should work correctly",
        "GIVEN the application is running WHEN I create a table record THEN it should work correctly",
        "GIVEN I am working with required fields WHEN I create a table record THEN it should complete successfully",
        "GIVEN the application is running WHEN I update a table record THEN it should work correctly",
        "GIVEN the application is running WHEN I delete a table record THEN it should work correctly",
        "GIVEN I am working with missing required fields WHEN I not create a record from a POST request THEN it should complete successfully",
        "GIVEN the application is running WHEN I create a record from a POST request THEN it should work correctly",
        "GIVEN I am working with missing required fields WHEN I not create multiple records from a POST request THEN it should complete successfully",
        "GIVEN the application is running WHEN I create multiple records from a POST request THEN it should work correctly",
        "GIVEN the application is running WHEN I read a record from a GET request THEN it should work correctly",
        "GIVEN the application is running WHEN I list records from a GET request THEN it should work correctly",
        "GIVEN the application is running WHEN I update a record from a PATCH request THEN it should work correctly",
        "GIVEN the application is running WHEN I update multiple records from a PATCH request THEN it should work correctly",
        "GIVEN the application is running WHEN I delete a record from a DELETE request THEN it should work correctly",
        "GIVEN the application is running WHEN I delete multiple records from a DELETE request THEN it should work correctly"
      ]
    },
    "pages": {
      "description": "User interface pages and views that users interact with. Pages can display data from tables (table-view, detail-view), collect input through forms (form), or render custom HTML content. Each page has a unique URL path, navigation visibility settings, and configurable layouts. Pages connect your data model to the user experience.",
      "title": "Pages",
      "minItems": 1,
      "uiSchema": {
        "ui:ArrayFieldTemplate": "collapsible",
        "ui:options": {
          "orderable": true,
          "removable": true,
          "addable": true
        }
      },
      "default": [],
      "type": "array",
      "items": {
        "title": "Page",
        "description": "A page in your application",
        "version": "0.81.0",
        "anyOf": [
          {
            "title": "Custom HTML Page",
            "description": "Fully custom page with HTML, CSS, and JavaScript. Provides complete control over layout, styling, and interactivity. Use template variables {{field_name}} to inject dynamic data from tables. Supports embedded scripts for client-side logic. Useful for landing pages, dashboards, reports, and unique layouts that cannot be achieved with standard page types.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "custom-html"
              },
              "name": {
                "$ref": "#/definitions/name",
                "title": "Page Name",
                "description": "Internal name for the page",
                "placeholder": "Enter page name",
                "examples": ["home", "about", "contact"],
                "help": "Unique identifier for the page"
              },
              "path": {
                "$ref": "#/definitions/path",
                "title": "Page Path",
                "description": "URL path where the page is accessible",
                "placeholder": "/about",
                "examples": ["/", "/about", "/contact"],
                "help": "Must start with / and use lowercase letters, numbers, hyphens"
              },
              "head": {
                "description": "List of head elements (meta tags, scripts, styles, links)",
                "title": "Head Elements",
                "minItems": 0,
                "uiSchema": {
                  "ui:ArrayFieldTemplate": "collapsible",
                  "ui:options": {
                    "orderable": true,
                    "removable": true,
                    "addable": true
                  }
                },
                "default": [],
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "Meta Element",
                      "description": "Meta tag for page metadata",
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "const": "meta"
                        },
                        "name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": ["tag", "name", "content"],
                      "additionalProperties": false
                    },
                    {
                      "title": "Title Element",
                      "description": "Page title",
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "const": "title"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": ["tag", "content"],
                      "additionalProperties": false
                    },
                    {
                      "title": "Script Element",
                      "description": "JavaScript include or inline script",
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "const": "script"
                        },
                        "src": {
                          "type": "string",
                          "format": "uri"
                        },
                        "content": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "async": {
                          "type": "boolean"
                        },
                        "defer": {
                          "type": "boolean"
                        }
                      },
                      "required": ["tag"],
                      "additionalProperties": false
                    },
                    {
                      "title": "Style Element",
                      "description": "Inline CSS styles",
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "const": "style"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1
                        },
                        "type": {
                          "type": "string"
                        },
                        "media": {
                          "type": "string"
                        }
                      },
                      "required": ["tag", "content"],
                      "additionalProperties": false
                    },
                    {
                      "title": "Link Element",
                      "description": "External resource link",
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "const": "link"
                        },
                        "href": {
                          "type": "string",
                          "minLength": 1
                        },
                        "rel": {
                          "type": "string",
                          "minLength": 1
                        },
                        "type": {
                          "type": "string"
                        },
                        "media": {
                          "type": "string"
                        },
                        "sizes": {
                          "type": "string"
                        },
                        "crossorigin": {
                          "type": "string",
                          "enum": ["anonymous", "use-credentials"]
                        }
                      },
                      "required": ["tag", "href", "rel"],
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "body": {
                "description": "List of body elements for page content",
                "title": "Body Elements",
                "minItems": 1,
                "uiSchema": {
                  "ui:ArrayFieldTemplate": "collapsible",
                  "ui:options": {
                    "orderable": true,
                    "removable": true,
                    "addable": true
                  }
                },
                "default": [],
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "HTML Content",
                      "description": "Custom HTML content",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "const": "custom-html"
                        },
                        "content": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": ["type", "content"],
                      "additionalProperties": false
                    }
                  ]
                }
              }
            },
            "required": ["type", "name", "path", "head", "body"],
            "additionalProperties": false
          },
          {
            "title": "Form Page",
            "description": "Form for creating or editing table records. Configure which table the form operates on, which fields to display, validation rules, and submit behavior. Supports field grouping, conditional visibility, custom layouts, and multi-step forms. Automatically generates form UI from table schema. Useful for data entry, record editing, user profiles, and structured input.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "form"
              },
              "id": {
                "$ref": "#/definitions/id",
                "title": "Form ID",
                "description": "Unique identifier for the form",
                "examples": [1, 2, 100]
              },
              "name": {
                "$ref": "#/definitions/name",
                "title": "Form Name",
                "description": "Internal name for the form",
                "placeholder": "Enter form name",
                "examples": ["Contact Form", "Registration Form", "Feedback Survey"]
              },
              "path": {
                "$ref": "#/definitions/path",
                "title": "Form Path",
                "description": "URL path where the form is accessible",
                "placeholder": "/contact",
                "examples": ["/contact", "/signup", "/feedback"],
                "help": "Must start with / and use lowercase letters, numbers, hyphens"
              },
              "title": {
                "type": "string",
                "description": "Display title shown to users",
                "title": "Display Title",
                "placeholder": "Form title visible to users",
                "examples": ["Contact Us", "Create Your Account", "We Value Your Feedback"]
              },
              "description": {
                "type": "string",
                "description": "Help text or instructions for the form",
                "title": "Form Description",
                "placeholder": "Describe the purpose of this form",
                "examples": [
                  "Fill out this form to get in touch with our team",
                  "Please provide your details to create an account"
                ],
                "uiSchema": {
                  "ui:widget": "textarea",
                  "ui:rows": 2
                }
              },
              "inputs": {
                "description": "List of form fields for user input",
                "title": "Form Fields",
                "minItems": 1,
                "uiSchema": {
                  "ui:ArrayFieldTemplate": "collapsible",
                  "ui:options": {
                    "orderable": true,
                    "removable": true,
                    "addable": true
                  }
                },
                "default": [],
                "type": "array",
                "items": {
                  "title": "Input",
                  "description": "A form input field",
                  "anyOf": [
                    {
                      "title": "Text Input",
                      "description": "Text input field",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "defaultValue": {
                          "type": "string"
                        },
                        "placeholder": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": ["single-line-text", "long-text", "phone-number", "email", "url"]
                        }
                      },
                      "required": ["name", "type"],
                      "additionalProperties": false,
                      "x-user-stories": [
                        "GIVEN I am working with an email input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with an email input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with an email input WHEN I create a record THEN it should complete successfully",
                        "GIVEN I am working with a long text input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a long text input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a long text input WHEN I create a record THEN it should complete successfully",
                        "GIVEN I am working with a phone input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a phone number input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a phone number input WHEN I create a record THEN it should complete successfully",
                        "GIVEN I am working with a single line text input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a single line text input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a single line text input WHEN I create a record THEN it should complete successfully",
                        "GIVEN I am working with a url input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a url input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a url input WHEN I create a record THEN it should complete successfully"
                      ]
                    },
                    {
                      "title": "Checkbox Input",
                      "description": "Checkbox input field",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "defaultValue": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string",
                          "const": "checkbox"
                        }
                      },
                      "required": ["name", "type"],
                      "additionalProperties": false,
                      "x-user-stories": [
                        "GIVEN I am working with a checkbox input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a checkbox input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a checkbox input WHEN I create a record THEN it should complete successfully"
                      ]
                    },
                    {
                      "title": "Select Input",
                      "description": "Single select dropdown",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "defaultValue": {
                          "type": "string"
                        },
                        "placeholder": {
                          "type": "string"
                        },
                        "options": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            },
                            "required": ["label", "value"],
                            "additionalProperties": false
                          }
                        },
                        "type": {
                          "type": "string",
                          "const": "single-select"
                        }
                      },
                      "required": ["name", "options", "type"],
                      "additionalProperties": false,
                      "x-user-stories": [
                        "GIVEN I am working with a single select input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a single select input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a single select input WHEN I create a record THEN it should complete successfully"
                      ]
                    },
                    {
                      "title": "Attachment Input",
                      "description": "File upload field",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "accept": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "const": "single-attachment"
                        }
                      },
                      "required": ["name", "type"],
                      "additionalProperties": false,
                      "x-user-stories": [
                        "GIVEN I am working with a single attachment input WHEN I display a form THEN it should complete successfully",
                        "GIVEN I am working with a form with a single attachment input WHEN I submit it THEN it should run an automation",
                        "GIVEN I am working with a single attachment input WHEN I create a record THEN it should complete successfully"
                      ]
                    }
                  ]
                }
              },
              "action": {
                "type": "string",
                "description": "What to do with form submission",
                "enum": ["create-record", "send-email", "trigger-automation"],
                "default": "create-record"
              },
              "table": {
                "type": "string",
                "description": "Table to save form data (required for create-record action)",
                "minLength": 1
              },
              "successMessage": {
                "type": "string",
                "description": "Message displayed after successful form submission",
                "title": "Success Message",
                "placeholder": "Thank you for your submission!",
                "examples": [
                  "Thank you! We will get back to you soon.",
                  "Your account has been created successfully!",
                  "Form submitted successfully."
                ],
                "uiSchema": {
                  "ui:widget": "textarea",
                  "ui:rows": 2
                }
              },
              "redirectUrl": {
                "$ref": "#/definitions/path",
                "description": "URL to redirect to after successful submission"
              }
            },
            "required": ["type", "id", "name", "path", "inputs", "action"],
            "additionalProperties": false,
            "x-user-stories": [
              "GIVEN I am working with a title WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with a path WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with a description WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with inputs WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with inputs placeholders WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with inputs descriptions WHEN I display a form THEN it should complete successfully",
              "GIVEN I am working with submit button WHEN I display a form THEN it should complete successfully",
              "GIVEN the application is running WHEN I list forms THEN it should work correctly",
              "GIVEN the application is running WHEN I open a form in a new page THEN it should work correctly",
              "GIVEN the form is submitted WHEN I display an error THEN it should succeed",
              "GIVEN the application is running WHEN I return a list of forms THEN it should work correctly",
              "GIVEN the application is running WHEN I return a form from a path THEN it should work correctly"
            ]
          },
          {
            "title": "Table View Page",
            "description": "Data table view displaying records from a database table. Supports filtering, sorting, searching, pagination, grouping, and custom columns. Configure visible fields, column order, default filters, and row actions. Provides spreadsheet-like interface for browsing and managing data. Useful for listing records, data exploration, and bulk operations.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "table-view"
              },
              "name": {
                "$ref": "#/definitions/name",
                "title": "Page Name",
                "description": "Internal name for the page"
              },
              "path": {
                "$ref": "#/definitions/path",
                "title": "Page Path",
                "description": "URL path where the page is accessible",
                "placeholder": "/users",
                "examples": ["/users", "/products", "/orders"]
              },
              "table": {
                "type": "string",
                "description": "Name of the table to display",
                "minLength": 1
              },
              "title": {
                "type": "string",
                "description": "Display title for the page",
                "minLength": 1
              },
              "columns": {
                "type": "array",
                "description": "Which table fields to show as columns",
                "items": {
                  "type": "string"
                },
                "minItems": 1
              },
              "searchable": {
                "type": "boolean",
                "description": "Enable search functionality",
                "default": true
              },
              "sortable": {
                "type": "boolean",
                "description": "Enable column sorting",
                "default": true
              },
              "filterable": {
                "type": "boolean",
                "description": "Enable column filtering",
                "default": true
              },
              "actions": {
                "type": "object",
                "description": "Enable CRUD actions",
                "properties": {
                  "create": {
                    "type": "boolean",
                    "default": true
                  },
                  "edit": {
                    "type": "boolean",
                    "default": true
                  },
                  "delete": {
                    "type": "boolean",
                    "default": true
                  },
                  "export": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false
              }
            },
            "required": ["type", "name", "path", "table", "columns"],
            "additionalProperties": false
          },
          {
            "title": "Detail View Page",
            "description": "Single record detail view showing all fields from a table in a read-only or editable layout. Configure field grouping, layout (single column, two column, grid), related record sections, and action buttons. Supports inline editing, field history, and related data display. Useful for record overview, profile pages, and detailed information views.",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "detail-view"
              },
              "name": {
                "$ref": "#/definitions/name",
                "title": "Page Name",
                "description": "Internal name for the page"
              },
              "path": {
                "$ref": "#/definitions/path",
                "title": "Page Path",
                "description": "URL path with :id parameter",
                "placeholder": "/users/:id",
                "examples": ["/users/:id", "/products/:id", "/orders/:id"]
              },
              "table": {
                "type": "string",
                "description": "Name of the table to display",
                "minLength": 1
              },
              "title": {
                "type": "string",
                "description": "Display title for the page",
                "minLength": 1
              },
              "layout": {
                "type": "string",
                "description": "Layout style for the detail view",
                "enum": ["single-column", "two-column", "tabs", "accordion"],
                "default": "single-column"
              },
              "sections": {
                "type": "array",
                "description": "Sections grouping related fields",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "Section title",
                      "minLength": 1
                    },
                    "fields": {
                      "type": "array",
                      "description": "Fields to display in this section",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1
                    }
                  },
                  "required": ["title", "fields"],
                  "additionalProperties": false
                },
                "minItems": 1
              }
            },
            "required": ["type", "name", "path", "table", "sections"],
            "additionalProperties": false
          }
        ]
      },
      "x-user-stories": [
        "GIVEN the application is running WHEN I return the home page THEN it should work correctly",
        "GIVEN I am working with custom HTML WHEN I return a page THEN it should complete successfully",
        "GIVEN I am working with title WHEN I return a page THEN it should complete successfully",
        "GIVEN I am working with description meta tag WHEN I return a page THEN it should complete successfully",
        "GIVEN the application is running WHEN I include Tailwind CSS script from CDN THEN it should work correctly",
        "GIVEN the application is running WHEN I include inline Tailwind theme styles THEN it should work correctly",
        "GIVEN the application is running WHEN I include external stylesheet link THEN it should work correctly",
        "GIVEN I am working with all head elements WHEN I have proper HTML structure THEN it should complete successfully",
        "GIVEN the application is running WHEN I render empty body correctly THEN it should work correctly",
        "GIVEN the application is running WHEN I load page successfully and take screenshot THEN it should work correctly"
      ]
    },
    "automations": {
      "description": "Workflow automations that execute actions when triggered by specific events or conditions. Automations enable business logic such as sending emails when records are created, updating related data when values change, or integrating with external services via webhooks. Each automation consists of a trigger (when to run) and a sequence of actions (what to do).",
      "title": "Automations",
      "uiSchema": {
        "ui:ArrayFieldTemplate": "collapsible",
        "ui:options": {
          "orderable": true,
          "removable": true,
          "addable": true
        }
      },
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/automation"
      }
    },
    "connections": {
      "description": "External service integrations that connect your application to third-party platforms. Connections enable OAuth authentication, API access, and data synchronization with services like Calendly (scheduling), Airtable (databases), Google (workspace apps), LinkedIn (professional network), and Facebook (social platform). Each connection requires proper credentials and scopes.",
      "title": "Connections",
      "uiSchema": {
        "ui:ArrayFieldTemplate": "collapsible",
        "ui:options": {
          "orderable": true,
          "removable": true,
          "addable": true
        }
      },
      "default": [],
      "type": "array",
      "items": {
        "title": "Service Connection",
        "description": "Connect to an external service",
        "uiSchema": {
          "ui:widget": "connection-selector",
          "ui:options": {
            "showIcon": true,
            "groupBy": "category"
          }
        },
        "anyOf": [
          {
            "title": "Calendly",
            "description": "The Calendly connection is a connection to the Calendly API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "calendly"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false,
            "x-user-stories": [
              "GIVEN the application is running WHEN I connect to calendly THEN it should work correctly"
            ]
          },
          {
            "title": "Airtable",
            "description": "The Airtable connection is a connection to the Airtable API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "airtable"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false,
            "x-user-stories": [
              "GIVEN the application is running WHEN I connect to airtable THEN it should work correctly"
            ]
          },
          {
            "anyOf": [
              {
                "title": "Google Gmail",
                "description": "The Google Gmail connection is a connection to the Google Gmail API",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "name": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "service": {
                    "type": "string",
                    "const": "google-gmail"
                  }
                },
                "required": ["id", "name", "clientId", "clientSecret", "service"],
                "additionalProperties": false
              },
              {
                "title": "Google Sheets",
                "description": "The Google Sheets connection is a connection to the Google Sheets API",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "name": {
                    "type": "string"
                  },
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "service": {
                    "type": "string",
                    "const": "google-sheets"
                  }
                },
                "required": ["id", "name", "clientId", "clientSecret", "service"],
                "additionalProperties": false
              }
            ],
            "x-user-stories": [
              "GIVEN the application is running WHEN I connect to Google Sheets THEN it should work correctly",
              "GIVEN the application is running WHEN I connect to Gmail THEN it should work correctly"
            ]
          },
          {
            "title": "LinkedIn Ads",
            "description": "The LinkedIn Ads connection is a connection to the LinkedIn Ads API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "linkedin-ads"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false,
            "x-user-stories": [
              "GIVEN the application is running WHEN I connect to linkedin THEN it should work correctly"
            ]
          },
          {
            "title": "Facebook Ads",
            "description": "The Facebook Ads connection is a connection to the Facebook Ads API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "facebook-ads"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false,
            "x-user-stories": [
              "GIVEN the application is running WHEN I connect to facebook THEN it should work correctly"
            ]
          },
          {
            "title": "Notion",
            "description": "The Notion connection is a connection to the Notion API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "notion"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false
          },
          {
            "title": "Qonto",
            "description": "The Qonto connection is a connection to the Qonto API",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "name": {
                "type": "string"
              },
              "clientId": {
                "type": "string"
              },
              "clientSecret": {
                "type": "string"
              },
              "service": {
                "type": "string",
                "const": "qonto"
              }
            },
            "required": ["id", "name", "clientId", "clientSecret", "service"],
            "additionalProperties": false
          }
        ]
      },
      "x-user-stories": [
        "GIVEN the application is running WHEN I connect a connection THEN it should work correctly",
        "GIVEN the application is running WHEN I disconnect a connection THEN it should work correctly",
        "GIVEN the application is running WHEN I copy shareable connection link THEN it should work correctly",
        "GIVEN the application is running WHEN I return a list of connections THEN it should work correctly"
      ]
    }
  },
  "required": ["name", "description", "version", "tables", "pages", "automations", "connections"],
  "additionalProperties": false
}
