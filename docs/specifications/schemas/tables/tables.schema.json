{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Data Tables",
  "description": "Collection of database tables that define the data structure of your application. Each table represents an entity (e.g., users, products, orders) with fields that define the schema. Tables support relationships, indexes, constraints, and various field types. Tables are the foundation of your application's data model and determine what information can be stored and how it relates.",
  "default": [],
  "type": "array",
  "items": {
    "title": "Data Table",
    "description": "A database table definition with its fields and structure",
    "version": "0.81.0",
    "type": "object",
    "properties": {
      "id": {
        "$ref": "../common/definitions.schema.json#/definitions/id",
        "title": "Table ID",
        "description": "Unique identifier for the table",
        "examples": [1, 2, 100],
        "x-user-stories": [
          "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
          "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
          "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
        ]
      },
      "name": {
        "$ref": "../common/definitions.schema.json#/definitions/name",
        "title": "Table Name",
        "description": "Name of the database table",
        "placeholder": "Enter table name",
        "examples": ["users", "products", "orders", "customers"],
        "pattern": "^[a-z][a-z0-9_]*$",
        "help": "Use lowercase letters, numbers, and underscores. Must start with a letter.",
        "x-user-stories": [
          "GIVEN user configures name WHEN validating input THEN value should meet schema requirements",
          "GIVEN name is set WHEN processing configuration THEN value should be used correctly"
        ]
      },
      "fields": {
        "description": "List of fields/columns in this table",
        "title": "Table Fields",
        "minItems": 1,
        "default": [],
        "type": "array",
        "items": {
          "title": "Field",
          "description": "A field in the table",
          "anyOf": [
            {
              "title": "Single Line Text Field",
              "description": "Short text input limited to a single line. Ideal for names, titles, labels, and brief identifiers. Text is stored as-is without formatting. Required flag makes the field mandatory. Unique constraint ensures no duplicate values across records. Indexing improves search and filter performance on this field.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "single-line-text",
                  "x-business-rules": [
                    "Constant value 'single-line-text' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Single Line Text Field is configured WHEN validating schema THEN type must be 'single-line-text'",
                    "GIVEN type is set to 'single-line-text' WHEN processing field THEN it should be treated as a Single Line Text Field"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I create a single-line text field WHEN I add a record THEN it should accept text without line breaks",
                "GIVEN I create a single-line text field with unique constraint WHEN I add duplicate text THEN it should reject the input",
                "GIVEN I create a required single-line text field WHEN I submit without value THEN it should show validation error"
              ],
              "x-business-rules": [
                "Single-line constraint prevents multi-line input, ensuring consistent formatting and UI display",
                "Text is stored without formatting, preserving raw input for maximum flexibility"
              ]
            },
            {
              "title": "Long Text Field",
              "description": "Multi-line text input for paragraphs, descriptions, notes, and comments. Supports line breaks and longer content. Text is stored as-is without rich formatting (no bold, italics, etc.). Required flag makes the field mandatory. Indexing improves search performance but may be slower for very long content.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "long-text",
                  "x-business-rules": [
                    "Constant value 'long-text' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Long Text Field is configured WHEN validating schema THEN type must be 'long-text'",
                    "GIVEN type is set to 'long-text' WHEN processing field THEN it should be treated as a Long Text Field"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I create a long text field WHEN I add a record THEN it should accept multi-line text with line breaks",
                "GIVEN I create a long text field WHEN I paste formatted text THEN it should strip formatting and preserve plain text",
                "GIVEN I create a required long text field WHEN I submit without value THEN it should show validation error"
              ],
              "x-business-rules": [
                "Multi-line support allows paragraphs and structured content with line breaks",
                "Text is stored without rich formatting (HTML, Markdown) to prevent injection attacks and maintain data portability"
              ]
            },
            {
              "title": "Phone Number Field",
              "description": "Text field optimized for phone numbers with automatic formatting based on detected country code. Stores the raw phone number value without validation to support international formats. Display formatting helps readability but doesn't enforce strict patterns. Required flag makes the field mandatory. Unique constraint ensures no duplicate phone numbers.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "phone-number",
                  "x-business-rules": [
                    "Constant value 'phone-number' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Phone Number Field is configured WHEN validating schema THEN type must be 'phone-number'",
                    "GIVEN type is set to 'phone-number' WHEN processing field THEN it should be treated as a Phone Number Field"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I create a phone number field WHEN I enter a phone number THEN it should format it automatically for display",
                "GIVEN I create a phone number field WHEN I enter an international number THEN it should accept it without validation errors",
                "GIVEN I create a phone number field with unique constraint WHEN I enter a duplicate number THEN it should reject the input"
              ],
              "x-business-rules": [
                "Phone numbers are stored as raw text to support diverse international formats without strict validation",
                "Automatic formatting improves readability but doesn't restrict input, allowing flexibility for edge cases"
              ]
            },
            {
              "title": "Email Field",
              "description": "Text field with email format validation (username@domain). Validates email structure (presence of @ symbol and domain) without sending test emails. Stores email as lowercase for consistent lookups. Required flag makes the field mandatory. Unique constraint ensures no duplicate emails. Indexing enables fast email-based queries.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "email",
                  "x-business-rules": [
                    "Constant value 'email' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Email Field is configured WHEN validating schema THEN type must be 'email'",
                    "GIVEN type is set to 'email' WHEN processing field THEN it should be treated as a Email Field"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I create an email field WHEN I enter a valid email THEN it should accept the input",
                "GIVEN I create an email field WHEN I enter text without @ symbol THEN it should show validation error",
                "GIVEN I create an email field with unique constraint WHEN I enter a duplicate email THEN it should reject the input regardless of case"
              ],
              "x-business-rules": [
                "Email validation checks structure (@ symbol, domain) without verifying deliverability to balance usability and data quality",
                "Emails are stored as lowercase to prevent duplicate entries differing only by case (Email@example.com vs email@example.com)"
              ]
            },
            {
              "title": "URL Field",
              "description": "Text field for web links with URL format validation (http:// or https://). Validates URL structure and protocol without checking if the link is reachable. Stores full URL including protocol. Display shows clickable link in the UI. Required flag makes the field mandatory. Unique constraint ensures no duplicate URLs.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "url",
                  "x-business-rules": [
                    "Constant value 'url' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a URL Field is configured WHEN validating schema THEN type must be 'url'",
                    "GIVEN type is set to 'url' WHEN processing field THEN it should be treated as a URL Field"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I create a URL field WHEN I enter a valid URL with http:// or https:// THEN it should accept the input",
                "GIVEN I create a URL field WHEN I enter text without protocol THEN it should show validation error",
                "GIVEN I create a URL field WHEN I view the record THEN the URL should display as a clickable link"
              ],
              "x-business-rules": [
                "URL validation checks structure and protocol (http/https) without verifying link reachability to avoid external dependencies",
                "Full URL with protocol is stored to ensure links work correctly when clicked (http://example.com, not example.com)"
              ]
            },
            {
              "title": "Integer Field",
              "description": "Whole number field without decimal places. Ideal for counts, IDs, quantities, ages, and rankings. Supports min/max constraints for range validation. Required flag makes the field mandatory. Unique constraint ensures no duplicate values. Indexing enables efficient numerical sorting and filtering.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "integer",
                  "x-business-rules": [
                    "Constant value 'integer' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Integer Field is configured WHEN validating schema THEN type must be 'integer'",
                    "GIVEN type is set to 'integer' WHEN processing field THEN it should be treated as a Integer Field"
                  ]
                },
                "min": {
                  "type": "number",
                  "description": "Minimum value",
                  "x-user-stories": [
                    "GIVEN user provides min WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric min WHEN validating input THEN error should require number"
                  ]
                },
                "max": {
                  "type": "number",
                  "description": "Maximum value",
                  "x-user-stories": [
                    "GIVEN user provides max WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric max WHEN validating input THEN error should require number"
                  ]
                },
                "default": {
                  "type": "number",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric default WHEN validating input THEN error should require number"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Integer constraint ensures only whole numbers are accepted, preventing decimal input",
                "Min/max constraints provide range validation to keep values within business-defined bounds"
              ]
            },
            {
              "title": "Decimal Field",
              "description": "Floating-point number field with configurable decimal precision (0-10 places). Ideal for measurements, scores, ratings, and scientific data. Precision determines how many decimal places are stored and displayed (default: 2). Supports min/max constraints for range validation. Required flag makes the field mandatory.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "decimal",
                  "x-business-rules": [
                    "Constant value 'decimal' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Decimal Field is configured WHEN validating schema THEN type must be 'decimal'",
                    "GIVEN type is set to 'decimal' WHEN processing field THEN it should be treated as a Decimal Field"
                  ]
                },
                "min": {
                  "type": "number",
                  "description": "Minimum value",
                  "x-user-stories": [
                    "GIVEN user provides min WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric min WHEN validating input THEN error should require number"
                  ]
                },
                "max": {
                  "type": "number",
                  "description": "Maximum value",
                  "x-user-stories": [
                    "GIVEN user provides max WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric max WHEN validating input THEN error should require number"
                  ]
                },
                "default": {
                  "type": "number",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric default WHEN validating input THEN error should require number"
                  ]
                },
                "precision": {
                  "type": "integer",
                  "description": "Number of decimal places",
                  "minimum": 0,
                  "maximum": 10,
                  "default": 2,
                  "x-business-rules": [
                    "Numeric range (0-10) prevents overflow errors and ensures values stay within valid business bounds",
                    "Defaults to 2 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides precision between 0 and 10 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides precision below 0 WHEN validating input THEN error should enforce minimum value",
                    "GIVEN user provides precision above 10 WHEN validating input THEN error should enforce maximum value"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Precision (0-10 decimal places) controls rounding and storage, preventing floating-point errors",
                "Default precision of 2 decimal places suits most use cases (prices, percentages) without requiring configuration"
              ]
            },
            {
              "title": "Currency Field",
              "description": "Monetary value field with currency code (USD, EUR, GBP, etc.). Stores numeric value with 2 decimal places for cents/pence. Currency code determines display format and symbol ($, \u20ac, \u00a3). Supports min/max constraints for range validation. Required flag makes the field mandatory. Indexing enables efficient sorting by monetary value.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "currency",
                  "x-business-rules": [
                    "Constant value 'currency' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Currency Field is configured WHEN validating schema THEN type must be 'currency'",
                    "GIVEN type is set to 'currency' WHEN processing field THEN it should be treated as a Currency Field"
                  ]
                },
                "min": {
                  "type": "number",
                  "description": "Minimum value",
                  "x-user-stories": [
                    "GIVEN user provides min WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric min WHEN validating input THEN error should require number"
                  ]
                },
                "max": {
                  "type": "number",
                  "description": "Maximum value",
                  "x-user-stories": [
                    "GIVEN user provides max WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric max WHEN validating input THEN error should require number"
                  ]
                },
                "default": {
                  "type": "number",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric default WHEN validating input THEN error should require number"
                  ]
                },
                "currency": {
                  "type": "string",
                  "description": "Currency code (ISO 4217)",
                  "default": "USD",
                  "examples": ["USD", "EUR", "GBP", "JPY", "CAD"],
                  "x-business-rules": [
                    "Defaults to \"USD\" when not specified, providing sensible fallback behavior without requiring explicit configuration",
                    "Currency code should follow ISO 4217 standard for international compatibility"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides currency WHEN validating input THEN string value should be accepted",
                    "GIVEN currency is empty string WHEN validating input THEN default to USD"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Currency code is stored separately from value to support multi-currency applications and accurate conversions",
                "Fixed 2 decimal places match standard accounting practices for monetary values (cents/pence precision)",
                "Default currency of USD provides sensible fallback for applications without multi-currency needs"
              ]
            },
            {
              "title": "Percentage Field",
              "description": "Ratio field displayed as percentage (0-100%). Stores value as decimal (0.0-1.0 or 0-100 depending on configuration). Display adds % symbol automatically. Supports min/max constraints for range validation (typically 0-100). Required flag makes the field mandatory. Useful for completion rates, discounts, and probability values.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "const": "percentage",
                  "x-business-rules": [
                    "Constant value 'percentage' ensures type safety and enables discriminated unions for field type validation"
                  ],
                  "x-user-stories": [
                    "GIVEN a Percentage Field is configured WHEN validating schema THEN type must be 'percentage'",
                    "GIVEN type is set to 'percentage' WHEN processing field THEN it should be treated as a Percentage Field"
                  ]
                },
                "min": {
                  "type": "number",
                  "description": "Minimum value",
                  "x-user-stories": [
                    "GIVEN user provides min WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric min WHEN validating input THEN error should require number"
                  ]
                },
                "max": {
                  "type": "number",
                  "description": "Maximum value",
                  "x-user-stories": [
                    "GIVEN user provides max WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric max WHEN validating input THEN error should require number"
                  ]
                },
                "default": {
                  "type": "number",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN numeric value should be accepted",
                    "GIVEN user provides non-numeric default WHEN validating input THEN error should require number"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Percentage values are displayed with % symbol but stored as numbers to enable mathematical operations",
                "Min/max constraints typically enforce 0-100 range but can be configured for specific use cases (e.g., growth rates >100%)"
              ]
            },
            {
              "title": "Date Field",
              "description": "Date and time field with three modes: date for calendar dates only, datetime for timestamp with date and time, time for clock time only. Supports custom display formats (YYYY-MM-DD, MM/DD/YYYY, DD-MM-YYYY), timezone specification for datetime fields (UTC, America/New_York, Europe/London), and optional time component for date fields. Useful for tracking events, deadlines, and temporal data.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "unique": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether this field must contain unique values across all rows",
                  "x-business-rules": [
                    "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": ["date", "datetime", "time"],
                  "x-business-rules": [
                    "Restricted to 3 allowed values (date, datetime, time) to maintain type safety and enable clear validation error messages"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects type from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid type value WHEN validating input THEN error should list valid options: date, datetime, time",
                    "GIVEN type is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "Date format string",
                  "default": "YYYY-MM-DD",
                  "examples": ["YYYY-MM-DD", "MM/DD/YYYY", "DD-MM-YYYY"],
                  "x-business-rules": [
                    "Defaults to \"YYYY-MM-DD\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides format WHEN validating input THEN string value should be accepted",
                    "GIVEN format is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                },
                "includeTime": {
                  "type": "boolean",
                  "description": "Include time component (for date type)",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN includeTime is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN includeTime is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with includeTime WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "timezone": {
                  "type": "string",
                  "description": "Timezone for datetime fields",
                  "default": "UTC",
                  "examples": ["UTC", "America/New_York", "Europe/London"],
                  "x-business-rules": [
                    "Defaults to \"UTC\" when not specified, providing sensible fallback behavior without requiring explicit configuration",
                    "Must be valid IANA timezone identifier to ensure scheduled operations execute at correct local times across DST transitions"
                  ],
                  "x-user-stories": [
                    "GIVEN automation with timezone WHEN cron expression evaluates THEN execution should occur at correct local time",
                    "GIVEN invalid timezone identifier WHEN validating configuration THEN error should list valid IANA timezones",
                    "GIVEN timezone handles DST transitions WHEN schedule crosses DST boundary THEN execution should occur at correct wall-clock time"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related date field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Checkbox Field",
              "description": "Boolean checkbox field for true/false values. Displays as a toggleable checkbox in forms and checkmark/cross in tables. Useful for status flags (active/inactive, published/draft), feature toggles, and yes/no questions. Supports default value. Cannot be required (defaults to false).",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "checkbox",
                  "x-business-rules": [
                    "Fixed value (checkbox) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.3.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='checkbox' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "default": {
                  "type": "boolean",
                  "x-business-rules": [
                    "Boolean flag enables/disables default functionality through simple true/false configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN default is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN default is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with default WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I am working with a checkbox field WHEN I create a record THEN it should complete successfully"
              ],
              "x-business-rules": [
                "Object structure groups related checkbox field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Single Select Field",
              "description": "Single selection dropdown from predefined options. Users can choose exactly one value from the list. Useful for status fields (Active, Inactive, Pending), categories, priority levels (High, Medium, Low), and enumerated values. Requires at least one option. Supports default value. Indexing improves filtering by option value.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "single-select",
                  "x-business-rules": [
                    "Fixed value (single-select) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.4.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='single-select' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "default": [],
                  "x-business-rules": [
                    "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides options with at least 1 items WHEN validating input THEN array should be accepted",
                    "GIVEN user provides options with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type", "options"],
              "additionalProperties": false,
              "x-user-stories": [
                "GIVEN I am working with a single select field WHEN I create a record THEN it should complete successfully",
                "GIVEN I am working with an invalid single select field WHEN I create a record THEN it should fail with validation error"
              ],
              "x-business-rules": [
                "Object structure groups related single select field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Multi Select Field",
              "description": "Multiple selection field allowing users to choose zero or more options from a predefined list. Displays as checkboxes or multi-select dropdown. Useful for tags, categories, features, skills, and attributes that can have multiple values. Supports maxSelections constraint to limit number of choices. Requires at least one option. Stores values as an array.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "multi-select",
                  "x-business-rules": [
                    "Fixed value (multi-select) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.5.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='multi-select' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "default": [],
                  "x-business-rules": [
                    "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides options with at least 1 items WHEN validating input THEN array should be accepted",
                    "GIVEN user provides options with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
                  ]
                },
                "maxSelections": {
                  "type": "integer",
                  "description": "Maximum number of selections allowed",
                  "minimum": 1,
                  "x-business-rules": ["Maximum number of selections allowed"],
                  "x-user-stories": [
                    "GIVEN user provides maxSelections >= 1 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides maxSelections < 1 WHEN validating input THEN error should enforce minimum value"
                  ]
                },
                "default": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-business-rules": [
                    "Array enables multiple default to be configured, supporting flexible workflows and batch operations"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides default array WHEN validating input THEN items should be processed in order",
                    "GIVEN default array is empty WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type", "options"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related multi select field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Relationship Field",
              "description": "Foreign key relationship to another table creating associations between entities. Supports three relationship types: one-to-one (single unique reference), one-to-many (single reference to many records), many-to-many (junction table for bidirectional references). Configure onDelete behavior (cascade deletes related, set-null clears reference, restrict prevents deletion, no-action does nothing). Configure onUpdate behavior for key changes. Specify displayField to show human-readable value from related table. Automatically indexed for query performance.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether to create a database index on this field for faster queries (recommended for foreign keys)",
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "relationship",
                  "x-business-rules": [
                    "Fixed value (relationship) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.6.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='relationship' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "relatedTable": {
                  "type": "string",
                  "description": "Name of the related table",
                  "minLength": 1,
                  "x-business-rules": ["Name of the related table"],
                  "x-user-stories": [
                    "GIVEN user provides relatedTable with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides relatedTable shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "relationType": {
                  "type": "string",
                  "enum": ["one-to-one", "one-to-many", "many-to-many"],
                  "default": "one-to-many",
                  "description": "Type of relationship",
                  "x-business-rules": [
                    "Restricted to 3 allowed values (one-to-one, one-to-many, many-to-many) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"one-to-many\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects relationType from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid relationType value WHEN validating input THEN error should list valid options: one-to-one, one-to-many, many-to-many",
                    "GIVEN relationType is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "displayField": {
                  "type": "string",
                  "description": "Field from related table to display in UI",
                  "minLength": 1,
                  "x-business-rules": ["Field from related table to display in UI"],
                  "x-user-stories": [
                    "GIVEN user provides displayField with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides displayField shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "onDelete": {
                  "type": "string",
                  "enum": ["cascade", "set-null", "restrict", "no-action"],
                  "default": "restrict",
                  "description": "Action to take when the related record is deleted",
                  "x-business-rules": [
                    "Restricted to 4 allowed values (cascade, set-null, restrict, ...) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"restrict\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects onDelete from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid onDelete value WHEN validating input THEN error should list valid options: cascade, set-null, restrict",
                    "GIVEN onDelete is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "onUpdate": {
                  "type": "string",
                  "enum": ["cascade", "set-null", "restrict", "no-action"],
                  "default": "cascade",
                  "description": "Action to take when the related record's key is updated",
                  "x-business-rules": [
                    "Restricted to 4 allowed values (cascade, set-null, restrict, ...) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"cascade\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects onUpdate from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid onUpdate value WHEN validating input THEN error should list valid options: cascade, set-null, restrict",
                    "GIVEN onUpdate is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                }
              },
              "required": ["id", "name", "type", "relatedTable", "relationType"],
              "additionalProperties": false,
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each relationship field can be unambiguously referenced"
              ]
            },
            {
              "title": "Single Attachment Field",
              "description": "Single file upload field with configurable storage backend. Supports local filesystem or S3-compatible cloud storage. Configure maxSize limit (in bytes, default 10MB), allowedTypes using MIME types or wildcards (e.g., image/*, application/pdf). Useful for profile pictures, documents, invoices, and single-file attachments. For S3 provider, bucket name is required.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "single-attachment",
                  "x-business-rules": [
                    "Fixed value (single-attachment) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.7.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='single-attachment' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "storage": {
                  "type": "object",
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": ["local", "s3"],
                      "default": "local",
                      "description": "Storage provider",
                      "x-business-rules": [
                        "Restricted to 2 allowed values (local, s3) to maintain type safety and enable clear validation error messages",
                        "Defaults to \"local\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user selects provider from valid options WHEN validating input THEN selection should be accepted",
                        "GIVEN user provides invalid provider value WHEN validating input THEN error should list valid options: local, s3",
                        "GIVEN provider is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                      ]
                    },
                    "bucket": {
                      "type": "string",
                      "description": "S3 bucket name (required for s3 provider)",
                      "x-business-rules": ["S3 bucket name (required for s3 provider)"],
                      "x-user-stories": [
                        "GIVEN user provides bucket WHEN validating input THEN string value should be accepted",
                        "GIVEN bucket is empty string WHEN validating input THEN behavior should follow optional/required rules"
                      ]
                    },
                    "maxSize": {
                      "type": "integer",
                      "description": "Maximum file size in bytes",
                      "default": 10485760,
                      "minimum": 1,
                      "x-business-rules": [
                        "Defaults to 10485760 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user provides maxSize >= 1 WHEN validating input THEN value should be accepted",
                        "GIVEN user provides maxSize < 1 WHEN validating input THEN error should enforce minimum value"
                      ]
                    },
                    "allowedTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Allowed MIME types or file extensions",
                      "default": ["image/*", "application/pdf"],
                      "examples": [["image/*"], ["application/pdf", "application/msword"]],
                      "x-business-rules": [
                        "Defaults to [\"image/*\",\"application/pdf\"] when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user provides allowedTypes array WHEN validating input THEN items should be processed in order",
                        "GIVEN allowedTypes array is empty WHEN validating input THEN behavior should follow optional/required rules"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "x-business-rules": [
                    "Object structure groups related storage properties for better organization and type-safe access"
                  ],
                  "x-user-stories": [
                    "GIVEN user configures storage WHEN validating input THEN value should meet schema requirements",
                    "GIVEN storage is set WHEN processing configuration THEN value should be used correctly"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related single attachment field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Multiple Attachments Field",
              "description": "Multiple file upload field for collections of attachments. Supports local or S3 storage like single-attachment but allows multiple files per record. Configure maxFiles limit (default 10), maxSize per file (default 10MB), and allowedTypes using MIME types. Useful for document collections, image galleries, contract attachments, and multi-file uploads. Each file validated independently against constraints.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "multiple-attachments",
                  "x-business-rules": [
                    "Fixed value (multiple-attachments) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.8.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='multiple-attachments' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "maxFiles": {
                  "type": "integer",
                  "description": "Maximum number of files allowed",
                  "minimum": 1,
                  "default": 10,
                  "x-business-rules": [
                    "Defaults to 10 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides maxFiles >= 1 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides maxFiles < 1 WHEN validating input THEN error should enforce minimum value"
                  ]
                },
                "storage": {
                  "type": "object",
                  "properties": {
                    "provider": {
                      "type": "string",
                      "enum": ["local", "s3"],
                      "default": "local",
                      "description": "Storage provider",
                      "x-business-rules": [
                        "Restricted to 2 allowed values (local, s3) to maintain type safety and enable clear validation error messages",
                        "Defaults to \"local\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user selects provider from valid options WHEN validating input THEN selection should be accepted",
                        "GIVEN user provides invalid provider value WHEN validating input THEN error should list valid options: local, s3",
                        "GIVEN provider is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                      ]
                    },
                    "bucket": {
                      "type": "string",
                      "description": "S3 bucket name (required for s3 provider)",
                      "x-business-rules": ["S3 bucket name (required for s3 provider)"],
                      "x-user-stories": [
                        "GIVEN user provides bucket WHEN validating input THEN string value should be accepted",
                        "GIVEN bucket is empty string WHEN validating input THEN behavior should follow optional/required rules"
                      ]
                    },
                    "maxSize": {
                      "type": "integer",
                      "description": "Maximum file size in bytes per file",
                      "default": 10485760,
                      "minimum": 1,
                      "x-business-rules": [
                        "Defaults to 10485760 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user provides maxSize >= 1 WHEN validating input THEN value should be accepted",
                        "GIVEN user provides maxSize < 1 WHEN validating input THEN error should enforce minimum value"
                      ]
                    },
                    "allowedTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Allowed MIME types or file extensions",
                      "default": ["image/*", "application/pdf"],
                      "examples": [["image/*"], ["application/pdf", "application/msword"]],
                      "x-business-rules": [
                        "Defaults to [\"image/*\",\"application/pdf\"] when not specified, providing sensible fallback behavior without requiring explicit configuration"
                      ],
                      "x-user-stories": [
                        "GIVEN user provides allowedTypes array WHEN validating input THEN items should be processed in order",
                        "GIVEN allowedTypes array is empty WHEN validating input THEN behavior should follow optional/required rules"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "x-business-rules": [
                    "Object structure groups related storage properties for better organization and type-safe access"
                  ],
                  "x-user-stories": [
                    "GIVEN user configures storage WHEN validating input THEN value should meet schema requirements",
                    "GIVEN storage is set WHEN processing configuration THEN value should be used correctly"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related multiple attachments field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Formula Field",
              "description": "Computed field that automatically calculates values using formula expressions. Formulas can reference other fields, use operators (+, -, *, /, =, >, <), and call functions (CONCAT, IF, ROUND, SUM, etc.). Specify resultType (text, number, boolean, date) for proper type handling. Optionally set display format (currency, percentage, decimal, date). Formulas are read-only and recalculate when dependent fields change. Useful for totals, concatenations, conditional logic, and derived values.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "formula",
                  "x-business-rules": [
                    "Fixed value (formula) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.9.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='formula' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "formula": {
                  "type": "string",
                  "description": "Formula expression to compute the value. Supports field references, operators, and functions.",
                  "minLength": 1,
                  "examples": [
                    "price * quantity",
                    "CONCAT(first_name, ' ', last_name)",
                    "IF(status = 'active', 'Yes', 'No')",
                    "ROUND(total * 0.15, 2)"
                  ],
                  "x-business-rules": ["Formula expression to compute the value"],
                  "x-user-stories": [
                    "GIVEN user provides formula with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides formula shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "resultType": {
                  "type": "string",
                  "enum": ["text", "number", "boolean", "date"],
                  "default": "text",
                  "description": "Expected data type of the formula result",
                  "x-business-rules": [
                    "Restricted to 4 allowed values (text, number, boolean, ...) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"text\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects resultType from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid resultType value WHEN validating input THEN error should list valid options: text, number, boolean",
                    "GIVEN resultType is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "Display format for the result (e.g., currency, percentage)",
                  "examples": ["currency", "percentage", "decimal", "date"],
                  "x-business-rules": ["Display format for the result (e"],
                  "x-user-stories": [
                    "GIVEN user provides format WHEN validating input THEN string value should be accepted",
                    "GIVEN format is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type", "formula"],
              "additionalProperties": false,
              "x-business-rules": [
                "Formula Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "Rollup Field",
              "description": "Aggregate values from related records through a relationship field. Reference a relationshipField in the current table and a relatedField in the linked table. Apply aggregation functions: sum (add all values), count (count records), average (mean value), min (smallest value), max (largest value), median (middle value), concat (join text values), unique (count distinct values). Optionally set display format for the result. Read-only field that automatically updates when related data changes. Useful for totals, counts, statistics from child records.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "rollup",
                  "x-business-rules": [
                    "Fixed value (rollup) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.10.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='rollup' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "relationshipField": {
                  "type": "string",
                  "description": "Name of the relationship field to aggregate from",
                  "minLength": 1,
                  "x-business-rules": ["Name of the relationship field to aggregate from"],
                  "x-user-stories": [
                    "GIVEN user provides relationshipField with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides relationshipField shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "relatedField": {
                  "type": "string",
                  "description": "Name of the field in the related table to aggregate",
                  "minLength": 1,
                  "x-business-rules": ["Name of the field in the related table to aggregate"],
                  "x-user-stories": [
                    "GIVEN user provides relatedField with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides relatedField shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "aggregation": {
                  "type": "string",
                  "enum": ["sum", "count", "average", "min", "max", "median", "concat", "unique"],
                  "description": "Aggregation function to apply",
                  "x-business-rules": [
                    "Restricted to 8 allowed values (sum, count, average, ...) to maintain type safety and enable clear validation error messages"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects aggregation from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid aggregation value WHEN validating input THEN error should list valid options: sum, count, average",
                    "GIVEN aggregation is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "Display format for the result",
                  "examples": ["currency", "number", "percentage"],
                  "x-business-rules": ["Display format for the result"],
                  "x-user-stories": [
                    "GIVEN user provides format WHEN validating input THEN string value should be accepted",
                    "GIVEN format is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": [
                "id",
                "name",
                "type",
                "relationshipField",
                "relatedField",
                "aggregation"
              ],
              "additionalProperties": false,
              "x-business-rules": [
                "Rollup Field is immutable after creation to ensure data integrity and prevent accidental corruption",
                "Uniqueness constraint prevents conflicts and ensures each rollup field can be unambiguously referenced"
              ]
            },
            {
              "title": "Lookup Field",
              "description": "Display field values from related records through a relationship. Specify relationshipField (the relationship field in current table) and relatedField (the field to display from related table). Read-only field that automatically shows current value from linked record. Updates when related record changes. Useful for showing related data without duplicating storage (e.g., showing customer name in order, category name in product). More efficient than copying data.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "lookup",
                  "x-business-rules": [
                    "Fixed value (lookup) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.11.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='lookup' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "relationshipField": {
                  "type": "string",
                  "description": "Name of the relationship field to lookup from",
                  "minLength": 1,
                  "x-business-rules": ["Name of the relationship field to lookup from"],
                  "x-user-stories": [
                    "GIVEN user provides relationshipField with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides relationshipField shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "relatedField": {
                  "type": "string",
                  "description": "Name of the field in the related table to display",
                  "minLength": 1,
                  "x-business-rules": ["Name of the field in the related table to display"],
                  "x-user-stories": [
                    "GIVEN user provides relatedField with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides relatedField shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                }
              },
              "required": ["id", "name", "type", "relationshipField", "relatedField"],
              "additionalProperties": false,
              "x-business-rules": [
                "Lookup Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "User Field",
              "description": "Reference to application users/collaborators for assignments, ownership, and mentions. Links records to user accounts. Set allowMultiple=true to assign multiple users (e.g., project team members), or false for single assignment (e.g., task owner). Automatically indexed for efficient filtering by user. Displays user profile information (name, avatar). Useful for task assignments, record ownership, collaboration, and audit trails.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "description": "Whether to create a database index on this field for faster queries",
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "user",
                  "x-business-rules": [
                    "Fixed value (user) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.12.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='user' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "allowMultiple": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether to allow multiple users to be selected",
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN allowMultiple is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN allowMultiple is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with allowMultiple WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related user field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Created At Field",
              "description": "Automatically set timestamp when record is created. Read-only field that cannot be modified after creation. Always uses current server time in UTC. Automatically indexed for sorting and filtering by creation time. Useful for audit trails, chronological ordering, and tracking when data was first entered. Displays as formatted datetime in UI.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "created-at",
                  "x-business-rules": [
                    "Fixed value (created-at) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.13.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='created-at' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Created At Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "Updated At Field",
              "description": "Automatically updated timestamp whenever record is modified. Read-only field that updates to current server time on every save operation. Always uses UTC. Automatically indexed for sorting by recency. Useful for audit trails, showing last modification time, and detecting stale data. Displays as formatted datetime in UI.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "updated-at",
                  "x-business-rules": [
                    "Fixed value (updated-at) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.14.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='updated-at' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Updated At Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "Created By Field",
              "description": "Automatically set reference to the user who created the record. Read-only field that links to user account. Set only once when record is created and never changes. Automatically indexed for filtering by creator. Useful for audit trails, ownership tracking, and permissions. Displays user profile information (name, avatar) in UI.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "created-by",
                  "x-business-rules": [
                    "Fixed value (created-by) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.15.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='created-by' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Created By Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "Updated By Field",
              "description": "Automatically updated reference to the user who last modified the record. Read-only field that links to user account. Updates on every save operation to current user. Automatically indexed for filtering by editor. Useful for audit trails, tracking who made recent changes, and collaboration history. Displays user profile information in UI.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "updated-by",
                  "x-business-rules": [
                    "Fixed value (updated-by) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.16.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='updated-by' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Updated By Field is immutable after creation to ensure data integrity and prevent accidental corruption"
              ]
            },
            {
              "title": "Rating Field",
              "description": "Star/icon rating field for user feedback and scoring. Configure maxRating (typically 5 or 10), display icon (star, heart, thumbs-up), and whether to allow half-ratings. Stores numeric value (1 to maxRating). Useful for product reviews, satisfaction scores, priority levels, and quality assessments. Displays as interactive icon picker in forms and static icons in tables.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "rating",
                  "x-business-rules": [
                    "Fixed value (rating) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.17.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='rating' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "max": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10,
                  "default": 5,
                  "description": "Maximum rating value",
                  "x-business-rules": [
                    "Numeric range (1-10) prevents overflow errors and ensures values stay within valid business bounds",
                    "Defaults to 5 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides max between 1 and 10 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides max below 1 WHEN validating input THEN error should enforce minimum value",
                    "GIVEN user provides max above 10 WHEN validating input THEN error should enforce maximum value"
                  ]
                },
                "style": {
                  "type": "string",
                  "enum": ["star", "number", "heart"],
                  "default": "star",
                  "description": "Visual style for the rating",
                  "x-business-rules": [
                    "Restricted to 3 allowed values (star, number, heart) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"star\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects style from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid style value WHEN validating input THEN error should list valid options: star, number, heart",
                    "GIVEN style is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related rating field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Duration Field",
              "description": "Time duration in hours, minutes, and seconds",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "duration",
                  "x-business-rules": [
                    "Fixed value (duration) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.18.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='duration' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "format": {
                  "type": "string",
                  "enum": ["h:mm", "h:mm:ss", "minutes", "seconds"],
                  "default": "h:mm:ss",
                  "description": "Display format for the duration",
                  "x-business-rules": [
                    "Restricted to 4 allowed values (h:mm, h:mm:ss, minutes, ...) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"h:mm:ss\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects format from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid format value WHEN validating input THEN error should list valid options: h:mm, h:mm:ss, minutes",
                    "GIVEN format is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related duration field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Rich Text Field",
              "description": "Formatted text with markdown support",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "rich-text",
                  "x-business-rules": [
                    "Fixed value (rich-text) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.19.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='rich-text' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "maxLength": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum length in characters",
                  "x-business-rules": ["Maximum length in characters"],
                  "x-user-stories": [
                    "GIVEN user provides maxLength >= 1 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides maxLength < 1 WHEN validating input THEN error should enforce minimum value"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related rich text field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Status Field",
              "description": "Workflow status with customizable options and colors",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "indexed": {
                  "type": "boolean",
                  "default": true,
                  "x-business-rules": [
                    "Defaults to true when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN indexed is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN indexed is false (default: True) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with indexed WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "status",
                  "x-business-rules": [
                    "Fixed value (status) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.20.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='status' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "x-user-stories": [
                          "GIVEN user provides value with at least 1 characters WHEN validating input THEN value should be accepted",
                          "GIVEN user provides value shorter than 1 chars WHEN validating input THEN error should require minimum length"
                        ]
                      },
                      "color": {
                        "type": "string",
                        "pattern": "^#[0-9a-fA-F]{6}$",
                        "description": "Hex color code for the status",
                        "x-business-rules": [
                          "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
                        ],
                        "x-user-stories": [
                          "GIVEN user provides color matching pattern WHEN validating input THEN value should be accepted",
                          "GIVEN user provides color not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                          "GIVEN color is stored WHEN retrieved later THEN original format should be preserved"
                        ]
                      }
                    },
                    "required": ["value"],
                    "x-business-rules": [
                      "Object structure groups related items properties for better organization and type-safe access"
                    ]
                  },
                  "minItems": 1,
                  "x-business-rules": [
                    "Array enables multiple options to be configured, supporting flexible workflows and batch operations"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides options with at least 1 items WHEN validating input THEN array should be accepted",
                    "GIVEN user provides options with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
                  ]
                },
                "default": {
                  "type": "string",
                  "x-user-stories": [
                    "GIVEN user provides default WHEN validating input THEN string value should be accepted",
                    "GIVEN default is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type", "options"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related status field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Button Field",
              "description": "Trigger actions or open URLs",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "button",
                  "x-business-rules": [
                    "Fixed value (button) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.21.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='button' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "label": {
                  "type": "string",
                  "description": "Button text label",
                  "minLength": 1,
                  "x-user-stories": [
                    "GIVEN user provides label with at least 1 characters WHEN validating input THEN value should be accepted",
                    "GIVEN user provides label shorter than 1 chars WHEN validating input THEN error should require minimum length"
                  ]
                },
                "action": {
                  "type": "string",
                  "enum": ["url", "automation"],
                  "description": "Type of action to trigger",
                  "x-business-rules": [
                    "Restricted to 2 allowed values (url, automation) to maintain type safety and enable clear validation error messages"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects action from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid action value WHEN validating input THEN error should list valid options: url, automation",
                    "GIVEN action is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "url": {
                  "type": "string",
                  "description": "URL to open (when action is 'url')",
                  "x-business-rules": ["URL to open (when action is 'url')"],
                  "x-user-stories": [
                    "GIVEN user provides url WHEN validating input THEN string value should be accepted",
                    "GIVEN url is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                },
                "automation": {
                  "type": "string",
                  "description": "Automation name to trigger (when action is 'automation')",
                  "x-business-rules": ["Automation name to trigger (when action is 'automation')"],
                  "x-user-stories": [
                    "GIVEN user provides automation WHEN validating input THEN string value should be accepted",
                    "GIVEN automation is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                }
              },
              "required": ["id", "name", "type", "label", "action"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related button field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Autonumber Field",
              "description": "Auto-incrementing unique number (read-only)",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "autonumber",
                  "x-business-rules": [
                    "Fixed value (autonumber) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.22.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='autonumber' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "prefix": {
                  "type": "string",
                  "description": "Optional prefix for the autonumber",
                  "examples": ["INV-", "ORD-", ""],
                  "x-business-rules": ["Optional prefix for the autonumber"],
                  "x-user-stories": [
                    "GIVEN user provides prefix WHEN validating input THEN string value should be accepted",
                    "GIVEN prefix is empty string WHEN validating input THEN behavior should follow optional/required rules"
                  ]
                },
                "startFrom": {
                  "type": "integer",
                  "minimum": 1,
                  "default": 1,
                  "description": "Starting number",
                  "x-business-rules": [
                    "Defaults to 1 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides startFrom >= 1 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides startFrom < 1 WHEN validating input THEN error should enforce minimum value"
                  ]
                },
                "digits": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 10,
                  "default": 3,
                  "description": "Number of digits with zero padding",
                  "x-business-rules": [
                    "Numeric range (1-10) prevents overflow errors and ensures values stay within valid business bounds",
                    "Defaults to 3 when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides digits between 1 and 10 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides digits below 1 WHEN validating input THEN error should enforce minimum value",
                    "GIVEN user provides digits above 10 WHEN validating input THEN error should enforce maximum value"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Autonumber Field is immutable after creation to ensure data integrity and prevent accidental corruption",
                "Uniqueness constraint prevents conflicts and ensures each autonumber field can be unambiguously referenced"
              ]
            },
            {
              "title": "Barcode Field",
              "description": "Display and scan barcodes",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "barcode",
                  "x-business-rules": [
                    "Fixed value (barcode) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.23.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='barcode' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "format": {
                  "type": "string",
                  "enum": ["qr", "ean13", "code128", "code39"],
                  "default": "qr",
                  "description": "Barcode format",
                  "x-business-rules": [
                    "Restricted to 4 allowed values (qr, ean13, code128, ...) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"qr\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects format from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid format value WHEN validating input THEN error should list valid options: qr, ean13, code128",
                    "GIVEN format is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related barcode field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Progress Field",
              "description": "Visual progress bar (0-100%)",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "progress",
                  "x-business-rules": [
                    "Fixed value (progress) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.24.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='progress' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "color": {
                  "type": "string",
                  "pattern": "^#[0-9a-fA-F]{6}$",
                  "description": "Color of the progress bar",
                  "x-business-rules": [
                    "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides color matching pattern WHEN validating input THEN value should be accepted",
                    "GIVEN user provides color not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                    "GIVEN color is stored WHEN retrieved later THEN original format should be preserved"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related progress field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Color Field",
              "description": "Color picker for hex colors",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "color",
                  "x-business-rules": [
                    "Fixed value (color) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.25.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='color' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "default": {
                  "type": "string",
                  "pattern": "^#[0-9a-fA-F]{6}$",
                  "x-business-rules": [
                    "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
                  ],
                  "x-user-stories": [
                    "GIVEN user provides default matching pattern WHEN validating input THEN value should be accepted",
                    "GIVEN user provides default not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                    "GIVEN default is stored WHEN retrieved later THEN original format should be preserved"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related color field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Geolocation Field",
              "description": "Geographic coordinates (latitude/longitude)",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "geolocation",
                  "x-business-rules": [
                    "Fixed value (geolocation) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.26.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='geolocation' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related geolocation field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "JSON Field",
              "description": "Flexible JSON field for storing structured data objects. Accepts any valid JSON (objects, arrays, primitives). Optionally provide a JSON Schema for validation to enforce structure and types. Useful for storing configuration objects, API responses, flexible attributes, and dynamic data that doesn't fit rigid schema. Displays with syntax highlighting and formatting in UI. Can be queried using JSON path expressions.",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "json",
                  "x-business-rules": [
                    "Fixed value (json) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.27.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='json' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "schema": {
                  "type": "object",
                  "description": "Optional JSON Schema to validate the data",
                  "x-business-rules": [
                    "Object structure groups related schema properties for better organization and type-safe access"
                  ],
                  "x-user-stories": [
                    "GIVEN user configures schema WHEN validating input THEN value should meet schema requirements",
                    "GIVEN schema is set WHEN processing configuration THEN value should be used correctly"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related json field properties for better organization and type-safe access"
              ]
            },
            {
              "title": "Array Field",
              "description": "List of values (tags, keywords)",
              "type": "object",
              "properties": {
                "id": {
                  "$ref": "../common/definitions.schema.json#/definitions/id",
                  "x-user-stories": [
                    "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
                    "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
                    "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
                  ]
                },
                "name": {
                  "$ref": "../common/definitions.schema.json#/definitions/name",
                  "x-user-stories": [
                    "GIVEN new field is created WHEN saving configuration THEN field name should follow database naming conventions",
                    "GIVEN field with duplicate name WHEN validating table schema THEN error should prevent conflicts",
                    "GIVEN field name is set WHEN querying data THEN field should be accessible by its name"
                  ]
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "x-business-rules": [
                    "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN required is true WHEN processing entity THEN corresponding behavior should be enforced",
                    "GIVEN required is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                    "GIVEN configuration with required WHEN validating settings THEN boolean value should be accepted"
                  ]
                },
                "type": {
                  "type": "string",
                  "const": "array",
                  "x-business-rules": [
                    "Fixed value (array) identifies this specific root.properties.tables.items.properties.fields.items.anyOf.28.properties.type type in discriminated unions and routing logic"
                  ],
                  "x-user-stories": [
                    "GIVEN entity with type='array' WHEN processing configuration THEN correct handler should be selected",
                    "GIVEN invalid type value WHEN validating configuration THEN clear error message should identify the issue"
                  ]
                },
                "itemType": {
                  "type": "string",
                  "enum": ["text", "number"],
                  "default": "text",
                  "description": "Type of items in the array",
                  "x-business-rules": [
                    "Restricted to 2 allowed values (text, number) to maintain type safety and enable clear validation error messages",
                    "Defaults to \"text\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
                  ],
                  "x-user-stories": [
                    "GIVEN user selects itemType from valid options WHEN validating input THEN selection should be accepted",
                    "GIVEN user provides invalid itemType value WHEN validating input THEN error should list valid options: text, number",
                    "GIVEN itemType is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
                  ]
                },
                "maxItems": {
                  "type": "integer",
                  "minimum": 1,
                  "description": "Maximum number of items allowed",
                  "x-business-rules": ["Maximum number of items allowed"],
                  "x-user-stories": [
                    "GIVEN user provides maxItems >= 1 WHEN validating input THEN value should be accepted",
                    "GIVEN user provides maxItems < 1 WHEN validating input THEN error should enforce minimum value"
                  ]
                }
              },
              "required": ["id", "name", "type"],
              "additionalProperties": false,
              "x-business-rules": [
                "Object structure groups related array field properties for better organization and type-safe access"
              ]
            }
          ]
        },
        "x-business-rules": [
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides fields with at least 1 items WHEN validating input THEN array should be accepted",
          "GIVEN user provides fields with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
        ]
      },
      "primaryKey": {
        "description": "Primary key configuration for the table. The primary key uniquely identifies each row and is automatically indexed.",
        "title": "Primary Key",
        "type": "object",
        "examples": [
          {
            "type": "auto-increment",
            "field": "id"
          },
          {
            "type": "uuid",
            "field": "id"
          },
          {
            "type": "composite",
            "fields": ["tenant_id", "user_id"]
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["auto-increment", "uuid", "composite"],
            "default": "auto-increment",
            "description": "Primary key generation strategy. 'auto-increment' uses sequential integers (1, 2, 3...), 'uuid' generates random unique identifiers, 'composite' uses multiple fields together.",
            "x-business-rules": [
              "Uniqueness constraint prevents conflicts and ensures each type can be unambiguously referenced",
              "Restricted to 3 allowed values (auto-increment, uuid, composite) to maintain type safety and enable clear validation error messages",
              "Defaults to \"auto-increment\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
            ],
            "x-user-stories": [
              "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
              "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
              "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
            ]
          },
          "field": {
            "type": "string",
            "description": "Field name for single-column primary key. Only used with 'auto-increment' or 'uuid' type.",
            "default": "id",
            "pattern": "^[a-z][a-z0-9_]*$",
            "examples": ["id", "user_id", "product_id"],
            "x-business-rules": [
              "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors",
              "Defaults to \"id\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
            ],
            "x-user-stories": [
              "GIVEN user provides field matching pattern WHEN validating input THEN value should be accepted",
              "GIVEN user provides field not matching pattern WHEN validating input THEN clear error message should explain format requirement",
              "GIVEN field is stored WHEN retrieved later THEN original format should be preserved"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "Field names for composite primary key. Only used when type is 'composite'. The combination of these fields must be unique.",
            "minItems": 2,
            "examples": [
              ["tenant_id", "user_id"],
              ["order_id", "product_id"]
            ],
            "x-business-rules": [
              "Uniqueness constraint prevents conflicts and ensures each fields can be unambiguously referenced"
            ],
            "x-user-stories": [
              "GIVEN user provides fields with at least 2 items WHEN validating input THEN array should be accepted",
              "GIVEN user provides fields with fewer than 2 items WHEN validating input THEN error should enforce minimum items"
            ]
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "x-business-rules": [
          "Uniqueness constraint prevents conflicts and ensures each primary key can be unambiguously referenced"
        ],
        "x-user-stories": [
          "GIVEN user configures primaryKey WHEN validating input THEN value should meet schema requirements",
          "GIVEN primaryKey is set WHEN processing configuration THEN value should be used correctly"
        ]
      },
      "uniqueConstraints": {
        "description": "Composite unique constraints ensure that combinations of multiple field values are unique across all rows. Use this when you need uniqueness across multiple fields (e.g., email + tenant_id must be unique together).",
        "title": "Unique Constraints",
        "type": "array",
        "default": [],
        "examples": [
          [
            {
              "name": "uq_user_email_tenant",
              "fields": ["email", "tenant_id"]
            },
            {
              "name": "uq_product_sku_variant",
              "fields": ["sku", "variant_id"]
            }
          ]
        ],
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the unique constraint. Use descriptive names like 'uq_tablename_field1_field2'",
              "minLength": 1,
              "pattern": "^[a-z][a-z0-9_]*$",
              "examples": [
                "uq_users_email_tenant",
                "uq_products_sku_variant",
                "uq_orders_number_year"
              ],
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each name can be unambiguously referenced",
                "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
              ],
              "x-user-stories": [
                "GIVEN user provides name matching pattern WHEN validating input THEN value should be accepted",
                "GIVEN user provides name not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                "GIVEN name is stored WHEN retrieved later THEN original format should be preserved"
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "description": "Field names that must be unique together. The combination of values in these fields must be unique across all rows.",
              "minItems": 2,
              "examples": [
                ["email", "tenant_id"],
                ["first_name", "last_name", "birth_date"]
              ],
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each fields can be unambiguously referenced"
              ],
              "x-user-stories": [
                "GIVEN user provides fields with at least 2 items WHEN validating input THEN array should be accepted",
                "GIVEN user provides fields with fewer than 2 items WHEN validating input THEN error should enforce minimum items"
              ]
            }
          },
          "required": ["name", "fields"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related items properties for better organization and type-safe access"
          ]
        },
        "x-business-rules": [
          "Uniqueness constraint prevents conflicts and ensures each unique constraints can be unambiguously referenced",
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides uniqueConstraints array WHEN validating input THEN items should be processed in order",
          "GIVEN uniqueConstraints array is empty WHEN validating input THEN behavior should follow optional/required rules"
        ]
      },
      "indexes": {
        "description": "Custom database indexes for query optimization. Indexes improve query performance by creating efficient lookup structures for specified fields.",
        "title": "Database Indexes",
        "type": "array",
        "default": [],
        "examples": [
          [
            {
              "name": "idx_user_email",
              "fields": ["email"]
            },
            {
              "name": "idx_user_created",
              "fields": ["created_at"],
              "unique": false
            }
          ]
        ],
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the index. Use descriptive names like 'idx_tablename_fieldname'",
              "minLength": 1,
              "pattern": "^[a-z][a-z0-9_]*$",
              "examples": ["idx_users_email", "idx_products_sku", "idx_orders_status"],
              "x-business-rules": [
                "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
              ],
              "x-user-stories": [
                "GIVEN user provides name matching pattern WHEN validating input THEN value should be accepted",
                "GIVEN user provides name not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                "GIVEN name is stored WHEN retrieved later THEN original format should be preserved"
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "description": "Field names to include in the index. Order matters for multi-column indexes.",
              "minItems": 1,
              "examples": [["email"], ["first_name", "last_name"], ["status", "created_at"]],
              "x-business-rules": [
                "Array enables multiple fields to be configured, supporting flexible workflows and batch operations"
              ],
              "x-user-stories": [
                "GIVEN user provides fields with at least 1 items WHEN validating input THEN array should be accepted",
                "GIVEN user provides fields with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
              ]
            },
            "unique": {
              "type": "boolean",
              "default": false,
              "description": "Whether this index enforces uniqueness. Use this for unique constraints across multiple fields.",
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
              ],
              "x-user-stories": [
                "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
              ]
            }
          },
          "required": ["name", "fields"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related items properties for better organization and type-safe access"
          ]
        },
        "x-business-rules": [
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides indexes array WHEN validating input THEN items should be processed in order",
          "GIVEN indexes array is empty WHEN validating input THEN behavior should follow optional/required rules"
        ]
      }
    },
    "required": ["id", "name", "fields"],
    "additionalProperties": false,
    "x-business-rules": [
      "Object structure groups related data table properties for better organization and type-safe access"
    ]
  },
  "x-user-stories": [
    "GIVEN the application is running WHEN I return the admin tables page THEN it should work correctly",
    "GIVEN the application is running WHEN I list tables THEN it should work correctly",
    "GIVEN the application is running WHEN I list table records THEN it should work correctly",
    "GIVEN the application is running WHEN I search table records THEN it should work correctly",
    "GIVEN the application is running WHEN I open and display a table record THEN it should work correctly",
    "GIVEN the application is running WHEN I create a table record THEN it should work correctly",
    "GIVEN I am working with required fields WHEN I create a table record THEN it should complete successfully",
    "GIVEN the application is running WHEN I update a table record THEN it should work correctly",
    "GIVEN the application is running WHEN I delete a table record THEN it should work correctly",
    "GIVEN I am working with missing required fields WHEN I not create a record from a POST request THEN it should complete successfully",
    "GIVEN the application is running WHEN I create a record from a POST request THEN it should work correctly",
    "GIVEN I am working with missing required fields WHEN I not create multiple records from a POST request THEN it should complete successfully",
    "GIVEN the application is running WHEN I create multiple records from a POST request THEN it should work correctly",
    "GIVEN the application is running WHEN I read a record from a GET request THEN it should work correctly",
    "GIVEN the application is running WHEN I list records from a GET request THEN it should work correctly",
    "GIVEN the application is running WHEN I update a record from a PATCH request THEN it should work correctly",
    "GIVEN the application is running WHEN I update multiple records from a PATCH request THEN it should work correctly",
    "GIVEN the application is running WHEN I delete a record from a DELETE request THEN it should work correctly",
    "GIVEN the application is running WHEN I delete multiple records from a DELETE request THEN it should work correctly"
  ],
  "x-business-rules": [
    "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
  ]
}
