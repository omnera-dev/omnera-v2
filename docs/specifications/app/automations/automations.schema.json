{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Automations",
  "description": "Workflow automations that execute actions when triggered by specific events or conditions. Automations enable business logic such as sending emails when records are created, updating related data when values change, or integrating with external services via webhooks. Each automation consists of a trigger (when to run) and a sequence of actions (what to do).",
  "default": [],
  "type": "array",
  "items": {
    "$ref": "#/definitions/automation"
  },
  "x-business-rules": [
    "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
  ],
  "x-user-stories": [
    "GIVEN user provides automations array WHEN validating input THEN items should be processed in order",
    "GIVEN automations array is empty WHEN validating input THEN behavior should follow optional/required rules"
  ],
  "definitions": {
    "automation": {
      "title": "Automation Workflow",
      "description": "A workflow that executes a series of actions when triggered by specific events or conditions",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "../common/definitions.schema.json#/definitions/id",
          "title": "Automation ID",
          "examples": [1, 2, 100],
          "x-user-stories": [
            "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
            "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
            "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
          ]
        },
        "name": {
          "description": "Name of the automation workflow",
          "title": "Automation Name",
          "placeholder": "Enter automation name",
          "examples": ["Send Welcome Email", "Process Order", "Sync Customer Data"],
          "type": "string",
          "minLength": 3,
          "x-business-rules": [
            "Minimum 3 characters required to ensure automation names are descriptive enough for identification in lists",
            "Names should clearly describe the automation's purpose for easier management and debugging",
            "Names are displayed in automation lists, logs, and error messages for user reference"
          ],
          "x-user-stories": [
            "GIVEN user provides name with at least 3 characters WHEN validating input THEN value should be accepted",
            "GIVEN user provides name shorter than 3 chars WHEN validating input THEN error should require minimum length"
          ]
        },
        "description": {
          "description": "Detailed description of what this automation does",
          "title": "Description",
          "placeholder": "Describe what this automation does",
          "examples": [
            "Sends a welcome email when a new user signs up",
            "Processes incoming orders and updates inventory"
          ],
          "type": "string",
          "x-business-rules": [
            "Optional field that provides additional context about the automation's behavior and purpose",
            "Descriptions help team members understand complex workflows without examining the implementation details",
            "Should explain the business logic and expected outcomes rather than technical implementation"
          ],
          "x-user-stories": [
            "GIVEN user provides description WHEN validating input THEN string value should be accepted",
            "GIVEN description is empty string WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "editUrl": {
          "description": "URL to edit this automation in an external tool",
          "title": "Edit URL",
          "placeholder": "https://example.com/automations/edit/123",
          "examples": [
            "https://zapier.com/app/editor/123456",
            "https://make.com/scenario/edit/789"
          ],
          "type": "string",
          "format": "uri",
          "x-business-rules": [
            "Optional URL linking to external automation builder tools (Zapier, Make, n8n) for visual workflow editing",
            "Enables integration with third-party automation platforms while maintaining configuration in Omnera",
            "Must be valid URI format to ensure clickable links work correctly in the UI"
          ],
          "x-user-stories": [
            "GIVEN user provides URL WHEN validating input THEN valid URLs should be accepted",
            "GIVEN user provides invalid URL WHEN validating input THEN clear error message should be displayed",
            "GIVEN URL is stored WHEN user accesses it THEN link should navigate to correct destination"
          ]
        },
        "trigger": {
          "$ref": "#/definitions/automation_trigger",
          "x-user-stories": [
            "GIVEN user configures trigger WHEN validating input THEN value should meet schema requirements",
            "GIVEN trigger is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "actions": {
          "description": "Sequence of actions to execute when triggered",
          "title": "Actions",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/automation_action"
          },
          "x-business-rules": [
            "Actions execute sequentially in the order defined, with each action receiving the output of the previous action",
            "Empty actions array is valid but creates a no-op automation that triggers without performing any operations",
            "Action failures can be configured to halt the workflow or continue to subsequent actions based on error handling settings",
            "Actions can access trigger context data and outputs from previous actions via template variables"
          ],
          "x-user-stories": [
            "GIVEN user provides actions array WHEN validating input THEN items should be processed in order",
            "GIVEN actions array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        }
      },
      "required": ["id", "name", "trigger", "actions"],
      "additionalProperties": false,
      "x-user-stories": [
        "GIVEN the application is running WHEN I list automations THEN it should work correctly",
        "GIVEN the application is running WHEN I disable an automation THEN it should work correctly",
        "GIVEN the application is running WHEN I enable an automation THEN it should work correctly",
        "GIVEN the application is running WHEN I open the edit url THEN it should work correctly",
        "GIVEN the application is running WHEN I return a list of automations THEN it should work correctly",
        "GIVEN I am working with same integration actions in a queue WHEN I run parallel automations THEN it should complete successfully"
      ],
      "x-business-rules": [
        "Object structure groups related automation workflow properties for better organization and type-safe access"
      ]
    },
    "automation_trigger": {
      "title": "Trigger",
      "description": "Defines when an automation workflow should execute. Triggers can be event-based (record created, updated, deleted), scheduled (cron expressions for recurring tasks), or manual (webhook endpoints). Configure the trigger type, target table (for record triggers), and specific conditions that must be met. Triggers are evaluated in real-time for events or on schedule for time-based automation.",
      "anyOf": [
        {
          "$ref": "./triggers/http-post-trigger.schema.json"
        },
        {
          "$ref": "./triggers/http-get-trigger.schema.json"
        },
        {
          "$ref": "./triggers/database-record-created-trigger.schema.json"
        },
        {
          "$ref": "./triggers/database-record-updated-trigger.schema.json"
        },
        {
          "$ref": "./triggers/schedule-cron-time-trigger.schema.json"
        },
        {
          "$ref": "./triggers/calendly-invite-created-trigger.schema.json"
        },
        {
          "$ref": "./triggers/airtable-record-created-trigger.schema.json"
        },
        {
          "$ref": "./triggers/linkedin-ads-new-lead-gen-form-response-trigger.schema.json"
        },
        {
          "$ref": "./triggers/facebook-ads-new-lead-trigger.schema.json"
        }
      ]
    },
    "automation_action": {
      "title": "Action",
      "description": "Actions to perform when an automation is triggered. Actions execute sequentially in the order defined. Available action types: send-email (email notifications), create-record (insert data), update-record (modify data), delete-record (remove data), http-request (call external APIs), run-script (execute custom code). Each action type has specific configuration requirements and can reference trigger data using template variables.",
      "anyOf": [
        {
          "$ref": "./actions/http-get-action.schema.json"
        },
        {
          "$ref": "./actions/http-post-action.schema.json"
        },
        {
          "$ref": "./actions/http-response-action.schema.json"
        },
        {
          "$ref": "./actions/code-run-typescript-action.schema.json"
        },
        {
          "$ref": "./actions/code-run-javascript-action.schema.json"
        },
        {
          "$ref": "./actions/filter-only-continue-if-action.schema.json"
        },
        {
          "$ref": "./actions/filter-split-into-paths-action.schema.json"
        },
        {
          "$ref": "./actions/database-create-record-action.schema.json"
        },
        {
          "$ref": "./actions/calendly-list-webhook-subscriptions-action.schema.json"
        },
        {
          "$ref": "./actions/calendly-get-event-type-action.schema.json"
        },
        {
          "$ref": "./actions/airtable-list-webhook-payloads-action.schema.json"
        },
        {
          "$ref": "./actions/google-sheets-append-values-action.schema.json"
        },
        {
          "$ref": "./actions/google-gmail-send-email-action.schema.json"
        },
        {
          "$ref": "./actions/linkedin-ads-create-lead-notification-subscription-action.schema.json"
        },
        {
          "$ref": "./actions/linkedin-ads-list-lead-notification-subscriptions-action.schema.json"
        },
        {
          "$ref": "./actions/linkedin-ads-get-lead-form-response-action.schema.json"
        },
        {
          "$ref": "./actions/facebook-ads-list-app-subscriptions-action.schema.json"
        },
        {
          "$ref": "./actions/facebook-ads-get-leadgen-action.schema.json"
        },
        {
          "$ref": "./actions/notion-create-page-action.schema.json"
        },
        {
          "$ref": "./actions/notion-get-page-action.schema.json"
        },
        {
          "$ref": "./actions/notion-update-page-action.schema.json"
        },
        {
          "$ref": "./actions/notion-delete-page-action.schema.json"
        },
        {
          "$ref": "./actions/notion-list-pages-action.schema.json"
        },
        {
          "$ref": "./actions/notion-search-pages-action.schema.json"
        },
        {
          "$ref": "./actions/qonto-create-client-action.schema.json"
        },
        {
          "$ref": "./actions/qonto-create-invoice-action.schema.json"
        }
      ]
    },
    "filter_condition": {
      "title": "Filter Condition",
      "anyOf": [
        {
          "title": "String Comparison Filter",
          "description": "Filter based on string contains/does-not-contain operations",
          "type": "object",
          "properties": {
            "target": {
              "title": "Target Field",
              "description": "The field path to filter on (e.g., 'status', 'user.email', 'trigger.data.name')",
              "type": "string",
              "minLength": 1,
              "examples": ["status", "email", "name", "trigger.data.subject"],
              "x-business-rules": ["The field path to filter on (e"],
              "x-user-stories": [
                "GIVEN automation with filter condition WHEN condition evaluates to true THEN subsequent actions should execute",
                "GIVEN automation with filter condition WHEN condition evaluates to false THEN subsequent actions should be skipped",
                "GIVEN filter uses template variables WHEN evaluating condition THEN variables should resolve from trigger context"
              ]
            },
            "operator": {
              "title": "Comparison Operator",
              "description": "String comparison operation to perform",
              "type": "string",
              "enum": ["contains", "does-not-contain"],
              "x-business-rules": [
                "Restricted to 2 allowed values (contains, does-not-contain) to maintain type safety and enable clear validation error messages"
              ],
              "x-user-stories": [
                "GIVEN user selects operator from valid options WHEN validating input THEN selection should be accepted",
                "GIVEN user provides invalid operator value WHEN validating input THEN error should list valid options: contains, does-not-contain",
                "GIVEN operator is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
              ]
            },
            "value": {
              "title": "Comparison Value",
              "description": "The value to compare against (supports template variables like {{field_name}})",
              "type": "string",
              "examples": ["active", "john@example.com", "{{trigger.email}}", "{{env.DOMAIN}}"],
              "x-business-rules": [
                "The value to compare against (supports template variables like {{field_name}})"
              ],
              "x-user-stories": [
                "GIVEN automation with filter condition WHEN condition evaluates to true THEN subsequent actions should execute",
                "GIVEN automation with filter condition WHEN condition evaluates to false THEN subsequent actions should be skipped",
                "GIVEN filter uses template variables WHEN evaluating condition THEN variables should resolve from trigger context"
              ]
            }
          },
          "required": ["target", "operator", "value"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related string comparison filter properties for better organization and type-safe access"
          ]
        },
        {
          "title": "Existence/Boolean Filter",
          "description": "Filter based on field existence or boolean value",
          "type": "object",
          "properties": {
            "target": {
              "title": "Target Field",
              "description": "The field path to filter on (e.g., 'verified', 'user.name', 'trigger.error')",
              "type": "string",
              "minLength": 1,
              "examples": ["verified", "user.email", "trigger.error", "previous_action.result"],
              "x-business-rules": ["The field path to filter on (e"],
              "x-user-stories": [
                "GIVEN automation with filter condition WHEN condition evaluates to true THEN subsequent actions should execute",
                "GIVEN automation with filter condition WHEN condition evaluates to false THEN subsequent actions should be skipped",
                "GIVEN filter uses template variables WHEN evaluating condition THEN variables should resolve from trigger context"
              ]
            },
            "operator": {
              "title": "Existence/Boolean Operator",
              "description": "Check if field exists, doesn't exist, is true, or is false",
              "type": "string",
              "enum": ["exists", "does-not-exist", "is-true", "is-false"],
              "x-business-rules": [
                "Restricted to 4 allowed values (exists, does-not-exist, is-true, ...) to maintain type safety and enable clear validation error messages"
              ],
              "x-user-stories": [
                "GIVEN user selects operator from valid options WHEN validating input THEN selection should be accepted",
                "GIVEN user provides invalid operator value WHEN validating input THEN error should list valid options: exists, does-not-exist, is-true",
                "GIVEN operator is set to any valid enum value WHEN processing entity THEN appropriate behavior should execute"
              ]
            }
          },
          "required": ["target", "operator"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related existence/boolean filter properties for better organization and type-safe access"
          ]
        },
        {
          "title": "AND Filter",
          "description": "Combine multiple conditions with AND logic (all must be true)",
          "type": "object",
          "properties": {
            "and": {
              "title": "AND Conditions",
              "description": "Array of filter conditions that must all evaluate to true",
              "type": "array",
              "items": {
                "$ref": "#/definitions/filter_condition"
              },
              "minItems": 2,
              "examples": [
                [
                  {
                    "target": "status",
                    "operator": "contains",
                    "value": "active"
                  },
                  {
                    "target": "verified",
                    "operator": "is-true"
                  }
                ]
              ],
              "x-business-rules": [
                "Array enables multiple and conditions to be configured, supporting flexible workflows and batch operations"
              ],
              "x-user-stories": [
                "GIVEN automation with filter condition WHEN condition evaluates to true THEN subsequent actions should execute",
                "GIVEN automation with filter condition WHEN condition evaluates to false THEN subsequent actions should be skipped",
                "GIVEN filter uses template variables WHEN evaluating condition THEN variables should resolve from trigger context"
              ]
            }
          },
          "required": ["and"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related and filter properties for better organization and type-safe access"
          ]
        },
        {
          "title": "OR Filter",
          "description": "Combine multiple conditions with OR logic (at least one must be true)",
          "type": "object",
          "properties": {
            "or": {
              "title": "OR Conditions",
              "description": "Array of filter conditions where at least one must evaluate to true",
              "type": "array",
              "items": {
                "$ref": "#/definitions/filter_condition"
              },
              "minItems": 2,
              "examples": [
                [
                  {
                    "target": "status",
                    "operator": "contains",
                    "value": "pending"
                  },
                  {
                    "target": "status",
                    "operator": "contains",
                    "value": "processing"
                  }
                ]
              ],
              "x-business-rules": [
                "Array enables multiple or conditions to be configured, supporting flexible workflows and batch operations"
              ],
              "x-user-stories": [
                "GIVEN automation with filter condition WHEN condition evaluates to true THEN subsequent actions should execute",
                "GIVEN automation with filter condition WHEN condition evaluates to false THEN subsequent actions should be skipped",
                "GIVEN filter uses template variables WHEN evaluating condition THEN variables should resolve from trigger context"
              ]
            }
          },
          "required": ["or"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related or filter properties for better organization and type-safe access"
          ]
        }
      ],
      "description": "Filter conditions for querying and filtering data in table views, automations, and reports. Specify field to filter on, comparison operator (equals, not equals, contains, greater than, less than, is empty, is not empty), and comparison value. Conditions can be combined with AND/OR logic. Supports dynamic values from other fields, current user, or system variables. Used throughout the application for data filtering and conditional logic."
    },
    "json_schema": {
      "title": "JSON Schema",
      "description": "JSON Schema definition (Draft 07 compatible) for validating structured data in JSON fields. Define the expected structure, types, required properties, constraints, and validation rules. Used to ensure JSON field data conforms to a specific schema. Supports all JSON Schema features: types, properties, required, patterns, enums, nested objects, arrays, and custom validation. Useful for API configurations, structured metadata, and flexible data models with enforced structure.",
      "type": "object",
      "properties": {
        "type": {
          "title": "Type",
          "description": "The data type(s) this schema validates. Can be a single type or array of types.",
          "anyOf": [
            {
              "type": "string",
              "enum": ["string", "number", "integer", "boolean", "object", "array", "null"],
              "x-business-rules": [
                "Restricted to 7 allowed values (string, number, integer, ...) to maintain type safety and enable clear validation error messages"
              ]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["string", "number", "integer", "boolean", "object", "array", "null"],
                "x-business-rules": [
                  "Restricted to 7 allowed values (string, number, integer, ...) to maintain type safety and enable clear validation error messages"
                ]
              },
              "x-business-rules": [
                "Array enables multiple 1 to be configured, supporting flexible workflows and batch operations"
              ]
            }
          ],
          "examples": ["string", "number", ["string", "null"], ["number", "integer"]],
          "x-user-stories": [
            "GIVEN user configures type WHEN validating input THEN value should meet schema requirements",
            "GIVEN type is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "properties": {
          "title": "Properties",
          "description": "Object property definitions. Each key defines a property name with its schema.",
          "type": "object",
          "propertyNames": {
            "type": "string"
          },
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean",
                "x-business-rules": [
                  "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                ]
              }
            ]
          },
          "examples": [
            {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "integer"
              }
            }
          ],
          "x-business-rules": [
            "Object structure groups related properties properties for better organization and type-safe access"
          ],
          "x-user-stories": [
            "GIVEN user configures properties WHEN validating input THEN value should meet schema requirements",
            "GIVEN properties is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "required": {
          "title": "Required Properties",
          "description": "Array of property names that must be present in the object",
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": [["name", "email"], ["id"]],
          "x-business-rules": [
            "Array enables multiple required properties to be configured, supporting flexible workflows and batch operations"
          ],
          "x-user-stories": [
            "GIVEN user provides required array WHEN validating input THEN items should be processed in order",
            "GIVEN required array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "items": {
          "title": "Array Items",
          "description": "Schema for array elements. Can be a single schema (all items) or array of schemas (tuple)",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/json_schema"
                },
                {
                  "type": "boolean",
                  "x-business-rules": [
                    "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                  ]
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/json_schema"
                  },
                  {
                    "type": "boolean",
                    "x-business-rules": [
                      "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                    ]
                  }
                ]
              },
              "x-business-rules": [
                "Array enables multiple 1 to be configured, supporting flexible workflows and batch operations"
              ]
            }
          ],
          "examples": [
            {
              "type": "string"
            },
            [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          ],
          "x-user-stories": [
            "GIVEN user configures items WHEN validating input THEN value should meet schema requirements",
            "GIVEN items is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "additionalProperties": {
          "title": "Additional Properties",
          "description": "Whether to allow properties not defined in 'properties'. Can be boolean or schema.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/json_schema"
                },
                {
                  "type": "boolean",
                  "x-business-rules": [
                    "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                  ]
                }
              ]
            },
            {
              "type": "boolean",
              "x-business-rules": [
                "Boolean flag enables/disables 1 functionality through simple true/false configuration"
              ]
            }
          ],
          "examples": [
            false,
            true,
            {
              "type": "string"
            }
          ],
          "x-user-stories": [
            "GIVEN user configures additionalProperties WHEN validating input THEN value should meet schema requirements",
            "GIVEN additionalProperties is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "enum": {
          "title": "Enum",
          "description": "Array of allowed values. Value must match one of these exactly.",
          "type": "array",
          "items": {},
          "examples": [
            ["active", "inactive", "pending"],
            [1, 2, 3],
            [true, false]
          ],
          "x-business-rules": [
            "Array enables multiple enum to be configured, supporting flexible workflows and batch operations"
          ],
          "x-user-stories": [
            "GIVEN user provides enum array WHEN validating input THEN items should be processed in order",
            "GIVEN enum array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "const": {
          "title": "Const",
          "description": "Single allowed value. Value must match this exactly.",
          "examples": ["active", 42, true, null],
          "x-user-stories": [
            "GIVEN user configures const WHEN validating input THEN value should meet schema requirements",
            "GIVEN const is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "title": {
          "title": "Title",
          "description": "Human-readable title for this schema property",
          "type": "string",
          "examples": ["User Name", "Email Address", "Age"],
          "x-business-rules": ["Human-readable title for this schema property"],
          "x-user-stories": [
            "GIVEN user provides title WHEN validating input THEN string value should be accepted",
            "GIVEN title is empty string WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "description": {
          "title": "Description",
          "description": "Detailed description of this schema property",
          "type": "string",
          "examples": ["The user's full name", "Must be a valid email address"],
          "x-business-rules": ["Detailed description of this schema property"],
          "x-user-stories": [
            "GIVEN user provides description WHEN validating input THEN string value should be accepted",
            "GIVEN description is empty string WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "default": {
          "title": "Default",
          "description": "Default value when not provided",
          "examples": ["", 0, false, null, {}, []],
          "x-user-stories": [
            "GIVEN user configures default WHEN validating input THEN value should meet schema requirements",
            "GIVEN default is set WHEN processing configuration THEN value should be used correctly"
          ]
        },
        "minimum": {
          "title": "Minimum",
          "description": "Minimum numeric value (inclusive)",
          "type": "number",
          "examples": [0, 1, 18, -100],
          "x-business-rules": ["Minimum numeric value (inclusive)"],
          "x-user-stories": [
            "GIVEN user provides minimum WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric minimum WHEN validating input THEN error should require number"
          ]
        },
        "maximum": {
          "title": "Maximum",
          "description": "Maximum numeric value (inclusive)",
          "type": "number",
          "examples": [100, 999, 150],
          "x-business-rules": ["Maximum numeric value (inclusive)"],
          "x-user-stories": [
            "GIVEN user provides maximum WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric maximum WHEN validating input THEN error should require number"
          ]
        },
        "multipleOf": {
          "title": "Multiple Of",
          "description": "Number must be a multiple of this value",
          "type": "number",
          "examples": [1, 5, 0.01, 10],
          "x-business-rules": ["Number must be a multiple of this value"],
          "x-user-stories": [
            "GIVEN user provides multipleOf WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric multipleOf WHEN validating input THEN error should require number"
          ]
        },
        "minLength": {
          "title": "Minimum Length",
          "description": "Minimum string length (characters)",
          "type": "number",
          "examples": [1, 3, 8],
          "x-business-rules": ["Minimum string length (characters)"],
          "x-user-stories": [
            "GIVEN user provides minLength WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric minLength WHEN validating input THEN error should require number"
          ]
        },
        "maxLength": {
          "title": "Maximum Length",
          "description": "Maximum string length (characters)",
          "type": "number",
          "examples": [100, 255, 1000],
          "x-business-rules": ["Maximum string length (characters)"],
          "x-user-stories": [
            "GIVEN user provides maxLength WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric maxLength WHEN validating input THEN error should require number"
          ]
        },
        "pattern": {
          "title": "Pattern",
          "description": "Regular expression pattern the string must match",
          "type": "string",
          "examples": ["^[a-z]+$", "^\\d{3}-\\d{4}$", "^[A-Z][a-z]+$"],
          "x-business-rules": ["Regular expression pattern the string must match"],
          "x-user-stories": [
            "GIVEN user provides pattern WHEN validating input THEN string value should be accepted",
            "GIVEN pattern is empty string WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "minItems": {
          "title": "Minimum Items",
          "description": "Minimum array length",
          "type": "number",
          "examples": [1, 2, 5],
          "x-user-stories": [
            "GIVEN user provides minItems WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric minItems WHEN validating input THEN error should require number"
          ]
        },
        "maxItems": {
          "title": "Maximum Items",
          "description": "Maximum array length",
          "type": "number",
          "examples": [10, 100, 1000],
          "x-user-stories": [
            "GIVEN user provides maxItems WHEN validating input THEN numeric value should be accepted",
            "GIVEN user provides non-numeric maxItems WHEN validating input THEN error should require number"
          ]
        },
        "uniqueItems": {
          "title": "Unique Items",
          "description": "Whether array items must be unique",
          "type": "boolean",
          "examples": [true, false],
          "x-business-rules": [
            "Uniqueness constraint prevents conflicts and ensures each unique items can be unambiguously referenced"
          ],
          "x-user-stories": [
            "GIVEN uniqueItems is true WHEN processing entity THEN corresponding behavior should be enforced",
            "GIVEN uniqueItems is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
            "GIVEN configuration with uniqueItems WHEN validating settings THEN boolean value should be accepted"
          ]
        },
        "allOf": {
          "title": "All Of",
          "description": "Must validate against all of these schemas (AND logic)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean",
                "x-business-rules": [
                  "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                ]
              }
            ]
          },
          "examples": [
            [
              {
                "type": "object"
              },
              {
                "required": ["name"]
              }
            ]
          ],
          "x-business-rules": [
            "Array enables multiple all of to be configured, supporting flexible workflows and batch operations"
          ],
          "x-user-stories": [
            "GIVEN user provides allOf array WHEN validating input THEN items should be processed in order",
            "GIVEN allOf array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "anyOf": {
          "title": "Any Of",
          "description": "Must validate against at least one of these schemas (OR logic)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean",
                "x-business-rules": [
                  "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                ]
              }
            ]
          },
          "examples": [
            [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          ],
          "x-business-rules": [
            "Array enables multiple any of to be configured, supporting flexible workflows and batch operations"
          ],
          "x-user-stories": [
            "GIVEN user provides anyOf array WHEN validating input THEN items should be processed in order",
            "GIVEN anyOf array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "oneOf": {
          "title": "One Of",
          "description": "Must validate against exactly one of these schemas (XOR logic)",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/json_schema"
              },
              {
                "type": "boolean",
                "x-business-rules": [
                  "Boolean flag enables/disables 1 functionality through simple true/false configuration"
                ]
              }
            ]
          },
          "examples": [
            [
              {
                "type": "string",
                "minLength": 5
              },
              {
                "type": "number"
              }
            ]
          ],
          "x-business-rules": [
            "Array enables multiple one of to be configured, supporting flexible workflows and batch operations"
          ],
          "x-user-stories": [
            "GIVEN user provides oneOf array WHEN validating input THEN items should be processed in order",
            "GIVEN oneOf array is empty WHEN validating input THEN behavior should follow optional/required rules"
          ]
        },
        "not": {
          "title": "Not",
          "description": "Must NOT validate against this schema",
          "anyOf": [
            {
              "$ref": "#/definitions/json_schema"
            },
            {
              "type": "boolean",
              "x-business-rules": [
                "Boolean flag enables/disables 1 functionality through simple true/false configuration"
              ]
            }
          ],
          "examples": [
            {
              "type": "null"
            },
            {
              "enum": ["admin"]
            }
          ],
          "x-user-stories": [
            "GIVEN user configures not WHEN validating input THEN value should meet schema requirements",
            "GIVEN not is set WHEN processing configuration THEN value should be used correctly"
          ]
        }
      },
      "additionalProperties": false,
      "x-business-rules": [
        "Object structure groups related json schema properties for better organization and type-safe access"
      ]
    }
  }
}
