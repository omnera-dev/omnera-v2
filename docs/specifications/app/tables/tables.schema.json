{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Data Tables",
  "description": "Collection of database tables that define the data structure of your application. Each table represents an entity (e.g., users, products, orders) with fields that define the schema. Tables support relationships, indexes, constraints, and various field types. Tables are the foundation of your application's data model and determine what information can be stored and how it relates.",
  "default": [],
  "type": "array",
  "items": {
    "title": "Data Table",
    "description": "A database table definition with its fields and structure",
    "version": "0.81.0",
    "type": "object",
    "properties": {
      "id": {
        "$ref": "../common/definitions.schema.json#/definitions/id",
        "title": "Table ID",
        "description": "Unique identifier for the table",
        "examples": [1, 2, 100],
        "x-user-stories": [
          "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
          "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
          "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
        ]
      },
      "name": {
        "$ref": "../common/definitions.schema.json#/definitions/name",
        "title": "Table Name",
        "description": "Name of the database table",
        "placeholder": "Enter table name",
        "examples": ["users", "products", "orders", "customers"],
        "pattern": "^[a-z][a-z0-9_]*$",
        "help": "Use lowercase letters, numbers, and underscores. Must start with a letter.",
        "x-user-stories": [
          "GIVEN user configures name WHEN validating input THEN value should meet schema requirements",
          "GIVEN name is set WHEN processing configuration THEN value should be used correctly"
        ]
      },
      "fields": {
        "description": "List of fields/columns in this table",
        "title": "Table Fields",
        "minItems": 1,
        "default": [],
        "type": "array",
        "items": {
          "title": "Field",
          "description": "A field in the table",
          "anyOf": [
            {
              "$ref": "./field-types/array-field.schema.json"
            },
            {
              "$ref": "./field-types/autonumber-field.schema.json"
            },
            {
              "$ref": "./field-types/barcode-field.schema.json"
            },
            {
              "$ref": "./field-types/button-field.schema.json"
            },
            {
              "$ref": "./field-types/checkbox-field.schema.json"
            },
            {
              "$ref": "./field-types/color-field.schema.json"
            },
            {
              "$ref": "./field-types/created-at-field.schema.json"
            },
            {
              "$ref": "./field-types/created-by-field.schema.json"
            },
            {
              "$ref": "./field-types/currency-field.schema.json"
            },
            {
              "$ref": "./field-types/date-field.schema.json"
            },
            {
              "$ref": "./field-types/decimal-field.schema.json"
            },
            {
              "$ref": "./field-types/duration-field.schema.json"
            },
            {
              "$ref": "./field-types/email-field.schema.json"
            },
            {
              "$ref": "./field-types/formula-field.schema.json"
            },
            {
              "$ref": "./field-types/geolocation-field.schema.json"
            },
            {
              "$ref": "./field-types/integer-field.schema.json"
            },
            {
              "$ref": "./field-types/json-field.schema.json"
            },
            {
              "$ref": "./field-types/long-text-field.schema.json"
            },
            {
              "$ref": "./field-types/lookup-field.schema.json"
            },
            {
              "$ref": "./field-types/multi-select-field.schema.json"
            },
            {
              "$ref": "./field-types/multiple-attachments-field.schema.json"
            },
            {
              "$ref": "./field-types/percentage-field.schema.json"
            },
            {
              "$ref": "./field-types/phone-number-field.schema.json"
            },
            {
              "$ref": "./field-types/progress-field.schema.json"
            },
            {
              "$ref": "./field-types/rating-field.schema.json"
            },
            {
              "$ref": "./field-types/relationship-field.schema.json"
            },
            {
              "$ref": "./field-types/rich-text-field.schema.json"
            },
            {
              "$ref": "./field-types/rollup-field.schema.json"
            },
            {
              "$ref": "./field-types/single-attachment-field.schema.json"
            },
            {
              "$ref": "./field-types/single-line-text-field.schema.json"
            },
            {
              "$ref": "./field-types/single-select-field.schema.json"
            },
            {
              "$ref": "./field-types/status-field.schema.json"
            },
            {
              "$ref": "./field-types/updated-at-field.schema.json"
            },
            {
              "$ref": "./field-types/updated-by-field.schema.json"
            },
            {
              "$ref": "./field-types/url-field.schema.json"
            },
            {
              "$ref": "./field-types/user-field.schema.json"
            }
          ]
        },
        "x-business-rules": [
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides fields with at least 1 items WHEN validating input THEN array should be accepted",
          "GIVEN user provides fields with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
        ]
      },
      "primaryKey": {
        "description": "Primary key configuration for the table. The primary key uniquely identifies each row and is automatically indexed.",
        "title": "Primary Key",
        "type": "object",
        "examples": [
          {
            "type": "auto-increment",
            "field": "id"
          },
          {
            "type": "uuid",
            "field": "id"
          },
          {
            "type": "composite",
            "fields": ["tenant_id", "user_id"]
          }
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["auto-increment", "uuid", "composite"],
            "default": "auto-increment",
            "description": "Primary key generation strategy. 'auto-increment' uses sequential integers (1, 2, 3...), 'uuid' generates random unique identifiers, 'composite' uses multiple fields together.",
            "x-business-rules": [
              "Uniqueness constraint prevents conflicts and ensures each type can be unambiguously referenced",
              "Restricted to 3 allowed values (auto-increment, uuid, composite) to maintain type safety and enable clear validation error messages",
              "Defaults to \"auto-increment\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
            ],
            "x-user-stories": [
              "GIVEN a new entity is created WHEN the system assigns an ID THEN it should be unique within the parent collection",
              "GIVEN an entity exists WHEN attempting to modify its ID THEN the system should prevent changes (read-only constraint)",
              "GIVEN a client requests an entity by ID WHEN the ID is valid THEN the entity should be retrieved successfully"
            ]
          },
          "field": {
            "type": "string",
            "description": "Field name for single-column primary key. Only used with 'auto-increment' or 'uuid' type.",
            "default": "id",
            "pattern": "^[a-z][a-z0-9_]*$",
            "examples": ["id", "user_id", "product_id"],
            "x-business-rules": [
              "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors",
              "Defaults to \"id\" when not specified, providing sensible fallback behavior without requiring explicit configuration"
            ],
            "x-user-stories": [
              "GIVEN user provides field matching pattern WHEN validating input THEN value should be accepted",
              "GIVEN user provides field not matching pattern WHEN validating input THEN clear error message should explain format requirement",
              "GIVEN field is stored WHEN retrieved later THEN original format should be preserved"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "description": "Field names for composite primary key. Only used when type is 'composite'. The combination of these fields must be unique.",
            "minItems": 2,
            "examples": [
              ["tenant_id", "user_id"],
              ["order_id", "product_id"]
            ],
            "x-business-rules": [
              "Uniqueness constraint prevents conflicts and ensures each fields can be unambiguously referenced"
            ],
            "x-user-stories": [
              "GIVEN user provides fields with at least 2 items WHEN validating input THEN array should be accepted",
              "GIVEN user provides fields with fewer than 2 items WHEN validating input THEN error should enforce minimum items"
            ]
          }
        },
        "required": ["type"],
        "additionalProperties": false,
        "x-business-rules": [
          "Uniqueness constraint prevents conflicts and ensures each primary key can be unambiguously referenced"
        ],
        "x-user-stories": [
          "GIVEN user configures primaryKey WHEN validating input THEN value should meet schema requirements",
          "GIVEN primaryKey is set WHEN processing configuration THEN value should be used correctly"
        ]
      },
      "uniqueConstraints": {
        "description": "Composite unique constraints ensure that combinations of multiple field values are unique across all rows. Use this when you need uniqueness across multiple fields (e.g., email + tenant_id must be unique together).",
        "title": "Unique Constraints",
        "type": "array",
        "default": [],
        "examples": [
          [
            {
              "name": "uq_user_email_tenant",
              "fields": ["email", "tenant_id"]
            },
            {
              "name": "uq_product_sku_variant",
              "fields": ["sku", "variant_id"]
            }
          ]
        ],
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the unique constraint. Use descriptive names like 'uq_tablename_field1_field2'",
              "minLength": 1,
              "pattern": "^[a-z][a-z0-9_]*$",
              "examples": [
                "uq_users_email_tenant",
                "uq_products_sku_variant",
                "uq_orders_number_year"
              ],
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each name can be unambiguously referenced",
                "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
              ],
              "x-user-stories": [
                "GIVEN user provides name matching pattern WHEN validating input THEN value should be accepted",
                "GIVEN user provides name not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                "GIVEN name is stored WHEN retrieved later THEN original format should be preserved"
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "description": "Field names that must be unique together. The combination of values in these fields must be unique across all rows.",
              "minItems": 2,
              "examples": [
                ["email", "tenant_id"],
                ["first_name", "last_name", "birth_date"]
              ],
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each fields can be unambiguously referenced"
              ],
              "x-user-stories": [
                "GIVEN user provides fields with at least 2 items WHEN validating input THEN array should be accepted",
                "GIVEN user provides fields with fewer than 2 items WHEN validating input THEN error should enforce minimum items"
              ]
            }
          },
          "required": ["name", "fields"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related items properties for better organization and type-safe access"
          ]
        },
        "x-business-rules": [
          "Uniqueness constraint prevents conflicts and ensures each unique constraints can be unambiguously referenced",
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides uniqueConstraints array WHEN validating input THEN items should be processed in order",
          "GIVEN uniqueConstraints array is empty WHEN validating input THEN behavior should follow optional/required rules"
        ]
      },
      "indexes": {
        "description": "Custom database indexes for query optimization. Indexes improve query performance by creating efficient lookup structures for specified fields.",
        "title": "Database Indexes",
        "type": "array",
        "default": [],
        "examples": [
          [
            {
              "name": "idx_user_email",
              "fields": ["email"]
            },
            {
              "name": "idx_user_created",
              "fields": ["created_at"],
              "unique": false
            }
          ]
        ],
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the index. Use descriptive names like 'idx_tablename_fieldname'",
              "minLength": 1,
              "pattern": "^[a-z][a-z0-9_]*$",
              "examples": ["idx_users_email", "idx_products_sku", "idx_orders_status"],
              "x-business-rules": [
                "Pattern constraint enforces data format consistency and error prevention, rejecting invalid formats before they cause system errors"
              ],
              "x-user-stories": [
                "GIVEN user provides name matching pattern WHEN validating input THEN value should be accepted",
                "GIVEN user provides name not matching pattern WHEN validating input THEN clear error message should explain format requirement",
                "GIVEN name is stored WHEN retrieved later THEN original format should be preserved"
              ]
            },
            "fields": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1
              },
              "description": "Field names to include in the index. Order matters for multi-column indexes.",
              "minItems": 1,
              "examples": [["email"], ["first_name", "last_name"], ["status", "created_at"]],
              "x-business-rules": [
                "Array enables multiple fields to be configured, supporting flexible workflows and batch operations"
              ],
              "x-user-stories": [
                "GIVEN user provides fields with at least 1 items WHEN validating input THEN array should be accepted",
                "GIVEN user provides fields with fewer than 1 items WHEN validating input THEN error should enforce minimum items"
              ]
            },
            "unique": {
              "type": "boolean",
              "default": false,
              "description": "Whether this index enforces uniqueness. Use this for unique constraints across multiple fields.",
              "x-business-rules": [
                "Uniqueness constraint prevents conflicts and ensures each unique can be unambiguously referenced",
                "Defaults to false when not specified, providing sensible fallback behavior without requiring explicit configuration"
              ],
              "x-user-stories": [
                "GIVEN unique is true WHEN processing entity THEN corresponding behavior should be enforced",
                "GIVEN unique is false (default: False) WHEN processing entity THEN corresponding behavior should not be enforced",
                "GIVEN configuration with unique WHEN validating settings THEN boolean value should be accepted"
              ]
            }
          },
          "required": ["name", "fields"],
          "additionalProperties": false,
          "x-business-rules": [
            "Object structure groups related items properties for better organization and type-safe access"
          ]
        },
        "x-business-rules": [
          "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
        ],
        "x-user-stories": [
          "GIVEN user provides indexes array WHEN validating input THEN items should be processed in order",
          "GIVEN indexes array is empty WHEN validating input THEN behavior should follow optional/required rules"
        ]
      }
    },
    "required": ["id", "name", "fields"],
    "additionalProperties": false,
    "x-business-rules": [
      "Object structure groups related data table properties for better organization and type-safe access"
    ]
  },
  "x-user-stories": [
    "GIVEN the application is running WHEN I return the admin tables page THEN it should work correctly",
    "GIVEN the application is running WHEN I list tables THEN it should work correctly",
    "GIVEN the application is running WHEN I list table records THEN it should work correctly",
    "GIVEN the application is running WHEN I search table records THEN it should work correctly",
    "GIVEN the application is running WHEN I open and display a table record THEN it should work correctly",
    "GIVEN the application is running WHEN I create a table record THEN it should work correctly",
    "GIVEN I am working with required fields WHEN I create a table record THEN it should complete successfully",
    "GIVEN the application is running WHEN I update a table record THEN it should work correctly",
    "GIVEN the application is running WHEN I delete a table record THEN it should work correctly",
    "GIVEN I am working with missing required fields WHEN I not create a record from a POST request THEN it should complete successfully",
    "GIVEN the application is running WHEN I create a record from a POST request THEN it should work correctly",
    "GIVEN I am working with missing required fields WHEN I not create multiple records from a POST request THEN it should complete successfully",
    "GIVEN the application is running WHEN I create multiple records from a POST request THEN it should work correctly",
    "GIVEN the application is running WHEN I read a record from a GET request THEN it should work correctly",
    "GIVEN the application is running WHEN I list records from a GET request THEN it should work correctly",
    "GIVEN the application is running WHEN I update a record from a PATCH request THEN it should work correctly",
    "GIVEN the application is running WHEN I update multiple records from a PATCH request THEN it should work correctly",
    "GIVEN the application is running WHEN I delete a record from a DELETE request THEN it should work correctly",
    "GIVEN the application is running WHEN I delete multiple records from a DELETE request THEN it should work correctly"
  ],
  "x-business-rules": [
    "Defaults to [] when not specified, providing sensible fallback behavior without requiring explicit configuration"
  ]
}
