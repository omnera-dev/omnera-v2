{
  "openapi": "3.1.0",
  "info": {
    "title": "Omnera Tables API",
    "version": "0.0.1",
    "description": "REST API specification for table configuration and record management in Omnera. This OpenAPI schema defines endpoints for CRUD operations on tables and records."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/api/tables": {
      "get": {
        "summary": "List all tables",
        "description": "Returns array of all configured tables from the application schema. Tables define the data structure and fields for storing records.",
        "operationId": "listTables",
        "tags": ["tables"],
        "responses": {
          "200": {
            "description": "List of tables",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                },
                "examples": {
                  "multipleTables": {
                    "value": [
                      {
                        "id": 1,
                        "name": "users",
                        "fields": [
                          {
                            "id": 1,
                            "name": "email",
                            "type": "email",
                            "required": true
                          }
                        ]
                      },
                      {
                        "id": 2,
                        "name": "products",
                        "fields": [
                          {
                            "id": 1,
                            "name": "title",
                            "type": "single-line-text"
                          }
                        ]
                      }
                    ]
                  },
                  "empty": {
                    "value": []
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tables/{tableId}": {
      "get": {
        "summary": "Get table by ID",
        "description": "Returns a single table configuration by its ID, including all field definitions, primary key, constraints, and indexes.",
        "operationId": "getTable",
        "tags": ["tables"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "Table ID",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                },
                "examples": {
                  "userTable": {
                    "value": {
                      "id": 1,
                      "name": "users",
                      "fields": [
                        {
                          "id": 1,
                          "name": "email",
                          "type": "email",
                          "required": true
                        },
                        {
                          "id": 2,
                          "name": "first_name",
                          "type": "single-line-text"
                        }
                      ],
                      "primaryKey": {
                        "type": "auto-increment",
                        "field": "id"
                      },
                      "uniqueConstraints": [
                        {
                          "name": "uq_users_email",
                          "fields": ["email"]
                        }
                      ],
                      "indexes": [
                        {
                          "name": "idx_users_email",
                          "fields": ["email"],
                          "unique": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Table not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "notFound": {
                    "value": {
                      "error": "Table not found",
                      "code": "TABLE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tables/{tableId}/records": {
      "get": {
        "summary": "List records in table",
        "description": "Returns paginated list of records from the specified table.",
        "operationId": "listRecords",
        "tags": ["records"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/TableNotFound"
          }
        }
      },
      "post": {
        "summary": "Create new record",
        "description": "Creates a new record in the specified table with provided field values.",
        "operationId": "createRecord",
        "tags": ["records"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              },
              "examples": {
                "userRecord": {
                  "value": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                },
                "examples": {
                  "created": {
                    "value": {
                      "id": 1,
                      "email": "user@example.com",
                      "first_name": "John",
                      "last_name": "Doe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/TableNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        }
      }
    },
    "/api/tables/{tableId}/records/{recordId}": {
      "get": {
        "summary": "Get record by ID",
        "description": "Returns a single record from the table by its ID.",
        "operationId": "getRecord",
        "tags": ["records"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Record data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/RecordNotFound"
          }
        }
      },
      "patch": {
        "summary": "Update record",
        "description": "Updates an existing record with provided field values. Only provided fields are updated (partial update).",
        "operationId": "updateRecord",
        "tags": ["records"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Record updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/RecordNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        }
      },
      "delete": {
        "summary": "Delete record",
        "description": "Deletes a record from the table by its ID.",
        "operationId": "deleteRecord",
        "tags": ["records"],
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/RecordNotFound"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Table": {
        "type": "object",
        "description": "Table configuration with fields, constraints, and indexes",
        "required": ["id", "name", "fields"],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique table identifier",
            "minimum": 1,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Table name following database naming conventions",
            "pattern": "^[a-z][a-z0-9_]*$",
            "example": "users"
          },
          "fields": {
            "type": "array",
            "description": "Array of field definitions",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "primaryKey": {
            "$ref": "#/components/schemas/PrimaryKey"
          },
          "uniqueConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueConstraint"
            }
          },
          "indexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Index"
            }
          }
        }
      },
      "Field": {
        "type": "object",
        "description": "Field definition with type and validation rules",
        "required": ["id", "name", "type"],
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9_]*$"
          },
          "type": {
            "type": "string",
            "enum": [
              "single-line-text",
              "long-text",
              "email",
              "url",
              "phone-number",
              "integer",
              "decimal",
              "currency",
              "percentage"
            ]
          },
          "required": {
            "type": "boolean",
            "default": false
          },
          "unique": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "PrimaryKey": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["auto-increment", "uuid", "composite"]
          },
          "field": {
            "type": "string",
            "description": "Field name for single-column primary key"
          },
          "fields": {
            "type": "array",
            "description": "Field names for composite primary key",
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UniqueConstraint": {
        "type": "object",
        "required": ["name", "fields"],
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9_]*$"
          },
          "fields": {
            "type": "array",
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Index": {
        "type": "object",
        "required": ["name", "fields"],
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z][a-z0-9_]*$"
          },
          "fields": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "unique": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "code": {
            "type": "string",
            "description": "Machine-readable error code"
          },
          "details": {
            "type": "object",
            "description": "Additional error details",
            "additionalProperties": true
          }
        }
      }
    },
    "responses": {
      "TableNotFound": {
        "description": "Table not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "notFound": {
                "value": {
                  "error": "Table not found",
                  "code": "TABLE_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "RecordNotFound": {
        "description": "Record not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "notFound": {
                "value": {
                  "error": "Record not found",
                  "code": "RECORD_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "missingRequired": {
                "value": {
                  "error": "Validation failed",
                  "code": "VALIDATION_ERROR",
                  "details": {
                    "field": "email",
                    "message": "Email is required"
                  }
                }
              }
            }
          }
        }
      },
      "ConflictError": {
        "description": "Conflict error (e.g., unique constraint violation)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "uniqueViolation": {
                "value": {
                  "error": "Unique constraint violation",
                  "code": "UNIQUE_CONSTRAINT_VIOLATION",
                  "details": {
                    "constraint": "uq_users_email",
                    "field": "email"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "tables",
      "description": "Table configuration endpoints"
    },
    {
      "name": "records",
      "description": "Record CRUD operations"
    }
  ]
}
